<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Core Technology</title><link rel="stylesheet" type="text/css" href="../../../../css/TAN-guidelines.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="home" href="index.xhtml" title="The Text Alignment Network: Official Guidelines"/><link rel="up" href="ch04.xhtml" title="Chapter 4. General Underpinnings"/><link rel="prev" href="ch04s02.xhtml" title="Assumptions in the Creation of TAN Data"/><link rel="next" href="ch05.xhtml" title="Chapter 5. Patterns and Structures Common to All TAN Encoding Formats"/></head><body><div class="navheader"><table width="100%" summary="Navigation header"><tr><th colspan="3" align="center">Core Technology</th></tr><tr><td width="20%" align="left"><a accesskey="p" href="ch04s02.xhtml">Prev</a> </td><th width="60%" align="center">Chapter 4. General Underpinnings</th><td width="20%" align="right"> <a accesskey="n" href="ch05.xhtml">Next</a></td></tr></table><hr/></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="d5e685"/>Core Technology</h2></div></div></div><p>TAN depends upon a core set of basic, relatively stable technologies, discussed
               below. The technology and associated key acronyms or terms are very briefly defined
               and explained, to orient you to the concept, terminology, and conventions. References
               to further reading will lead you to better and more thorough introductions. The
               central goal of this section is to document and explain how certain aspects of each
               technology have affected the design of TAN, and therefore may significantly affect
               creating or processing TAN-compliant data.</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="unicode"/>Unicode</h3></div></div></div><p>Unicode is the worldwide standard for the consistent encoding, representation,
                  and exchange of digital texts. The standard, stable but still growing, is intended
                  to represent all the world's writing systems, living and historical. Maintained by
                  a nonprofit organization, Unicode is the basis upon which we can create and edit
                  text in mixed alphabets and reliably share that data with other people,
                  independent of specific fonts. Any Unicode-compliant text is (in general)
                  semantically interoperable on the character level and can be exchanged between
                  users and systems, no matter what font might be used to display the text. If some
                  software tries to display some Unicode-compliant text in a particular font that
                  does not support a particular alphabet, and ends up displaying boxes, the
                  underlying data is still intact and valid. Styling the text with a font that does
                  support the alphabet will reveal this to be the case.</p><p>With more than 110,000 characters, Unicode is almost as complex as human
                  writing itself, and so has required a system of organization. The entire sequence
                  of characters is divided into Unicode blocks, each one reserved, more or less, for
                  a particular alphabet. Within each block, the various characters may be grouped
                  further. Each character is assigned a single codepoint.</p><p>Because computers work on the binary system, it was considered ideal to number
                  the characters or glyphs in Unicode with a related numeration system. Codepoints
                  are therefore numbered according to a hexadecimal system (base 16), which is
                  larger than our most common system, the decimal (base 10). The hexadecimal system
                  uses the digits 0 through 9 and the letters A through F. (The number 10 in decimal
                  is A in hexadecimal; decimal 11 = hex B; decimal 17 = hex 10; decimal 79 = hex
                  4F.) To find Unicode codepoint values is therefore helpful to think of the corpus
                  of glyphs as a very long ribbon sixteen squares wide. This is illustrated nicely
                     <a class="link" href="http://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF" target="_top">in this article</a>. Each position along the width is labeled with a
                  hexadecimal number (0-9, A-F) that always identifies the last digit of a
                  character's code point value.</p><p>It is common to refer to Unicode characters by their value or their name. The
                  value customarily starts "U+" and continues with the hexadecimal value, usually at
                  least four digits. The official Unicode name is usually given fully in uppercase.
                  Examples:</p><p>
                  </p><div class="table"><a id="d5e696"/><p class="title"><strong>Table 4.1. Unicode characters</strong></p><div class="table-contents"><table summary="Unicode characters" border="1"><colgroup><col class="c1"/><col class="c2"/><col class="c3"/></colgroup><thead><tr><th>Character</th><th>Unicode value</th><th>Unicode name</th></tr></thead><tbody><tr><td>" " (space)</td><td>U+0020</td><td>SPACE</td></tr><tr><td>®</td><td>U+00AE</td><td>REGISTERED SIGN</td></tr><tr><td>ю</td><td>U+044E</td><td>CYRILLIC SMALL LETTER YU</td></tr></tbody></table></div></div><p><br class="table-break"/>
               </p><p>Further reading:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><a class="link" href="http://unicode.org" target="_top">Unicode Consortium</a></p></li><li class="listitem"><p><a class="link" href="http://en.wikipedia.org/wiki/Unicode" target="_top">Unicode</a>
                           (Wikipedia)</p></li></ul></div><p>
                  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note: Normalization"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="normalization"/>Normalization</th></tr><tr><td align="left" valign="top"><p>TAN requires all data to be normalized according to the Unicode NFC
                        algorithm. Any text in a TAN body that does not comply will be marked as
                        invalid. Validation engines that support Schematron Quick Fixes should
                        provide an option to allow users to easily convert non-normalized to
                        normalized Unicode.</p></td></tr></table></div><p>
                  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note: Combining characters"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="combining_characters"/>Combining characters</th></tr><tr><td align="left" valign="top"><p>At the core level of conformance, Unicode does not dictate whether
                        combining characters (accents, modifying symbols) should be counted
                        independently or as part of a base character. This affects regular
                        expressions and XPath expressions. Any class 1 TAN file that takes a
                        modifying letter will have a warning returned whenever it is validated. Any
                        class 2 TAN file that attempts to count characters in a string of text that
                        includes combining characters will be marked as invalid.</p></td></tr></table></div><p>
               </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="xml"/>eXtensible Markup Language (XML)</h3></div></div></div><p>The eXtensible Markup Language (XML) is a machine-actionable markup language
                  that facilitates human readability. Defined by the W3C, XML has two versions, 1.0
                  and 1.1. &lt;<span class="bold"><strong>Q: should version 1.1 be allowed or
                     mandated?</strong></span>&gt;</p><p>At its heart, XML is rather simple. It begins with an opening line that
                  declares that what otherwise would look just like plain text is an XML file. It
                  then proceeds to the data, which must marked by one or more pairs of tags. An
                  opening tag looks like <code class="code">&lt;tag&gt;</code> and a closing like
                     <code class="code">&lt;/tag&gt;</code> (or if the tags contain no data, this can be collapsed
                  into one: <code class="code">&lt;tag/&gt;</code>). Each pair of tags is called an element.
                  Elements must nest within each other. They cannot overlap. For
                  example:</p><pre class="programlisting">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;p&gt;A paragraph about 
    &lt;name&gt;&lt;first&gt;Mary&lt;/first&gt; 
        &lt;last&gt;Lee&lt;/last&gt;&lt;/name&gt;.&lt;/p&gt;</pre><p>This nesting relationship of elements means that an XML document can be thought
                  of as a tree or genealogy, which serves as the basis of technical vocabulary that
                  describes the relationship between elements: root, parent, child, sibling,
                  ancestor, and descendant. In the example above, the root element
                     <code class="code">&lt;p&gt;</code> is the parent of <code class="code">&lt;name&gt;</code> and the ancestor of
                     <code class="code">&lt;name&gt;</code>, <code class="code">&lt;first&gt;</code>, and <code class="code">&lt;last&gt;</code>.
                  The element <code class="code">&lt;first&gt;</code> is a child of <code class="code">&lt;name&gt;</code> and a
                  descendant of both &lt;name&gt; and <code class="code">&lt;p&gt;</code>. <code class="code">&lt;first&gt;</code> and
                     <code class="code">&lt;last&gt;</code> are siblings to each other.</p><p>The opening tag of an element might have additional nodes called attributes,
                  recognized by a word, an equals sign, and then some text within quotation marks
                  (single or double). An element may have many attributes, and those attributes can
                  appear in any order. Attributes can be thought of as leaves on an XML tree. They
                  are intended to carry simple data (usually metadata about the data contained by
                  the element), because they cannot govern a hierarchy.</p><pre class="programlisting">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;p n="1" id="example"&gt;A paragraph about &lt;name&gt;&lt;first&gt;Mary&lt;/first&gt; &lt;last&gt;Lee&lt;/last&gt;&lt;/name&gt;.&lt;/p&gt;</pre><p>The two examples above provide the same text with different line breaks, but
                  they are functionally equivalent. That is because in most XML projects extra
                  lines, spaces, and indentation are allowed so that a document's layout can show
                  more clearly, through indented space, how elements nest within each other.
                  Continuous strings of multiple spaces, tabs, and newline/carriage return are to be
                  treated as a single space. (This behavior can be overridden in XML, but TAN files
                  always assume that a string and its space-normalized form are equivalent.)</p><p>XML allows for other rules to be added, if an individual or group so wishes.
                  These rules, called schemas, can allow great flexibility or be very strict. The
                  TAN schemas tend to the latter. This is true also of its customization of the TEI
                  schemas. For more about the strictures placed upon the TEI All schema see <a class="xref" href="ch06s03.xhtml" title="Transcriptions Using the Text Encoding Initiative (&lt;TAN-TEI&gt;)">the section called “Transcriptions Using the Text Encoding Initiative
               (<code class="code">&lt;TAN-TEI&gt;</code>)”</a>. See also <a class="xref" href="ch05.xhtml" title="Chapter 5. Patterns and Structures Common to All TAN Encoding Formats">Chapter 5, <em>Patterns and Structures Common to All TAN Encoding Formats</em></a> and <a class="xref" href="ch06.xhtml" title="Chapter 6. Class 1 TAN Files, Representations of Textual Objects">Chapter 6, <em>Class 1 TAN Files, Representations of Textual Objects</em></a>.</p><p>TAN-TEI schemas are generated on the basis of the official TEI All schema that
                  is available at the time of release. </p><p>Further reading:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><a class="link" href="http://www.tei-c.org/" target="_top">Text Encoding
                              Initiative</a></p></li></ul></div><p>
                  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note: TAN and white space"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="whitespace"/>TAN and white space</th></tr><tr><td align="left" valign="top"><p>&lt;Stuff about space normalization and text nodes with nothing but blank
                        space. The default: all whitespace text nodes will be taken as real, but
                        will also be subject to the same kind of normalization as one gets in
                           <code class="code">fn:normalize-space()</code>. All leaf <code class="code">&lt;div&gt;</code>s will
                        have their space normalized. This will be applied to the concatenation of
                        all text() descendants. Important for TEI users to know, since whitespace
                        text nodes will be treated as a single space, and if white space appears at
                        the beginning or end of a text node that is a descendant of a leaf
                           <code class="code">&lt;div&gt;</code>, it will not necessarily be stripped out.&gt;</p><p>Every leaf <code class="code">&lt;div&gt;</code> separated from another leaf
                           <code class="code">&lt;div&gt;</code> by one or more spacing characters is assumed to be
                        separated by only one, but no specification is made as to whether that
                        spacing character should be a word space (U+0020 or the XML entity
                        &amp;#x20;) or one of the other three possible characters (line feed,
                        carriage return, tab). Users are expected to consult the relevant
                           <code class="code">&lt;div-type&gt;</code> to interpret the behavior. TAN is not intended
                        to replicate the appearance of a text-bearing object. Any project that has
                        this as a requirement should not use the TAN format.</p></td></tr></table></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="tei_and_id_validation"/>Note</th></tr><tr><td align="left" valign="top"><p>Some validation engines that process a valid TAN-compliant TEI file may
                        return an error something like <code class="code">conflicting ID-types for attribute
                           "who" of element "comment" from namespace
                           "tag:textalign.net,2015:ns"</code>. Such a message alerts you to the fact
                        that by mixing the TEI and TAN namespaces, you open yourself up to the
                        possibility of conflicting <code class="code">xml:id</code> values. It is your
                        responsibility to ensure that you have not assigned duplicate identifiers.
                        Very often, it is possible for you to configure an XML editor to ignore this
                        discrepancy. (In &lt;oXygen/&gt; XML editor go to Options &gt; Preferences... &gt;
                        XML &gt; XML Parser &gt; RELAX NG and uncheck the box check ID/IDREF.)</p></td></tr></table></div><p>
               </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="namespace"/>Namespace</h3></div></div></div><p>XML allow users to develop vocabularies of elements as they wish. One person
                  may wish to use <code class="code">&lt;bank&gt;</code> to refer to a financial institution,
                  another to a river. XML was designed to allow users to mix vocabularies, even when
                  those vocabularies use synonymous element names. This means that anyone using
                     <code class="code">&lt;bank&gt;</code> as an element name must be able to specify exactly whose
                  vocabulary of <code class="code">&lt;bank&gt;</code> is intended. Disambiguation is accomplished
                  by associating IRIs (see <a class="xref" href="ch04s03.xhtml#IRIs_and_linked_data" title="International Resource Identifiers and Linked Data">the section called “International Resource Identifiers and Linked Data”</a> below) with the
                  element names. The actual full name of an element is the joined IRI and element
                  name, e.g., <code class="code">http://example1.com/terms/bank</code> and
                     <code class="code">http://example2.com/terms/bank</code>. </p><p>This approach to disambiguation is effective but it requires some way to
                  associate the element name with its base IRI. If only one vocabulary is in play,
                  then the base IRI can be declared to be the default
                  <span class="emphasis"><em>namespace</em></span>, which means that any subsequent element should be
                  treated as being the <span class="emphasis"><em>local name</em></span> of an element that is part of
                  that namespace. The namespace is much like a surname (family name) and the local
                  name, a given name of a person in that family. If a simple, small genealogical
                  tree is said to belong to the Smith family, then the name "Smith" need appear only
                  at the head, not at every person named on that tree.</p><p>But just as genalogical trees that involve other families require
                  disambiguation, so too do XML files that mix vocabularies. But where a
                  genealogical tree can simply add the family names at every node, XML has opted for
                  a different mechanism, that of the <span class="emphasis"><em>prefix</em></span>, a short string
                  that is associated with the namespace, and is then attached to the element name. </p><p>For example, the TAN namespace is <span class="bold"><strong><code class="code">tag:textalign.net,2015:ns</code></strong></span>. The recommended prefix
                  is <span class="bold"><strong><span class="emphasis"><em>tan</em></span></strong></span>. It is customary,
                  then, when TAN elements are mixed with other elements such as TEI, to use the
                  prefix to disambiguate them, e.g., <code class="code">&lt;tan:div&gt;</code> versus
                     <code class="code">&lt;tei:div&gt;</code>. The fully qualified name of
                     <code class="code">&lt;tei:div&gt;</code> is properly
                     <code class="code">http://www.tei-c.org/ns/1.0/div</code>, whereas <code class="code">&lt;tan:div&gt;</code>
                  is <code class="code">tag:textalign.net,2015:ns/div</code>. </p><p>Any XML element may take a special attribute (actually a pseudo-attribute,
                  since it is technically not an attribute), <code class="code">@xmlns</code>, sometimes on its
                  own and sometimes followed by a colon and a prefix. The first case is used to
                  declare the default namespace (and therefore sidestep the need to use a prefix).
                  The second case is used to bind a namespace to a prefix. These definitions apply
                  not only to the element that contains the <code class="code">@xmlns</code> attribute but to all
                  descendants, unless overridden. </p><p>
                  </p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Caution"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Caution]" src="img/caution.png"/></td><th align="left">Caution</th></tr><tr><td align="left" valign="top"><p>There are no plans to change the namespace. But if, in the future
                        development of the network, it becomes clear that one or more elements must
                        be redefined in manner incompatible with previous definitions, then the
                        namespace will be changed as well. Such a change will coincide with a major
                        version update of the schemas (see <a class="xref" href="ch04s03.xhtml#schemas_and_validation" title="Schemas and Validation">the section called “Schemas and Validation”</a>).</p></td></tr></table></div><p>
               </p><p>The examples and the validation files illustrate the use of the TAN namespace.
                  See especially those files pertaining to class 1 and TAN-TEI files, where the TEI
                  and TAN vocabularies mix.</p><p>The TAN namespace uses a tag URN instead of an <code class="code">http://</code> IRI for
                  several reasons: (1) http namespaces rarely resolve as a URL to anything useful;
                  (2) tag URN reinforces the lesson that the namespace is a name and not a location;
                  (3) tag URNs are naturally constructed to allow versioning (see note above); (4)
                  should the domain name <code class="code">textalign.net</code> come under the ownership of
                  someone else, the namespace will still remain valid because it is tied to a date
                  when that domain was owned; http-prefixed namespaces are in jeopardy of being
                  rendered invalid when a domain name changes ownership.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="schemas_and_validation"/>Schemas and Validation</h3></div></div></div><p>XML files admit of a process called <span class="italic">validation</span>, which checks to see if all the declared rules have been
                  followed. These validation rules are kept in files called <span class="italic">schemas</span>, plain-text files that state the rules according to one of
                  the accepted schema languages. Each TAN file is validated by two types of schema
                  files, one dealing with major rules concerning structure and data type (written in
                  RELAX-NG) the other with very detailed rules (written in Schematron).</p><p>Schema files are provided in major or minor updates. An update is minor if the
                  changes introduced do not render files valid under previous minor updates invalid.
                  (But new warnings might be produced.) Otherwise the update will be treated as
                  major.</p><p>
                  </p><div class="table"><a id="d5e826"/><p class="title"><strong>Table 4.2. Locations of master schemas</strong></p><div class="table-contents"><table summary="Locations of master schemas" border="1"><colgroup><col class="c1"/><col class="c2"/></colgroup><thead><tr><th>Schema path</th><th>Schema files accessed</th></tr></thead><tbody><tr><td><code class="code">http://textalign.net/release/1/dev/schemas/</code></td><td>Major version 1, developmental version</td></tr><tr><td><code class="code">http://textalign.net/release/1/schemas</code></td><td>Major version 1, latest minor version</td></tr></tbody></table></div></div><p><br class="table-break"/>
               </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="data_types"/>Data types</h3></div></div></div><p>&lt;Stuff about data types&gt;</p><p>Data types regularly used: boolean, string, integer, IRI, date, dateTime</p><p>New paragraph introducing <code class="code">@xml:lang</code> / xsd:language</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note: xsd:language"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="language"/>xsd:language</th></tr><tr><td align="left" valign="top"><p>TAN adopts for language identification Best Common Practices (BCP) 47,
                        which standardizes with high precision how languages are identified. For
                        most users of TAN, this will be a simple three-letter abbreviation,
                        sometimes supplemented with a hyphen and a script or regional subtag. For
                        example, <code class="code">&lt;eng&gt;</code>, <code class="code">&lt;eng-UK&gt;</code>, and
                           <code class="code">&lt;eng-UK-Cyrl&gt;</code> refer, respectively, to English generally,
                        English from the United Kingdom, and English from the United Kingdom written
                        in the Cyrillic script. As a general rule, values of this type should begin
                        with a three-letter language code, preferably lowercase.</p><p>ISO codes for human languages appear in <code class="code">@xml:lang</code> and
                           <code class="code">&lt;for-lang&gt;</code>. The first, an attribute, indicates the
                        principal language of the text enclosed by the element and its descendants.
                        But the second, an element, provides a way to make a statement about a
                        language. For example, <code class="code">&lt;for-lang&gt;</code> in the context of a
                        TAN-R-tok file indicates languages for which a tokenization rule is
                        appropriate.</p><p>More reading:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>BCP 47 <a class="link" href="http://tools.ietf.org/rfc/bcp/bcp47" target="_top">official specifications</a></p></li><li class="listitem"><p>BPC 47 <a class="link" href="http://www.w3.org/TR/xmlschema11-2/#language" target="_top">technical details</a></p></li></ul></div></td></tr></table></div><p>&lt;New paragraph introducing dates and times&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note: xsd:date, xsd:dateTime"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="date_and_datetime"/>xsd:date, xsd:dateTime</th></tr><tr><td align="left" valign="top"><p>TAN adopts the standardized ISO form of dates and times, which begins
                        with the largest unit and moves to the smallest. A simple date takes this
                        form: <code class="code">&lt;YYYY-MM-DD&gt;</code>. A time is specified by continuing the
                        string, first with a <code class="code">&lt;T&gt;</code> (for time) then with &lt;NEEDS TO
                        BE WRITTEN&gt;. Examples: &lt;PENDING&gt;.</p><p>The normalized value of <code class="code">@when</code> that is most recent in a TAN
                        document differentiates the version of a documents that share the same IRI
                        name (see <a class="xref" href="ch05s03.xhtml#uri_name" title="Core name, location metadata">the section called “Core name, location metadata”</a>).</p><p>Future dates are not allowed in TAN files. (This is checked against the
                        clock settings on individual computers.)</p><p>More reading:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>ISO dates</p></li></ul></div></td></tr></table></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="IRIs_and_linked_data"/>International Resource Identifiers and Linked Data</h3></div></div></div><p><span class="bold"><strong>&lt;NOT YET WRITTEN&gt;</strong></span></p><p>&lt;Stuff about URNs and related terms <span class="emphasis"><em>URI</em></span>,
                     <span class="emphasis"><em>IRI</em></span>, <span class="emphasis"><em>URN</em></span>,
                  <span class="emphasis"><em>UUID</em></span>&gt;</p><p>The network regularly depends upon three types of legally defined IRIs:</p><p>
                  </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>IRI generally: https://tools.ietf.org/html/rfc3986</p></li><li class="listitem"><p>UUID</p></li><li class="listitem"><p>HTTP</p></li><li class="listitem"><p>tag URNs: </p></li><li class="listitem"><p>OID</p></li></ul></div><p>
               </p><p>&lt;xml:id can't take colons; thus the IRI for TAN files has been given another
                  attribute name, to ensure that tag URNs are always constructed validly. See
                  below.&gt;</p><p><span class="bold"><strong>Resource Description Framework (RDF) and Linked Open
                     Data</strong></span>. The recommended way to prepare data for the semantic web is to
                  coin and use URN names that take the form of URLs. The URL then allows one both to
                  uniquely name an object and to indicate how a human or computer can get more
                  information about it. The TAN encoding format has chosen tag URNs over URLs for
                  several reasons:</p><p>
                  </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="bold"><strong>Permanence.</strong></span> Authors of TAN data are
                           creating files that are meant to be relevant for decades and centuries in
                           the future, well after specific domain names have changed ownership or
                           fallen into obsolesence, and well after the creators are dead. To mint
                           names according to URLs is inadequate for long-term use, since it has no
                           built-in mechanism to identify who owned the domain name in question when
                           the name was minted. </p></li><li class="listitem"><p><span class="bold"><strong>Hassle-free URN naming</strong></span>. Many
                           potential TAN authors never have owned a domain name, and never will.
                           Further, many of those who do own domain names cannot or do not wish to
                           configure and maintain servers to create the referral mechanisms upon
                           which the semantic web depends. The majority of potential TAN file
                           editors would be happy to mint names that could be later adapted for
                           semantic web applications, but would not want to take on the extra hassle
                           involved in writing and publishing more complicated data descriptions,
                           e.g., RDFa.</p></li><li class="listitem"><p><span class="bold"><strong>Disambiguation of name and location</strong></span>.
                           In the semantic web, conflation of name with a location to resolve it is
                           considered a virtue because a single string answers two questions: what
                           is the resource and where can I find out more about it. But this
                           conflation is unhelpful for those who use the TAN formats, who are
                           encouraged to distribute their TAN files widely, and not rely upon a
                           single location. And URLs are in common parlance interpreted as locations
                           for data, not as names for things. TAN-compliant tag URLs ensure that the
                           names of concepts and objects do not look like locations, maintaining a
                           distinction that has always been a foundational principle in scholarly
                           citation, namely, that one should always distinguish the name of a
                           resource from where it might be found.</p></li></ul></div><p>
               </p><p>&lt;New paragraph.&gt;</p><p>
                  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left">Note</th></tr><tr><td align="left" valign="top"><p>&lt;Internationalization behind IRIs&gt;</p><p>TAN does not constrain IRI values. Anything conforming to xsd:anyURI can
                        be used, including formulations that have not been approved by IANA. This
                        manual restricts itself to only approved URN schemes. &lt;link&gt;</p><p>IRI: http://www.ietf.org/rfc/rfc3987.txt</p></td></tr></table></div><p>
               </p><p>
                  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note: Tag URNs"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left"><a id="tag_urn"/>Tag URNs</th></tr><tr><td align="left" valign="top"><p>TAN files make extensive use of the tag URN scheme. A <a class="link" href="http://www.taguri.org" target="_top">tag URN</a> is a composite of (1) a
                        namespace, an identifier of the authority of the TAN file and (2) a name, a
                        string unique relative to the namespace. Those two parts, more
                        specificially, are:</p><p>
                        </p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p><span class="bold"><strong>Namespace.</strong></span>
                                 <code class="code">tag:</code> + an e-mail address or domain name owned by the
                                 person or organization that has authorized the creation of the TAN
                                 file + <code class="code">,</code> + an arbitrary day on which that address or
                                 domain name was owned. The day is expressed in the form
                                    <code class="code">&lt;YYYY-MM-DD&gt;</code>, <code class="code">&lt;YYYY-MM&gt;</code>, or
                                    <code class="code">&lt;YYYY&gt;</code>. A missing <code class="code">&lt;MM&gt;</code> or
                                    <code class="code">&lt;DD&gt;</code> is implicitly assigned the value of
                                    <code class="code">&lt;01&gt;</code>.</p></li><li class="listitem"><p><span class="bold"><strong>Name of the TAN file.</strong></span>
                                 <code class="code">:</code> + an arbitrary string (unique to the namespace
                                 chosen) chosen by the namespace owner as a label for the entire
                                 file and related versions. It need not be the same as the filename
                                 stored on a local directory. You should pick a name that is at
                                 least somewhat intelligible to human readers.</p></li></ol></div><p>
                     </p><p>
                        </p><div class="example"><a id="d5e947"/><p class="title"><strong>Example 4.1. TAN IRI names</strong></p><div class="example-contents"><pre class="programlisting">tag:jan@example.com,1999-01-31:TAN-T001
tag:example.com,2001-04:hamlet-tan-t
tag:evagriusponticus.net,2014:tan-lm:Evagrius_Praktikos_grc_Guillaumonts
tag:bbrb@example.org,1995-04-01:pos-grc</pre><p>The first example comes from someone who owned the email address
                                 <code class="code">jan@example.com</code> on January 31, 1999 (at the stroke of
                              midnight, Universal Coordinated Time). The other examples follow a
                              similar logic. The namespace of the second and third examples are tied
                              to the owners of specific domain names, not those of email addresses.
                              The <code class="code">2014</code> in the fourth example is shorthand for the first
                              second of January 1, 2014.</p></div></div><p><br class="example-break"/>
                     </p><p>Further reading:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><a class="link" href="https://tools.ietf.org/html/rfc4151" target="_top">RFC
                                    4151</a>, the official definition of tag URNs</p></li></ul></div></td></tr></table></div><p>
               </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="regular_expressions"/>Regular Expressions</h3></div></div></div><p>Regular expressions are patterns for searching text. The term <span class="italic">regular</span> here does not mean ordinary. Rather, it refers
                  to rules (Latin <span class="italic">regula</span>), and points to a
                  rule-based syntax that provides regular expressions with great power. Because
                  regular expressions come in different flavors, and because the topic is rather
                  complex, these guidelines are restricted to a synopsis that conforms to the
                  definition of regular expressions found in the <a class="link" href="http://www.w3.org/TR/xslt-30/#regular-expressions" target="_top">recommendation
                     of XSLT 3.0</a> (XML Schema Datatypes plus some extensions), and outlined in
                     <a class="link" href="http://www.w3.org/TR/xpath-functions-30/#regex-syntax" target="_top">XPath
                     Fuctions 3.0</a>. </p><p>A regular expression search pattern is treated just like a conventional search
                  pattern until the computer reaches a special escape character: <code class="code">^ $ ( [ | . {
                     + * ? \</code></p><p>Here are a number of the special characters that are used in regular
                  expressions, and what they mean. These tables, which are here mainly for quick
                  reference, are not self-sufficient to ground you in regular expressions.</p><p>
                  </p><div class="table"><a id="d5e969"/><p class="title"><strong>Table 4.3. Special characters</strong></p><div class="table-contents"><table summary="Special characters" border="1"><colgroup><col class="c1"/><col class="c2"/></colgroup><thead><tr><th>Symbol</th><th>Meaning</th></tr></thead><tbody><tr><td>^</td><td>start of line</td></tr><tr><td>$</td><td>end of line</td></tr><tr><td>.</td><td>any character</td></tr><tr><td>|</td><td>or (union)</td></tr><tr><td>[ad]</td><td>a or d</td></tr><tr><td>[a-d]</td><td>a, b, c, or d</td></tr><tr><td>[^ad]</td><td>anything except a or d</td></tr><tr><td>(ad)</td><td>when ad is found treat it as a capture group (used only in a
                                 search pattern)</td></tr><tr><td>$1</td><td>first capture group (used only in a replacement pattern, and
                                 corresponds to the sequence of capture groups in the search
                                 pattern)</td></tr></tbody></table></div></div><p><br class="table-break"/>
               </p><p>
                  </p><div class="table"><a id="d5e1007"/><p class="title"><strong>Table 4.4. Backslash special characters</strong></p><div class="table-contents"><table summary="Backslash special characters" border="1"><colgroup><col class="c1"/><col class="c2"/></colgroup><thead><tr><th>Symbol</th><th>Meaning</th></tr></thead><tbody><tr><td>\w</td><td>any word character</td></tr><tr><td>\W</td><td>any nonword character</td></tr><tr><td>\s</td><td>any of the four standard spacing characters: space (U+0020),
                                 tab (U+0009), newline (U+000A), carriage return (U+000D)</td></tr><tr><td>\S</td><td>anything not a spacing character</td></tr><tr><td>\d</td><td>any digit (0-9)</td></tr><tr><td>\D</td><td>anything not a digit</td></tr><tr><td>\x{hhh..}</td><td>character with the Unicode code point hhh..</td></tr><tr><td>\p{IsGujarati}</td><td>any character from the Unicode block named Gujarati</td></tr><tr><td>\\</td><td>backslash (the backslash alone suggests that the next character
                                 is a special character)</td></tr><tr><td>\$</td><td>dollar sign</td></tr><tr><td>\(</td><td>opening parenthesis</td></tr><tr><td>\[</td><td>opening square bracket</td></tr></tbody></table></div></div><p><br class="table-break"/></p><p>
                  </p><div class="table"><a id="quantifiers"/><p class="title"><strong>Table 4.5. Quantifiers</strong></p><div class="table-contents"><table summary="Quantifiers" border="1"><colgroup><col class="c1"/><col class="c2"/></colgroup><thead><tr><th>Symbol</th><th>Meaning</th></tr></thead><tbody><tr><td>?</td><td>zero or one</td></tr><tr><td>*</td><td>zero or more</td></tr><tr><td>+</td><td>one or more</td></tr><tr><td>{n}</td><td>n times</td></tr><tr><td>{n,m}</td><td>from n to m times</td></tr><tr><td>{n,}</td><td>n times or more</td></tr></tbody></table></div></div><p><br class="table-break"/>
               </p><p>Some examples:</p><div class="table"><a id="d5e1083"/><p class="title"><strong>Table 4.6. Examples of Regular Expressions</strong></p><div class="table-contents"><table summary="Examples of Regular Expressions" border="1"><colgroup><col class="newCol1"/><col class="c1"/><col class="c2"/></colgroup><thead><tr><th>Expression</th><th>Meaning</th><th>Result when applied to "Wi-fi, good. A_hem* isn't!"</th></tr></thead><tbody><tr><td><code class="code">.i</code></td><td>any letter followed by i.</td><td>"Wi", "fi", " i"</td></tr><tr><td><code class="code">[t*].</code></td><td>any t or * and the following character</td><td>"* ", "t!"</td></tr><tr><td><code class="code">\s+</code></td><td>match one or more space characters</td><td>" ", " ", " "</td></tr><tr><td><code class="code">\w+</code></td><td>match one or more word characters</td><td>"Wi", "fi", "good", "A_hem", "isn", "t"</td></tr><tr><td><code class="code">\W+</code></td><td>match one or more nonword characters</td><td>"-", ", ", ". ", "* ", "'", "!"</td></tr><tr><td><code class="code">[^q]+</code></td><td>one or more characters that are not a q</td><td>"Wi-fi, good. A_hem* isn't!"</td></tr></tbody></table></div></div><br class="table-break"/><p>These short examples provide a taste of how regular expressions are constructed
                  and read. For further examples especially relevant to TAN see <a class="xref" href="">???</a>. </p><div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning: Regular Expressions and Combining Characters"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Warning]" src="img/warning.png"/></td><th align="left"><a id="reg_exp_and_comb_chars"/>Regular Expressions and Combining Characters</th></tr><tr><td align="left" valign="top"><p>Regular expressions come in many different flavors, and each one deals with
                     some of the more complex issues in Unicode in their own manners. This ambiguity
                     will be most keenly felt in the use of combining characters in Unicode. Given a
                     string <code class="code">&amp;#x61;&amp;#x301;&amp;#x62;</code> = áb, a search pattern
                        <code class="code">a.</code> will in some search engines include the b and others will
                     not.</p><p>Unicode has differentiated three levels of support for regular expressions
                     (see <a class="link" href="http://www.unicode.org/reports/tr18/" target="_top">official
                        report</a>). Only level one conformance in TAN is guaranteed. If you find
                     the need to count characters, and you are working with a language that uses
                     combining characters, you should use token values, not numerals pointing to
                     ordinal sequence. There is no guarantee that combining characters these will be
                     treated uniformly. See <a class="xref" href="ch04s03.xhtml#combining_characters" title="Combining characters">Combining characters</a>.</p></td></tr></table></div><p>Further reading:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Various <a class="link" href="http://www.google.com/search?q=tutorial+regular+expressions" target="_top">tutorials on Regular Expressions</a></p></li><li class="listitem"><p>Wikipedia, <a class="link" href="http://en.wikipedia.org/wiki/Regular_expression" target="_top">Regular
                              Expressions</a></p></li><li class="listitem"><p><a class="link" href="http://www.w3.org/TR/xslt-30/#regular-expressions" target="_top">Regular Expressions in XSLT 3.0</a></p></li><li class="listitem"><p><a class="link" href="http://www.unicode.org/reports/tr18/" target="_top">Unicode and
                              Regular Expressions</a></p><p>http://www.w3.org/TR/xmlschema-2/#regexs</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="xpath"/>XPath</h3></div></div></div><p><span class="bold"><strong>&lt;NOT YET WRITTEN&gt;</strong></span></p><p>&lt;Stuff about XPath.&gt;</p><p>&lt;Examples.&gt;</p><p>&lt;Commonly used XPath expressions in TAN.&gt;</p><p>&lt;Further reading.&gt;</p><p>
                  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="img/note.png"/></td><th align="left">Note</th></tr><tr><td align="left" valign="top"><p>TAN adopts as its standard XPath 3.0.</p></td></tr></table></div><p>
               </p></div></div><div class="navfooter"><hr/><table width="100%" summary="Navigation footer"><tr><td width="40%" align="left"><a accesskey="p" href="ch04s02.xhtml">Prev</a> </td><td width="20%" align="center"><a accesskey="u" href="ch04.xhtml">Up</a></td><td width="40%" align="right"> <a accesskey="n" href="ch05.xhtml">Next</a></td></tr><tr><td width="40%" align="left" valign="top">Assumptions in the Creation of TAN Data </td><td width="20%" align="center"><a accesskey="h" href="index.xhtml">Home</a></td><td width="40%" align="right" valign="top"> Chapter 5. Patterns and Structures Common to All TAN Encoding Formats</td></tr></table></div></body></html>