<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
   <info>
      <title>The Text Alignment Network: Official Guidelines</title>
      <legalnotice>
         <info>
            <title>Text Alignment Network: Official Guidelines</title>
            <copyright>
               <year>2015-present</year>
               <holder>Joel Kalvesmaki</holder>
            </copyright>
            <author>
               <personname>Joel Kalvesmaki</personname>
               <email>kalvesmaki@gmail.com</email>
            </author>
         </info>
         <remark> This work is licensed under a Creative Commons Attribution 4.0 International
            License: http://creativecommons.org/licenses/by/4.0/ </remark>
      </legalnotice>
      <revhistory>
         <info>
            <releaseinfo>This version home directory:
               http://textalign.net/release/1/dev/guidelines/.</releaseinfo>
            <releaseinfo>Latest version:
               http://textalign.net/release/1/dev/guidelines/.</releaseinfo>
         </info>
         <revision>
            <revnumber>1/dev</revnumber>
            <date>2016-02-24</date>
            <revdescription>
               <para>Prepublication working draft, under construction and for circulation among
                  those interested in helping to develop TAN. Corrections are actively solicited and
                  should be sent to the author (see above).</para>
               <para>Formats: <link xlink:href="index.html">HTML</link> • <link
                     xlink:href="main.pdf">PDF</link> • <link xlink:href="main.xml">Docbook</link>
                  (master)</para>
               <warning>
                  <para>This version is known to have significant omissions. In case of
                     contradictions, apparent or not, between the schemas and these guidelines, the
                     greatest weight is to be given to the RELAX-NG schemas (compact syntax), then
                     to these guidelines, and then to the Schematron schemas.</para>
                  <para>Chapters 1, 4-8 are relatively accurate. Chapter 2 was drafted in mid-2015,
                     before major changes to the schemas. Chapter 3 remains unwritten until the
                     format reaches some maturity. Chapter 9 is intended to cover areas that explore
                     advance use of the format.</para>
                  <para>TAN is meant to encourage collaboration and distributed scholarship. If you
                     are part of a project that would like to use and help develop the TAN format,
                     please contact the author (see above).</para>
                  <para>A number of examples still need to be written, collected under <link
                        xlink:href="../examples/snippets-to-convert.xml"/>.</para>
                  <para>Documentation on individual elements and attributes is generated by an XSLT
                     stylesheet, <link xlink:href="generate%20TAN%20guidelines%20inclusions.xsl"/>,
                     which traverses the schemas (RELAX-NG full syntax and Schematron) and examples
                     and extracts informat that populates the inclusions in this set of guidelines.
                     Any errors in the documentation should be fixed first at the schema level, then
                     at main.xml. No edits should ever be made directly to the Docbook formats found
                     in the inclusions subdirectory.</para>
               </warning>
            </revdescription>
         </revision>
      </revhistory>
   </info>
   <part xml:id="general_overview">
      <title>General Overview</title>
      <chapter>
         <title>Introduction</title>
         <section>
            <title>Definition and audience </title>
            <para>The Text Alignment Network (TAN) is a suite of XML encoding formats and associated
               rules and recommended practices, intended to serve anyone who wishes to encode,
               exchange, and study translations, paraphrases, adaptations, quotations, and other
               varieties of text reuse. TAN is meant primarily to support research in philology,
               linguistics, translation studies, and any scholarly field concerned with the
               interpretation of textual reuse or versions of texts.</para>
            <para>The format is designed to handle any text written in a Unicode-supported writing
               system, and from any period, from antiquity to the recent past. TAN files have been
               designed to be maximally readable and editable by both humans and machines, and to be
               both syntactically and semantically interoperable. The TAN format is suitable not
               only as export/import format for tools but, in many cases, for native use. </para>
            <para>Built upon stand-off annotation, the TAN format allows scholars to edit and study
               the same texts independently and collaboratively. The schemas not only ensure that
               rules are followed but but also provide feedback and editing help. Because the format
               relies heavily upon extensive validation rules, it comes with a library of functions
               that definitively interpret the format and pre-process files, thereby saving time for
               developers who wish to create TAN-based tools and applications.</para>
            <para>Although expressive of scholarly nuance and complexity, TAN files are meant to
               benefit everyone, to be used in broad applications such as multilingual publishing,
               language learning, and machine translation.</para>
         </section>
         <section>
            <title>Rationale and purpose</title>
            <para>Translations, quotations, paraphrases, and so forth—all forms of text reuse—are
               important sources for scholars. Some texts have been lost in their original form and
               can be studied only through later translations, paraphrases, or quotations. And even
               when an original survives, these later versions are often worth study, revealing as
               they do something of the genius or idiosyncrasies of those who translated or quoted
               the original, which in turn sheds light on how words, concepts, and works were
               preserved or altered, shaped or combined across the generations and cultures who read
               and circulated the versions.</para>
            <para>The comparative study of versions of texts requires, as a foundation, some way to
               align words, sentences, paragraphs, and other text segments. Such alignment can be
               challenging. Identifying which words or phrases in a translation correspond to which
               words or phrases in the original might result in complex, overlapping sets. And even
               larger segments such as sentences and paragraphs may not line up well. Further, every
               version of a text is part of a much larger, complex history of text reuse, and proper
               study of that context requires not only multiple versions of multiple works, but
               collaboration across projects and fields of study.</para>
            <para>The Text Alignment Network XML format facilitates the exchange and scholarly
               analysis of multiple versions of texts. TAN files adopt a syntax suitable for humans
               to read and edit, expressive enough to allow scholars to register doubt and nuance,
               and sufficiently structured to permit complex computer-based queries across
               independent datasets. The format is designed to allow a person to focus on a discrete
               set of tasks (editing, grammatical analysis, word alignment, etc.) without having to
               worry about any others. The format compels editors to declare their views or
               assumptions about language and texts in a structured manner, so that other users of
               the data (both human and computer) can determine whether the data is suitable for
               their needs. Because nearly all TAN data must be expressed in both human- and
               computer-readable forms, the information can be used in semantic web
               applications.</para>
            <para>TAN has been designed to support specific research questions such as the
               following:</para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>How do I encode a text I wish to share in such a way that it is likely to
                        align with other versions of that text?</para>
                  </listitem>
                  <listitem>
                     <para>How do I encode quotations of one work in another such that the data
                        might apply to multiple versions of either work?</para>
                  </listitem>
                  <listitem>
                     <para>How do I share texts, alignments, or other linguistic data such that
                        anyone using the data will be aware when I make corrections or changes to
                        the material?</para>
                  </listitem>
                  <listitem>
                     <para>How do I align multiple versions of a single work when those versions may
                        not match very well, or when the reason for alignment may be vague or
                        ambiguous?</para>
                  </listitem>
                  <listitem>
                     <para>How do I make detailed alignments between a source and its translation,
                        when there may be messy many-to-many relationships, and where I might need
                        to express doubt or alternative possibilities of alignment?</para>
                  </listitem>
                  <listitem>
                     <para>How do I create a detailed alignment between a source and its translation
                        such that, once completed, the dataset can be interrogated to find out how a
                        certain class of words (roots, part of speech, etc.) gets translated in the
                        target language, and with what frequency?</para>
                  </listitem>
                  <listitem>
                     <para>How do I note alignments of passages that share a common feature, such as
                        verbatim text or a parallel topic?</para>
                  </listitem>
                  <listitem>
                     <para>How do I answer the above questions such that my data can be
                        interoperably shared with others?</para>
                  </listitem>
               </itemizedlist>
            </para>
            <para>The last question is especially significant, because it is expected that as
               persons or projects share and publish their TAN-compliant texts, there will emerge a
               decentralized corpus of texts along with stylesheets, tools, and applications that
               use TAN texts. As this TAN-compliant corpus grows, its interoperability will allow
               the repertoire of research questions to expand beyond any single-project corpora, to
               allow scholars to fruitfully investigate broader, comparative questions such as:<itemizedlist>
                  <listitem>
                     <para>For classical Greek texts, how were words with the root -ιστημι ("stand")
                        translated into ancient Latin? In what specific ways did the vocabulary of
                        technical terms shift from pre-Christian translations into later, Christian
                        ones?</para>
                  </listitem>
                  <listitem>
                     <para>How do the reformed Chinese translation technique of Sanskrit Buddhist
                        texts, attested by Dao An (312-385 CE), compare to reforms in the seventh
                        and eighth centuries of Syriac translations of Greek texts?</para>
                  </listitem>
                  <listitem>
                     <para>How do Arabic translations of Greek texts from the Abbasid period differ
                        from those of Sanskrit?</para>
                  </listitem>
                  <listitem>
                     <para>Can an anonymous English translation of a modern French novel be
                        identified with known translators of French novels from the same
                        period?</para>
                  </listitem>
                  <listitem>
                     <para>How do present-day translations of official United Nations documents
                        differ across languages?</para>
                  </listitem>
               </itemizedlist></para>
            <para>These ambitions behind these questions should be tempered:<itemizedlist>
                  <listitem>
                     <para>TAN is not a tool. It is a format. Just as other file formats, such as
                        JPEG, CSV, RTF, and so forth, TAN does not dictate what tools or
                        applications should be used to create, edit, or display TAN-compliant
                        files.</para>
                  </listitem>
                  <listitem>
                     <para>TAN does not create alignments or, on its own, answer research questions.
                        It merely lays the foundation for such questions to be investigated. It is
                        up to others to develop applications, stylesheets, and other tools that can
                        apply algorithms to the format.</para>
                  </listitem>
                  <listitem>
                     <para>TAN is not meant to support linguistic data beyond its scope (as defined
                        and explained in these guidelines). That is, TAN is a supplement, not a
                        replacement, for other markup formats such as TEI, docbook, and so forth, or
                        other alignment formats such as XLIFF or TMX. In fact, TAN has been designed
                        such that its data is convertible to these other formats.</para>
                  </listitem>
                  <listitem>
                     <para>TAN is not meant to be maximally efficient. XML by its very nature
                        sacrifices terseness—a cardinal virtue for computational efficiency—in favor
                        of human readability. TAN builds upon this verbose character with validation
                        routines that can be taxing to run on enormous, complex files. Schemas have
                        been written to help ensure that the material meets the minimum expected by
                        scholars who may wish to use the materials. That is a task that has
                        traditionally been willing to sacrifice time in order to ensure
                        quality.</para>
                  </listitem>
               </itemizedlist></para>
         </section>
         <section xml:id="design_principles">
            <title>Design Principles</title>
            <para>To facilitate the research questions mentioned above, the TAN encoding formats and
               this manual have been designed around a few core principles.</para>
            <para><emphasis><emphasis role="bold">Scholarly freedom: </emphasis>Scholars should be
                  able to create data within their sphere of inquiry simply, expressively,
                  independently, and with fidelity to their guiding lights.</emphasis></para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>Given two ways of expressing the same idea, simplicity is better than
                        complexity, expressiveness than silence. Simplicity and expressiveness
                        should be treated as complementary ideals. In cases where one must be chosen
                        over the other, simplicity is to be preferred. </para>
                  </listitem>
                  <listitem>
                     <para>Editors should not have to supply data that is redundant, irrelevant to
                        the immediate points of inquiry, or more reliably and authoritatively found
                        elsewhere.</para>
                  </listitem>
                  <listitem>
                     <para>Editors should be able to register doubt about claims. If in doubt about
                        an assertion, an editor should be able to state alternatives.</para>
                  </listitem>
                  <listitem>
                     <para>Editors should be able to work on the same material indepedently but
                        interoperably.</para>
                  </listitem>
                  <listitem>
                     <para>Editors should work freely within their theories, opinions, and
                        assumptions about language. They should declare those positions, not
                        suppress or alter them. </para>
                  </listitem>
               </itemizedlist>
            </para>
            <para><emphasis><emphasis role="bold">Scholarly responsibility: </emphasis>Scholars must
                  make their data uniquely citable, and responsibly describe how that data was
                  created.</emphasis></para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>Each TAN file should have an expressive, unique, persistent name that can
                        be cited and used independent of the file's location or availability.</para>
                  </listitem>
                  <listitem>
                     <para>Editors must supply, at the very minimum, the core statements of
                        responsibility that are generally expected in scholarly work, i.e.:</para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>What was done by whom, when.</para>
                           </listitem>
                           <listitem>
                              <para>What sources have been used.</para>
                           </listitem>
                           <listitem>
                              <para>Who holds rights over the data, and what reuse is
                                 permitted.</para>
                           </listitem>
                           <listitem>
                              <para>What editorial assumptions and decisions were made in creating
                                 the data.</para>
                           </listitem>
                        </itemizedlist>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
            <para><emphasis><emphasis role="bold">Utility to both computers and humans:
                  </emphasis>Computers should be able to import, process, and create human-friendly
                  data reliably, consistently, and interoperably.</emphasis>
            </para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>Each human-readable datum should have a computer-readable counterpart, to
                        make the material suitable for linked data (semantic web).</para>
                  </listitem>
                  <listitem>
                     <para>Given multiple methods of referring to textual units or linguistic
                        concepts, the most human readable method is to be preferred.</para>
                  </listitem>
                  <listitem>
                     <para>All classes and types of formats in the TAN suite should be structured
                        consistently and predictably.</para>
                  </listitem>
                  <listitem>
                     <para>Validation and recommended best practices should depend upon stable
                        technologies or standards.</para>
                  </listitem>
                  <listitem>
                     <para>Each TAN file, or collection of files, should be integrally complete,
                        fully useful independent of any third-party software such as text processors
                        or version control software. </para>
                  </listitem>
               </itemizedlist>
            </para>
         </section>
      </chapter>
      <chapter xml:id="gentle_guide">
         <title>Starting off with the TAN Format</title>
         <para>If you are new to markup languages, or if you are unfamiliar with technical terms and
            acronyms such as <emphasis role="italic">XML</emphasis>, <emphasis role="italic"
               >RDF</emphasis>, <emphasis role="italic">XPath</emphasis>, and so forth, you should
            start with this chapter, which uses a simple example to walk through the steps typically
            taken to create and edit TAN files. By the end of this chapter, you be sufficiently
            oriented to create and edit a simple collection of TAN transcriptions and
            alignments.</para>
         <para>The discussion touches on a number of more general concepts, some of which may be
            new. These concepts will be only briefly introduced, accompanied by suggestions for
            further reading.</para>
         <section>
            <title>Creating TAN Transcription and Alignment Data</title>
            <para>Let us take a simple example, that of aligning two English versions of the nursery
               rhyme <emphasis role="italic">Ring-a-ring-a-roses</emphasis>, sometimes known as
                  <emphasis role="italic">Ring around the Rosie</emphasis>. Our goal here is to
               publish two versions of the nursery rhyme in the TAN format so that they are most
               likely alignable with any other TAN version of the poem that might be
               published.</para>
            <para>We begin by finding the versions we want. In this case we use exemplars published
               in <link xlink:href="http://lccn.loc.gov/12032709">1881</link> and <link
                  xlink:href="http://lccn.loc.gov/87042504">1987</link>, the former from the UK the
               latter from the US. Each of these books have other rhymes, but we've already decided
               to focus upon one particular nursery rhyme, so we transcribe them and nothing
                  else:<table frame="all">
                  <title>Ring around the Rosie</title>
                  <tgroup cols="2">
                     <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                     <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                     <thead>
                        <row>
                           <entry>1881 (UK) version</entry>
                           <entry>1987 (US) version</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry>
                              <para>Ring-a-ring-a-roses,</para>
                              <para>A pocket full of posies;</para>
                              <para>Hush! Hush! Hush! Hush!</para>
                              <para>We're all tumbled down.</para>
                           </entry>
                           <entry>
                              <para>Ring-a-round the rosie,</para>
                              <para>A pocket full of posies,</para>
                              <para>Ashes! Ashes!</para>
                              <para>We all fall down.</para>
                           </entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table></para>
            <para>We must be sure to save each of the two transcriptions as plain Unicode text,
               preferably with <code>.xml</code> at the end of each file name. If you use a word
               processor (Word, OpenOffice, Google Docs, and so forth) you must be certain to save
               the file as plain text, in Unicode encoding (not Western European or other
               encodings). But even then you have to beware, because these programs can be too
               sophisticated for our work and sometimes generate erroneous formats. Word processors
               are in fact a bit too powerful for our purposes. We will be working with raw text,
               and will not be altering colors, fonts, margins, and so forth. Much better for our
               work is a <link xlink:href="http://en.wikipedia.org/wiki/Text_editor">text
                  editor</link>. And even better still would be an <link
                  xlink:href="http://en.wikipedia.org/wiki/XML_editor">XML editor</link>, which does
               the same thing a text editor does, but does other things too, such as tell us when
               our XML file is invalid, or provide shortcuts that save much typing.<note>
                  <para>Software suitable for your needs comes in many styles and prices. In
                     addition to the links provided above, you may wish to visit the comparative
                     lists for both <link
                        xlink:href="http://en.wikipedia.org/wiki/Comparison_of_text_editors">text
                        editors</link> and <link
                        xlink:href="http://en.wikipedia.org/wiki/Comparison_of_XML_editors">XML
                        editors</link>. Some XML editors are so powerful they can be very confusing
                     to use at first. Be certain to take advantage of tutorials and documentation
                     associated with any XML editor you begin to use.</para>
               </note></para>
            <para>Our first task is to get these two versions into separate files with the
               appropriate markup. Each TAN transcription file has two major parts: a head and a
               body. For now, we focus on only the second part, the body, as well as a few the
               necessary preliminary lines that stand above both the head and the body. First, the
               1881 (UK) version:
               <programlisting><emphasis role="bold">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-T.rnc" type="application/relax-ng-compact-syntax"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-T.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
&lt;TAN-T xmlns="tag:textalign.net,2015:ns" id="tag:parkj@textalign.net,2015:ring01">
    &lt;head>
    . . . . . . .
    &lt;/head>
    &lt;body xml:lang="eng" in-progress="false">
        &lt;div type="line" n="1"></emphasis>Ring-a-ring-a-roses,<emphasis role="bold">&lt;/div>
        &lt;div type="line" n="2"></emphasis>A pocket full of posies;<emphasis role="bold">&lt;/div>
        &lt;div type="line" n="3"></emphasis>Hush! Hush! Hush! Hush!<emphasis role="bold">&lt;/div>
        &lt;div type="line" n="4"></emphasis>We're all tumbled down.<emphasis role="bold">&lt;/div>
    &lt;/body>
&lt;/TAN-T></emphasis></programlisting>
               And now the 1987 (US) version:
               <programlisting><emphasis role="bold">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-T.rnc" type="application/relax-ng-compact-syntax"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-T.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
&lt;TAN-T xmlns="tag:textalign.net,2015:ns" id="tag:parkj@textalign.net,2015:ring02">
   &lt;head>
   . . . . . . .
   &lt;/head>
   &lt;body xml:lang="eng" in-progress="false">
      &lt;div type="l" n="1"></emphasis>Ring-a-round the rosie,<emphasis role="bold">&lt;/div>
      &lt;div type="l" n="2"></emphasis>A pocket full of posies,<emphasis role="bold">&lt;/div>
      &lt;div type="l" n="3"></emphasis>Ashes! Ashes!<emphasis role="bold">&lt;/div>
      &lt;div type="l" n="4"></emphasis>We all fall down.<emphasis role="bold">&lt;/div>
   &lt;/body>
&lt;/TAN-T></emphasis></programlisting>
            </para>
            <para>These are standard eXtensible Markup Language (XML) files. (If you are already
               familiar with this format you may wish to skip ahead.) XML is rather simple. It
               provides a way to take a text or a collection of data and give it some structure
               through markup. In the examples above, the markup is in boldface.</para>
            <para>Each file begins with a prolog, marked by the lines that begin with
                  <code>&lt;?</code>. The first line in each prolog simply states that what follows
               is an XML document. The next two lines point to the files that will be used to check
               to see whether or not our data is valid. For now we will skip the specific details.
               These three lines will be identical, or nearly so, from one TAN transcription file to
               the next, and we can simply cut and paste when we want to start a new one.</para>
            <para>The fourth line is the opening tag of what is called the root element, here called
                     <code><link linkend="element-TAN-T">&lt;TAN-T></link></code>. That opening tag,
                  <code>&lt;TAN-T...></code> is answered by a closing tag, <code>&lt;/TAN-T></code>,
               the last line. The same thing happens with all the other elements in this example.
                     <code><link linkend="element-head">&lt;head></link></code> is answered by
                  <code>&lt;/head></code>, <code><link linkend="element-body"
                  >&lt;body></link></code> by <code>&lt;/body></code> and each
                  <code>&lt;div...></code> by <code>&lt;/div></code>. These elements nest within or
               alongside each other, but they never overlap. (The prohibition on overlapping
               elements is one of the cardinal rules of XML.) This relationship means that every XML
               file can be thought of as a tree, with the root at the trunk and the enveloped
               elements as branches, terminating in metaphorical leaves. It is helpful to use the
               tree metaphor when we describe the path we take, either toward the leaves or the
               root. In this manual, we may use the terms <emphasis role="italic"
                  >rootward</emphasis>, <emphasis role="italic">rootmost</emphasis>, <emphasis
                  role="italic">leafward</emphasis>, and <emphasis role="italic">leafmost</emphasis>
               when we want to trace movement within an XML document.</para>
            <para>An XML document is also profitably thought of as a family tree, a metaphor that
               provides terminology that will be very common. In our examples above, <code><link
                     linkend="element-TAN-T">&lt;TAN-T></link></code> is the <emphasis role="italic"
                  >parent</emphasis> of <code><link linkend="element-body">&lt;body></link></code>,
               and <code><link linkend="element-body">&lt;body></link></code> the parent of the four
                     <code><link linkend="element-div">&lt;div></link></code> elements. Vice versa,
               each <code><link linkend="element-div">&lt;div></link></code> is the <emphasis
                  role="italic">child</emphasis> of <code><link linkend="element-body"
                     >&lt;body></link></code>, and <code><link linkend="element-body"
                     >&lt;body></link></code> is the child of <code><link linkend="element-TAN-T"
                     >&lt;TAN-T></link></code>. Distant parental relationships can be described with
               the terms <emphasis role="italic">ancestor</emphasis> and <emphasis role="italic"
                  >descendant</emphasis>. <code><link linkend="element-TAN-T"
                  >&lt;TAN-T></link></code> is the ancestor of every element it encompasses, and
               every element encompassed by <code><link linkend="element-TAN-T"
                  >&lt;TAN-T></link></code> is its descendant. Paratactic relationships are also
               important. <code><link linkend="element-head">&lt;head></link></code> and <code><link
                     linkend="element-body">&lt;body></link></code> are <emphasis role="italic"
                  >siblings</emphasis> to each other, and every <code><link linkend="element-div"
                     >&lt;div></link></code> is a sibling to every other <code><link
                     linkend="element-div">&lt;div></link></code>.</para>
            <para>Inside of the opening tags for the <code><link linkend="element-TAN-T"
                     >&lt;TAN-T></link></code>, <code><link linkend="element-body"
                  >&lt;body></link></code>, and <code><link linkend="element-div"
                  >&lt;div></link></code> elements are pairs of text joined by an equals sign. The
               left side of each pair is called an attribute, and on the right side, within the
               quotation marks, is the value. <code><link linkend="element-TAN-T"
                  >&lt;TAN-T></link></code> has two attributes, <code>@xmlns</code> and <code><link
                     linkend="attribute-id">@id</link></code> (attributes are commonly referred to
               with @ before the name). We will skip <code>@xmlns</code> for now; this attribute
               (actually, a pseudo-attribute) specifies the namespace of the XML file, a somewhat
               advanced topic. </para>
            <para>The value of <code><link linkend="attribute-id">@id</link></code>, however, is
               quite important and our first item of business. Every TAN file has an <code><link
                     linkend="attribute-id">@id</link></code> that uniquely and permanently
               identifies the file itself. It is quite similar to the name we give a file when we
               save it, and to the names we see when we browse through our files, except that it
               should not be changed. When we make corrections to our work, we will not change the
                     <code><link linkend="attribute-id">@id</link></code> value. We simply note a
               change (to be discussed later) with the date of the change.</para>
            <para>The value of <code><link linkend="attribute-id">@id</link></code> is always what
               is called a tag uniform resource name (tag URN). It always starts with
                  <code>tag:</code>, followed by an email address or domain name that we owned on a
               given day. (It is okay to use an obsolete address.) After that email address or
               domain name comes a comma (no spaces) and a date on which we owned it, in the
               international standard format of year, month, and date, joined by hyphens, e.g.,
               2014-12-31. If we leave off a day value, it is assumed to be the first of the month;
               if we leave off the month value it is assumed to be January. In the examples above,
                  <code>[USER@DOMAIN.NET],2014</code> indicates that the email address was owned on
               the stroke of midnight (Coordinated Universal Time) January 1, 2014. After that comes
               a colon, and then any name we wish to assign to the file. <note>
                  <para>Many if not most TAN files will be circulated under a liberal license,
                     encouraging people to modify and use the data freely, with attribution. If you
                     decide to modify someone else's TAN file, and you become responsible for
                     changes, not the original person or organization. Your first point of order
                     should be to change the email address or domain name at the heart of the tag
                     URN, substituting one that you own or owned. The element <code><link
                           linkend="element-see-also">&lt;see-also></link></code> should be used to
                     credit the original. If you do not make this change, you are incorrectly
                     passing the work off as someone else's.</para>
               </note></para>
            <para>We have anticipated a simple collection of texts, so we've called the files
                  <code>ring01</code> and <code>ring02</code>. (If we run out of names, or want to
               restart, we can simply use a new email-date preface, e.g.,
                  <code>[USER@DOMAIN.NET],2014-01-02</code>.)</para>
            <para>The element <code><link linkend="element-body">&lt;body></link></code> contains
               our transcription. <code><link linkend="attribute-xmllang">@xml:lang</link></code>,
               required, specifies the principal language of the transcribed text. We use the
               standard 3-letter abbreviation for English. (See later in the guide for more complex
               language requirements.) By saying that <code><link linkend="attribute-in-progress"
                     >@in-progress</link></code> is <code>false</code>, we indicate that we have
               finished our transcription and have no further plans to develop it. It doesn't mean
               that the file is error free. We will have the option to make corrections later. It
               just means that we have done all the work that we intended, and any further changes
               will be restricted to corrections of errors. This attribute is optional; if left off,
               the TAN file is assumed to be a work in progress.</para>
            <para>Our transcription has been divided into four <code><link linkend="element-div"
                     >&lt;div></link></code> elements. How we divide up the work is entirely up to
               us. But we must make sure that every bit of text is enclode by a leafmost <code><link
                     linkend="element-div">&lt;div></link></code>. That is, every <code><link
                     linkend="element-div">&lt;div></link></code> must be the parent of only other
                     <code><link linkend="element-div">&lt;div></link></code>s, or none at all. We
               cannot have a <code><link linkend="element-div">&lt;div></link></code> that mixes any
               text or other elements with other <code><link linkend="element-div"
                  >&lt;div></link></code>s. The values of <code><link linkend="attribute-type"
                     >@type</link></code> and <code><link linkend="attribute-n">@n</link></code>
               indicate, respectively, the type of division and the name of the division. We have
               used <code>line</code> in the first example, but we could easily have also used
                  <code>l</code> (as we did in the second) or <code>ln</code> or any other phrase
               that we think will make intuitive sense to other users (we will see why below). We
               have used arabic numerals for the values of <code><link linkend="attribute-n"
                     >@n</link></code>, but the value, once again, could have been anything. But
               since other people may use our work, we have adopted the naming scheme that seems
               most common and expected.</para>
            <para>Aside from the <code><link linkend="element-head">&lt;head></link></code> element
               (discussed later), that's all we need in the transcription. We can now move to
               alignment.</para>
            <para>There are two different types of alignment, one emphasizing breadth, the other,
               depth. The broad type of alignment, called TAN-A-div, allows us to specify TAN
               transcriptions of as many versions of as many works as we wish, and to fine-tune the
               alignment upon the basis of the <code><link linkend="element-div"
                  >&lt;div></link></code> elements within the transcription. We do not specify why
               we wish to align the versions. We only declare our interest in doing so. The type of
               alignment emphasizing depth, called TAN-A-tok, allows us to take any two (and no
               more) TAN transcriptions and specify word-to-word (or better put, token-to-token)
               relationships, and specify what type of relationship holds between them. TAN-A-div is
               suitable for work that focuses on the general alignment of multiple versions of one
               or more works at a single time. TAN-A-tok is for highly detailed, precise alignment
               of two text versions.</para>
            <para>For our example, we start with a TAN-A-div file (once again suppressing
                     <code><link linkend="element-head"
               >&lt;head></link></code>):<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-A-div.rnc" type="application/relax-ng-compact-syntax"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-A-div.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
&lt;TAN-A-div xmlns="tag:textalign.net,2015:ns" id="tag:parkj@textalign.net,2015:ring-alignment">
    &lt;head>
    . . . . . . .
    &lt;/head>
    &lt;body/>
&lt;/TAN-A-div></programlisting></para>
            <para>In the prolog, the first line is identical to the first line of our transcription
               files. The second and third lines are identical, aside from pointing to the
               validation files for alignment. Even the fourth line looks like the transcription
               file, other than the new name for the root element, <code><link
                     linkend="element-TAN-A-div">&lt;TAN-A-div></link></code>, and the new value for
                     <code><link linkend="attribute-id">@id</link></code>.</para>
            <para>The penultimate line, <code>&lt;body/></code>, is what is called an empty element,
               and is equivalent to <code><link linkend="element-body"
                  >&lt;body></link>&lt;/body></code>. Collapsing the opening and the closing tags of
               the element into a single tag provides a shorthand syntax for elements contains
               nothing. It will become apparent, when we discuss <code><link linkend="element-head"
                     >&lt;head></link></code> below, why our <code><link linkend="element-body"
                     >&lt;body></link></code> can be empty.</para>
            <para>The other kind of alignment, TAN-A-tok, takes a bit more work, because we must
               first identify words that correspond with each other. Even before we do that, we need
               to decide what kind of relationship holds between the two texts. Let us pretend, for
               the sake of illustration, that the 1987 version is a direct descendant (and therefore
               variation) of the 1881 version. We therefore see our task as creating a map of how
               the older version became the newer one. There are different ways of approaching this
               task and deciding on the specifics is not as straightforward as some might think. We
               will also assume for this example that punctuation is both irrelevant and a marker
               between words, better termed in this context as <emphasis>tokens</emphasis>
                  (<emphasis role="italic">word</emphasis> is notoriously difficult to define, and
               the substitute <emphasis>token</emphasis> lacks many undesirable
               implications).</para>
            <para>We now create a TAN-A-tok
               file:<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-A-tok.rnc" type="application/relax-ng-compact-syntax"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-A-tok.sch" type="application/xml" schematypensrc="http://purl.oclc.org/dsdl/schematron"?>
&lt;TAN-A-tok xmlns="tag:textalign.net,2015:ns" id="tag:parkj@textalign.net,2015:TAN-A-tok,ring01+ring02">
    &lt;head>
    . . . . . . .
    &lt;/head>
    &lt;body bitext-relation="B-descends-from-A" reuse-type="adaptation" in-progress="false">
        &lt;!-- Examples of picking tokens by number -->
        &lt;align>
            &lt;tok src="ring1881" ref="line 1" ord="1"/>
            &lt;tok src="ring1987" ref="l 1" ord="1"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 1" ord="2"/>
            &lt;tok src="ring1987" ref="l 1" ord="2"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 1" ord="3"/>
            &lt;tok src="ring1987" ref="l 1" ord="3"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 1" ord="4"/>
            &lt;tok src="ring1987" ref="l 1" ord="4"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 1" ord="5"/>
            &lt;tok src="ring1987" ref="l 1" ord="5"/>
        &lt;/align>
        &lt;!-- Examples of picking tokens by value -->
        &lt;align>
            &lt;tok src="ring1881" ref="line 2" val="A"/>
            &lt;tok src="ring1987" ref="l 2" val="A"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 2" val="pocket"/>
            &lt;tok src="ring1987" ref="l 2" val="pocket"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 2" val="full"/>
            &lt;tok src="ring1987" ref="l 2" val="full"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 2" val="of"/>
            &lt;tok src="ring1987" ref="l 2" val="of"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 2" val="posies"/>
            &lt;tok src="ring1987" ref="l 2" val="posies"/>
        &lt;/align>
        &lt;!-- Examples of picking tokens by number with commas, hyphens, and 'last' -->
        &lt;align>
            &lt;tok src="ring1881" ref="line 3" ord="1, 2"/>
            &lt;tok src="ring1987" ref="l 3" ord="1"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 3" ord="3 - 4"/>
            &lt;tok src="ring1987" ref="l 3" ord="2"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 4" ord="1"/>
            &lt;tok src="ring1987" ref="l 4" ord="1"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 4" ord="2"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 4" ord="3"/>
            &lt;tok src="ring1987" ref="l 4" ord="2"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 4" ord="last-1"/>
            &lt;tok src="ring1987" ref="l 4" ord="last-1"/>
        &lt;/align>
        &lt;align>
            &lt;tok src="ring1881" ref="line 4" ord="last"/>
            &lt;tok src="ring1987" ref="l 4" ord="last"/>
        &lt;/align>
    &lt;/body>
&lt;/TAN-A-tok></programlisting></para>
            <para>Once again, the first four lines, the prolog and root element, should look
               familiar, with the only significant changes being the names of the validation files,
               the name of the root element (<code><link linkend="element-TAN-A-tok"
                     >&lt;TAN-A-tok></link></code>) and the value of <code><link
                     linkend="attribute-id">@id</link></code>.</para>
            <para>The heart of the data is <code><link linkend="element-body"
                  >&lt;body></link></code>, which has, in addition to <code><link
                     linkend="attribute-in-progress">@in-progress</link></code>, two more
               attributes, <code><link linkend="attribute-reuse-type">@reuse-type</link></code>,
               which specifies the default type of relationship between the two sources, and
                     <code><link linkend="attribute-bitext-relation">@bitext-relation</link></code>,
               which specifies how the versions relate to each other. Our two values,
                  <code>B-descends-from-A</code> and <code>adaptation</code>, are arbitrary names
               that we define in the <code><link linkend="element-head">&lt;head></link></code>
               (discussed later). </para>
            <para><code><link linkend="element-body">&lt;body></link></code> is the parent of one or
               more <code><link linkend="element-align">&lt;align></link></code> elements, each of
               which correlates a set of tokens in the two texts through its <code><link
                     linkend="element-tok">&lt;tok></link></code> children. Each <code><link
                     linkend="element-tok">&lt;tok></link></code> has, in this example, three
               attributes. <code><link linkend="attribute-src">@src</link></code> takes a nickname
               (an <code><link linkend="attribute-id">@id</link></code> reference) that points to
               one of the two transcriptions; we have used <code>ring1881</code> and
                  <code>ring1987</code> but we could have just as easily used anything else such as
                  <code>uk</code> and <code>us</code>. <code><link linkend="attribute-ref"
                     >@ref</link></code> has a value that points to a specific <code><link
                     linkend="element-div">&lt;div></link></code> in the source transcription; and
                     <code><link linkend="attribute-pos">@pos</link></code> or <code><link
                     linkend="attribute-val">@val</link></code> specify which token is intended,
               either by word number (<code><link linkend="attribute-pos">@pos</link></code>) or
               text of the actual word (<code><link linkend="attribute-val">@val</link></code>).
               Either technique is fine, and can be mixed, as in the example. You may also notice
               that the comma and hyphen can be used in <code><link linkend="attribute-pos"
                     >@pos</link></code> to point to multiple words within the same <code><link
                     linkend="element-div">&lt;div></link></code>, and that <code>last</code> and
                  <code>last-X</code> (where <code>X</code> is a digit) can be used to point to a
               word token relative to the last one in a <code><link linkend="element-div"
                     >&lt;div></link></code>.</para>
            <para>Each <code><link linkend="element-align">&lt;align></link></code> can establish
               one-to-one, one-to-many, many-to-one, or many-to-many relationships between the two
               texts. It is perfectly fine to have the same word represented in multiple <code><link
                     linkend="element-align">&lt;align></link></code> elements. And if an
                     <code><link linkend="element-align">&lt;align></link></code> has <code><link
                     linkend="element-tok">&lt;tok></link></code> elements belonging to only one
               source, such as in the fourth-to-last <code><link linkend="element-align"
                     >&lt;align></link></code> above, we have what is called, in these guidelines, a
                  <emphasis>half-null alignment</emphasis>. That is to say, using our example, that
               we have stated that the second word of line four of the 1881 version is excluded from
               the act that we have called <code>adaptation</code> (which is, as we shall see,
               defined in the <code><link linkend="element-head">&lt;head></link></code>). If this
               were a translation, it would be as if we were saying that this word was excluded from
               the translation. (If this was a half-null alignment for the later source, we would
               say that it was a word that the translator added.) A half-null alignment is not to be
               confused with our own silence. If we nowhere mention a token in our TAN-A-tok file,
               and if we specify through <code><link linkend="attribute-in-progress"
                     >@in-progress</link></code> that our work is finished, then we are saying only
               that we have nothing to say about it.</para>
            <para>We could have aligned the two texts in different ways. Perhaps further study will
               reveal that we were in error to associate the second "ring" with "round" is line 1.
               We can make corrections, even after publication, and signal the change to users of
               our data. There are also ways to express doubt or alterative opinions. We can even
               correlate fragments of tokens (letters, prefixes, infixes, or suffixes). All these
               more advanced uses are discussed in later chapters of these guidelines.</para>
            <para>For now, we have finished everything for two TAN transcriptions and two alignment
               files, except for the <code><link linkend="element-head">&lt;head></link></code>.
               Before getting into details, we need first to discuss (1) the principles behind the
               TAN <code><link linkend="element-head">&lt;head></link></code> and (2) how to ensure
               that the data in <code><link linkend="element-head">&lt;head></link></code> is both
               human readable and computer readable.</para>
         </section>
         <section>
            <title>The Principles of TAN Metadata (<code><link linkend="element-head"
                     >&lt;head></link></code>)</title>
            <para>Unlike <code><link linkend="element-body">&lt;body></link></code>, which carries
               the raw data, <code><link linkend="element-head">&lt;head></link></code> contains
               what is oftentimes called metadata. That is, <code><link linkend="element-head"
                     >&lt;head></link></code> takes data that describes the data. Because the TAN
               format is intended primarily to serve scholars, some metadata requirements are
               stricter than those in other formats. Scholars who use our data really need to know
               some essential things before thoughtfully studying and handling the data we produce.
               For example, what are the sources we have used? Who produced the data? When? What key
               assumptions have been made in producing the data? What rights do other people have to
               use the data? The questions are not difficult to answer, but they are
               critical.</para>
            <para>Some of these questions are specific to certain types of data, and others can be
               applied universally, no matter what kind of data. We have seen that the TAN
               transcription <code><link linkend="element-body">&lt;body></link></code>s look quite
               different from those in the two alignment files. And there are other kinds of TAN
               files that cover other types of data, such as lexicomorphology and tokenization
               rules. And TAN may grow to cover other kinds of information. So <code><link
                     linkend="element-head">&lt;head></link></code> has been concisely and
               predictably structured so it can apply across all TAN formats. This reduces potential
               confusion and makes it easier for other people using our data to find the information
               they want.</para>
            <para>The rigorous scholarly requirements for TAN metadata are offset somewhat by
               another principle that was adopted in the design of TAN, namely, that each format's
                     <code><link linkend="element-head">&lt;head></link></code> should focus upon
               describing the data in <code><link linkend="element-body">&lt;body></link></code> and
               not other things. That is to say, for the two transcriptions in our example above, we
               should definitely indicate what our sources are. But we should not do what librarians
               do so much better and try to write a catalog entry describing the books we have used.
               Anyone who really wants that information should go elsewhere. We need merely point to
               those other places. The TAN format does not forbid us from providing this
               information. But the <code><link linkend="element-head">&lt;head></link></code> is
               designed so that we can stay focused on the task and data at hand.</para>
            <para>TAN was also designed with the assumption that all metadata should be useful to
               both humans and computers. For our example above, we must describe the work we have
               chosen in such a way that <emphasis role="italic">Ring around the Rosie</emphasis> is
               comprehensible not just to the reader but to the computer, using syntax that a
               computer can act upon.</para>
            <para>Take for example the 1881 book we have used for our first transcription. For the
               human reader we can say simply something like "Kate Greenaway, <emphasis>Mother
                  Goose</emphasis>, New York, G. Routledge and sons [1881]". But computers need a
               more controlled, predictable syntax before they can be directed to the correct
               edition of <emphasis>Mother Goose.</emphasis> The human-readable string is too
               complex, and syntactically opaque. Perhaps a better identifier for a computer would
               be international standard book numbers (ISBNs), which not only distinguish the 1984
               version illustrated by Kayoko Okumura Cussler's novel from the 1984 version
               illustrated by William Joyce but can be used to distinguish the various types of
               editions: hardback, paper, electronic, and so forth. The ISBNs for the Okumura
               version, 0671493159, and for Joyce's, 0394865340, can be converted into a
               machine-actionable string called universal resource names (URNs), in this case
                  <code>urn:isbn:0-671493159</code> and <code>urn:isbn:0-394865340</code>. (Our 1881
               version was published before the ISBN program was introduced, but we will see below
               other ways to name it.)</para>
            <para>URNs are formalized naming schemes that are regulated by a central body (Internet
               Assigned Numbers Authority, IANA) to ensure that people and organizations can
               legitimately coin and use permanent, persistent, unique names for various types of
               things. Ther are URN schemes for journals (by means of ISSNs), articles (DOIs), and
               movies (ISANs), thereby allowing one to refer to them with a unique string that a
               computer can process.</para>
            <para>All URNs are simply names. They don't tell you where an object is, just what its
               name is. To provide a unique <emphasis role="italic">location</emphasis>, however, we
               have universal resource locators (URLs), which might be much more familiar from daily
               use of the Internet, e.g., <code>http://academia.edu</code>. Like URNs, URLs are also
               centrally regulated, with individuals or organizations buying the rights to domain
               names from a central registry (usually through a third-party vendor).</para>
            <para>Both URNs and URLs can be thought of as the same type of thing, namely, a
               universal resource identifier (URI), sometimes called an international resource
               identifier (IRI) to make clear that any alphabet in Unicode, not just Latin, may be
               used. URIs/IRIs are, in essence, nothing more than the set of all URNs and URLs.
               These four acronyms can be easily confused, and it is best to disambiguate them by
               thinking of the last letter in each. URIs/IRIs <emphasis role="bold"
               >I</emphasis>ncorporate both <emphasis role="bold">L</emphasis>ocators and <emphasis
                  role="bold">N</emphasis>ames.</para>
            <para>IRIs are essential to a system frequently called the semantic web or linked (open)
               data, an agreed way of writing and processing data that relies upon IRIs and a simple
               data model to connect them. The semantic web allows independent parties to make
               assertions about things, and if they happen to use the same IRI vocabulary to
               describe those things, computers can make associations between disparate,
               heterogenous datasets. This allows computers to make connections that humans might
               not make on their own. For example, a computer could be used to plot the geographical
               distribution of specific books in different library systems, if it has access to
               published IRIs in different online library catalogs.</para>
            <para>TAN has been designed to be linked-data friendly, and so requires in its head
               almost all data to be representable not just in a human readable form but also as an
               IRI, so computers can act upon the data. (It is this requirement that makes possible
               another principle mentioned earlier, that we should provide metadata about our data
               and not about other things.)</para>
            <para>Our first task, then, in writing the <code><link linkend="element-head"
                     >&lt;head></link></code> sections of our four TAN files is to look for IRI
               vocabulary that will be familiar to the community of practice most likely to use our
               files. In trying to find suitable IRIs, we will find that the persons, things, and
               concepts we want to describe will be range from generally familiar to generally
               unfamiliar.</para>
            <para><emphasis role="italic">Generally familiar</emphasis>: The two books that provide
               the basis of our transcription are well catalogued and generally known. A number of
               services provided by librarians provide a controlled IRI vocabulary that can be used
               by anyone to describe uniquely a particular version of a book. <link
                  xlink:href="http://www.worldcat.org">WorldCat</link> (run by OCLC) and the <link
                  xlink:href="http://catalog.loc.gov">Library of Congress</link> are good examples.
               In our case, we have found accurate Library of Congress IRIs for both editions of
                  <emphasis>Mother Goose</emphasis>: <code>http://lccn.loc.gov/12032709</code> and
                  <code>http://lccn.loc.gov/87042504</code>. Observe that these two IRIs are, more
               specifically, URLs. If we paste these strings into our browser, we retrieve a record
               that describes the book. But this locator has not taken us to the book per se, only
               to information <emphasis role="italic">about</emphasis> the book. That is because,
               under the principles of linked data, a person or entity who owns a domain name can
               mint URLs based on that domain name <emphasis role="italic">also as names for
                  objects</emphasis>. This subtle point can sometimes be confusing to those who are
               new to the semantic web, because URLs conflate locations and names. Much of the
               motivation for this decision is convenience: by giving an object a name that is also
               a URL, you can then set up a server to tell a computer or a human more information
               about the object that is given that URL's name.</para>
            <para>Let's now find an IRI to name the work we have chosen, <emphasis role="italic"
                  >Ring around the Rosie</emphasis>. The work is widely known, and even has a <link
                  xlink:href="http://en.wikipedia.org/wiki/Ring_a_Ring_o%27_Roses">Wikipedia
                  entry</link>. That Wikipedia entry is fortuitous. The Universities of Leipzig and
               Mannheim and Openlink Software have collaborated on a project called <link
                  xlink:href="http://wiki.dbpedia.org/About">DBPedia</link>, which is committed to
               providing a unique URN for every Wikipedia entry in the major languages. The DBPedia
               URN for the work we have chosen is
                  <code>http://dbpedia.org/resource/Ring_a_Ring_o%27_Roses</code>. Once again, this
               is both a name and a locator. It names a specific intangible object, namely a nursery
               rhyme that we've called <emphasis>Ring around the Rosie</emphasis>, no matter what
               specific version. But if you put that name into your browser, you will get back more
               information about that named object.</para>
            <para><emphasis role="italic">Familiar, but only in small circles</emphasis>: We will
               need to have names for some of the people who edited the file. Most people who
               contribute to the creation of the data file will not be well-known, public figures.
               If they are, and if they are famous enough to have a Wikipedia entry, then a DBPedia
               IRI could be used. Or if some of the contributors are also published authors, there
               is a good chance that they are listed in the databases of either <link
                  xlink:href="http://viaf.org">VIAF</link> or <link xlink:href="http://isni.org"
                  >ISNI</link>, both of which publish unique IRIs for persons. If we find in those
               systems an IRI for someone who created or helped edit the file, we can use it.</para>
            <para>There is a good chance, however, that many contributors will not be listed in
               these general databases. In these cases, we can assign our own IRI to name these
               participants. We have already done something like this by assigning tag URNs to our
               four transcriptions (the value of <code><link linkend="attribute-id"
                  >@id</link></code> in the rootmost element). We can do the same for our editors.
               If a student Robin Smith has been helping with proofreading, we can take an email
               address for Robin (even one that doesn't work any more) and a date when the email was
               sed and construct a tag URN such as
                  <code>tag:smith.robin@example.com,2012:self</code>. This has a slight drawback in
               that we cannot type this string into our browser to find out more about the Robin,
               but it at least allows us to assign a name that will not be confused as the Robin
               Smith identified by ISNI as <code>http://isni.org/isni/0000000043306406</code>. If we
               wish to go a step further, we could mint a URN from a domain name that we own, and
               set up a linked data service that offers more information, human- and
               computer-readable, about Robin, but this is not required. </para>
            <para>Another example of field-specific IRIs is the concept of relationship between two
               text-bearing objects. We are assuming for the sake of illustration that the version
               published in the 1987 <emphasis>Mother Goose</emphasis> is a direct descendant of the
               1881 version. Our assumption is important to declare, because if we had a different
               view on how one related to the other, it would probably affect the specifics of our
               word-for-word alignments. Because no suitable IRI vocabulary yet exists for such
               concepts, TAN has coined an IRI that can be used by anyone wishing to declare that
               the second of two sources descends from the first through an unknown number of
               intermediaries: <code>tag:textalign.net,2015:bitext-relation:a/x+/b</code>.</para>
            <para>We face a similar issue when thinking about text reuse. We generally consider the
               1987 version to be an adaptation of the 1881 version. And there are not stable,
               well-published IRI vocabularies for text reuse. So we adopt a TAN-coined IRI,
                  <code>tag:textalign.net,2015:reuse-type:adaptation:general</code>.</para>
            <para>For other examples of IRIs coined by TAN, see <link xlink:href="iris.xml"
               />.</para>
            <para><emphasis role="italic">Generally unfamiliar</emphasis>: Some things or concepts
               will be unknown to very few people, perhaps only to us. If we plan to refer to that
               thing or concept often, it is preferable to coin a tag URN, as described above. But
               in some cases, we might find that a tag URN we minted for some concept or thing was,
               in hindsight, misleading or poorly constructed, because we hadn't taken into account
               other things that should be named. So if we wish to avoid these kinds of situations,
               we can assign a random IRI called a universally unique identifier (UUID), e.g.,
                  <code>urn:uuid:3fd9cece-b246-4556-b229-48f22a5ae2e0</code>. These uuid URNs, which
               are generated by computers through randomizing functions, are very useful. The
               likelihood that a randomly generated uuid will be identical to any other uuid is
               astronomically improbable, making them reliable, uniquely names for anything (barring
               someone copying and reusing that uuid URN to name some other object or concept).
               Numerous free UUID generators exist, and can be found through Intenet
               searches.</para>
            <para>To humans, a UUID on its own is meaningless, and rather ugly. But it is a good
               start. We always have the option, later, of adding an IRI. It's perfectly fine to
               give one object or concept multiple IRIs. But the reverse is never true. One should
               never use the same IRI to identify more than one object or concept.</para>
         </section>
         <section>
            <title>Creating TAN Metadata (<code><link linkend="element-head"
               >&lt;head></link></code>)</title>
            <para>Now that we have explored various IRI vocabularies for concepts around our
               versions of <emphasis>Ring-a-ring-a-roses</emphasis>, we can now complete the
               metadata in our four TAN files. Let us start with the TAN-T file of the 1881
               version:<programlisting>    &lt;head>
        &lt;name>TAN transcription of Ring a Ring o' Roses&lt;/name>
        &lt;master-location>ring-o-roses.eng.1881.xml&lt;/master-location>
        &lt;rights-excluding-sources rights-holder="park">
            &lt;IRI>http://creativecommons.org/licenses/by/4.0/deed.en_US&lt;/IRI>
            &lt;name>This data file is licensed under a Creative Commons Attribution 4.0 International
                License. The license is granted independent of any rights and licenses that may be 
                associated with the source. &lt;/name>
        &lt;/rights-excluding-sources>
        &lt;source>
            &lt;IRI>http://lccn.loc.gov/12032709&lt;/IRI>
            &lt;name>Kate Greenaway, Mother Goose, New York, G. Routledge and sons [1881]&lt;/name>
        &lt;/source>
        &lt;declarations>
            &lt;work>
                &lt;IRI>http://dbpedia.org/resource/Ring_a_Ring_o%27_Roses&lt;/IRI>
                &lt;name>"Ring a Ring o' Roses" or "Ring Around the Rosie"&lt;/name>
            &lt;/work>
            &lt;div-type xml:id="line">
                &lt;IRI>http://dbpedia.org/resource/Line_(poetry)&lt;/IRI>
                &lt;name>line of poetry&lt;/name>
            &lt;/div-type>
            &lt;recommended-tokenization which="general-1"/>
        &lt;/declarations>
        &lt;agent xml:id="park" roles="creator">
            &lt;IRI>tag:parkj@textalign.net,2015:self&lt;/IRI>
            &lt;name>Jenny Park&lt;/name>
        &lt;/agent>
        &lt;role xml:id="creator">
            &lt;IRI>http://schema.org/creator&lt;/IRI>
            &lt;name xml:lang="eng">creator&lt;/name>
        &lt;/role>
        &lt;change when="2014-08-13" who="park">Started file&lt;/change>
    &lt;/head></programlisting></para>
            <para>The <code><link linkend="element-head">&lt;head></link></code> element is the
               parent of eight children, all but one required in every TAN-T file.</para>
            <para><code><link linkend="element-name">&lt;name></link></code> is the human readable
               form of the <code><link linkend="attribute-id">@id</link></code> that is inside the
               root element, <code><link linkend="element-TAN-T">&lt;TAN-T></link></code>. It can be
               anything. And we can supply more than one <code><link linkend="element-name"
                     >&lt;name></link></code>, in case we wish to provide it in different languages
               or variations.</para>
            <para><code><link linkend="element-master-location">&lt;master-location></link></code>
               is mandatory only if we have claimed through <code><link
                     linkend="attribute-in-progress">@in-progress</link></code> that the file is no
               longer in progress. One or more of these elements provide URLs where master versions
               of the file are kept (and updated). They may be absolute URLs, such as an address on
               the Internet, or it may be a relative URL, in case we are working exclusively on our
               local computer. During validation, if a file does not match the one in the master
               version, a warning is returned. This allows us to publish a file, make corrections,
               and notify other users without having to keep track of who may be using the file.
               Similarly, if we are working with a copy of a file and it doesn't match the version
               in the master location, a warning will be returned, along with a message or a
               location of the elements that were last changed.</para>
            <para><code><link linkend="element-rights-excluding-sources"
                     >&lt;rights-excluding-sources></link></code> contains information about rights
               to the data we are releasing. This element has nothing to do with the copyright of
               the source we have used (although, having been published in 1881, the book is clearly
               in the public domain). This once again gets to the TAN metadata principle of
               describing our data and not other things. We have the option to describe the license
               of the source we have used (see the rest of the guidelines for guidance), but we
               absolutely must declare whether we have placed additional scrictures on the dataset
               we have created. In this example, we have released the data under a creative commons
               license. The child element <code><link linkend="element-IRI">&lt;IRI></link></code>
               specifies the IRI assigned by Creative Commons, and <code><link
                     linkend="element-desc">&lt;desc></link></code> describes it in human-readable
               format.</para>
            <para>The conjunction of <code><link linkend="element-IRI">&lt;IRI></link></code> and
                     <code><link linkend="element-desc">&lt;desc></link></code>, the <emphasis>IRI +
                  name pattern</emphasis>, is a recurrent feature of TAN files. We may include any
               number of <code><link linkend="element-IRI">&lt;IRI></link></code> or <code><link
                     linkend="element-desc">&lt;desc></link></code> elements in an IRI + name
               pattern. But if we do so, we are stating that they all name the same thing, not
               different things.</para>
            <para><code><link linkend="element-source">&lt;source></link></code> points, through its
               IRI + name pattern, to a computer- and human-readable description of the book we have
               chosen. </para>
            <para><code><link linkend="element-declarations">&lt;declarations></link></code>
               contains data that is specific to the type of TAN file in hand, to declare the
               assumptions we have made in creating the data. In this case, because we are working
               with transcriptions, we have three major components: <code><link
                     linkend="element-work">&lt;work></link></code>, <code><link
                     linkend="element-div-type">&lt;div-type></link></code>, and <code><link
                     linkend="element-recommended-tokenization"
                  >&lt;recommended-tokenization></link></code>. </para>
            <para><code><link linkend="element-work">&lt;work></link></code> uses the IRI + name
               pattern to name the work we have chosen to transcribe. <code><link
                     linkend="element-div-type">&lt;div-type></link></code> specifies the type of
               divisions we have chosen to use to segment the transcription. In a more complex text,
               there would be several <code><link linkend="element-div-type"
                  >&lt;div-type></link></code>s. Each one has an <code><link
                     linkend="attribute-xmlid">@xml:id</link></code>, which takes as a value some
               nickname that we wish to use for <code><link linkend="attribute-type"
                  >@type</link></code> values of <code><link linkend="element-div"
                  >&lt;div></link></code>s. <code><link linkend="element-recommended-tokenization"
                     >&lt;recommended-tokenization></link></code> specifies a pattern recommended
               for changing the text into word tokens. In the example above, the <code><link
                     linkend="element-recommended-tokenization"
                  >&lt;recommended-tokenization></link></code> is empty, and specifies through
                     <code><link linkend="attribute-which">@which</link></code> that a general
               tokenization pattern should be used, which means that word tokens should be created
               by dividing according to space, and each point of punctuation should be treated as a
               word. Other general options for <code><link linkend="attribute-which"
                  >@which</link></code> include <code>general-words-only-1</code> (all punctuation
               is suppressed) and <code>precise-1</code> (tokens should be formed only from spaces
               or U+200B, ZERO WIDTH SPACE). Tokenization also allows the IRI + pattern for
               customized TAN tokenization files (TAN-R-tok), discussed elsewhere in these
               guidelines.</para>
            <para>The IRI + name pattern is also used for <code><link linkend="element-agent"
                     >&lt;agent></link></code>, which describes who was involved in creating the
               data, and <code><link linkend="element-role">&lt;role></link></code>. Any number of
                     <code><link linkend="element-agent">&lt;agent></link></code> and <code><link
                     linkend="element-role">&lt;role></link></code> elements may be included and
               combined as we wish. The <code>agent</code> in this case, Jenny Park, has been given
               a tag URI. The <code><link linkend="element-IRI">&lt;IRI></link></code> value of
                     <code><link linkend="element-role">&lt;role></link></code> comes from the
               vocabulary of <link xlink:href="http://schema.org">schema.org</link>, which is
               maintained by Bing, Google, and Yahoo! in conjunction with the W3C (the nonprofit
               organization dedicated to universal Internet standards), but we could have used
               Dublin Core or some other IRI vocabulary describing behaviors, responsibilities, and
               roles.</para>
            <para>Remember that <code><link linkend="element-head">&lt;head></link></code> is
               focused on the data, not its sources, so the claim that Jenny Park is the creator
               pertains only to the data. No inference should be made about who created the source.
               If someone wants that information, or anything else about the source, they should
               pursue the identifier we have provided under <code><link linkend="element-source"
                     >&lt;source></link></code>.</para>
            <para><code><link linkend="element-change">&lt;change></link></code> has attributes
                     <code><link linkend="attribute-when">@when</link></code> and <code><link
                     linkend="attribute-who">@who</link></code> that specify who made the
               change/comment and when. The value of <code><link linkend="attribute-when"
                     >@when</link></code> is always a date plus optional time formatted according to
               the standard <code>YYYY-MM-DD</code> + time (optional).<note>
                  <para>If you are working with an XML editor that supports Schematron Quick Fixes
                     then whenever you are at a <code><link linkend="attribute-when"
                        >@when</link></code> or any other attribute that requires an ISO date and
                     the value is malformed you will be given a prompt to insert today's date or
                     date and time in a conformant manner. Using this feature will save you time and
                     effort.</para>
               </note>
               <code><link linkend="attribute-who">@who</link></code> always carries a value that
               refers to an <code>agent/<link linkend="attribute-xmlid">@xml:id</link></code>. Both
                     <code><link linkend="element-change">&lt;change></link></code> (as well as
                     <code><link linkend="element-comment">&lt;comment></link></code>, missing here)
               lack any IRIs, mainly because the likelihood that the data would ever be reused,
               repeated, or linked to is altogether too remote to be make a mandated <code><link
                     linkend="element-IRI">&lt;IRI></link></code> useful.</para>
            <para>The other transcription file looks
               similar:<programlisting>    &lt;head>
      &lt;name>TAN transcription of Ring around the Rosie&lt;/name>
      &lt;master-location>ring-o-roses.eng.1987.xml&lt;/master-location>
      &lt;rights-excluding-sources rights-holder="park">
         &lt;IRI>http://creativecommons.org/licenses/by/4.0/deed.en_US&lt;/IRI>
         &lt;name>Creative Commons Attribution 4.0 International License&lt;/name>
         &lt;desc>This data file is licensed under a Creative Commons Attribution 4.0 International
            License. The license is granted independent of rights and licenses associated with the
            source. &lt;/desc>
      &lt;/rights-excluding-sources>
      &lt;source>
         &lt;IRI>http://lccn.loc.gov/87042504&lt;/IRI>
         &lt;name>Mother Goose, from nursery to literature / by Gloria T. Delama, 1987.&lt;/name>
      &lt;/source>
      &lt;declarations>
         &lt;work>
            &lt;IRI>http://dbpedia.org/resource/Ring_a_Ring_o%27_Roses&lt;/IRI>
            &lt;name>Ring around the Rosie&lt;/name>
         &lt;/work>
         &lt;div-type xml:id="l">
            &lt;IRI>http://dbpedia.org/resource/Line_(poetry)&lt;/IRI>
            &lt;name>line&lt;/name>
         &lt;/div-type>
         &lt;recommended-tokenization which="general-words-only-1"/>
         &lt;filter>
            &lt;normalization>
               &lt;IRI>tag:textalign.net,2015:normalization:hyphens-discretionary-removed&lt;/IRI>
               &lt;name>discretionary hyphens suppressed&lt;/name>
            &lt;/normalization>
         &lt;/filter>
      &lt;/declarations>
      &lt;agent xml:id="park" roles="creator">
         &lt;IRI>tag:parkj@textalign.net,2015:self&lt;/IRI>
         &lt;name xml:lang="eng">Jenny Park&lt;/name>
      &lt;/agent>
      &lt;role xml:id="creator">
         &lt;IRI>http://schema.org/creator&lt;/IRI>
         &lt;name xml:lang="eng">creator&lt;/name>
      &lt;/role>
      &lt;change when="2014-10-24" who="park">Started file&lt;/change>
      &lt;comment when="2014-10-24" who="park">See p. 39 of source.&lt;/comment>
   &lt;/head></programlisting></para>
            <para>One significant difference is that <code><link linkend="element-declarations"
                     >&lt;declarations></link></code> has a new child, <code><link
                     linkend="element-filter">&lt;filter></link></code>, which contains a
                     <code><link linkend="element-normalization">&lt;normalization></link></code>
               statement that declares, in both a description and an IRI, that we have opted to
               remove word-break line-end hyphenation. This provides a cautionary note to users of
               our data who might value line-end hyphenation. Any number of <code><link
                     linkend="element-normalization">&lt;normalization></link></code>s can be used
               to describe any alterations we might have made in our transcription. In other
               transcriptions we could use this feature to declare other suppressions, such as
               editorial comments or footnote signals.</para>
            <para>Note that the value of <code>div-type/<link linkend="attribute-xmlid"
                     >@xml:id</link></code> here, the letter <code>l</code>, differs from our
               previous transcription file, <code>line</code>. Even though we have adopted a
               different nickname, they are treated as equivalent because in each file we have
               defined <code>l</code> or <code>line</code> with the same IRI,
                  <code>http://dbpedia.org/resource/Line_(poetry)</code>. A computer that later
               aligns these two files will not worry so much about <code>l</code> and
                  <code>line</code>, but will look at the underlying IRI that defines these terms.
               This exemplifies how linked data (see above) can support our work. We are free to use
               abbreviations that make sense to us, yet tie those abbreviations into the larger
               infrastructure by means of IRIs. It also means that our transcriptions can be
               assigned divisions that may be generally rare and unfamiliar or common but only to a
               specific field (e.g., sections of a legal document).</para>
            <para>Our alignment <code><link linkend="element-head">&lt;head></link></code>s will
               look slightly different. We start with the TAN-A-div alignment
               file:<programlisting>    &lt;head>
       &lt;name>div-based alignment of multiple versions of Ring o Roses&lt;/name>
       &lt;master-location>ringoroses.div.1.xml&lt;/master-location>
       &lt;rights-excluding-sources rights-holder="park">
          &lt;IRI>http://creativecommons.org/licenses/by/4.0/deed.en_US&lt;/IRI>
          &lt;name>Creative Commons Attribution 4.0 International License&lt;/name>
          &lt;desc>This data file is licensed under a Creative Commons Attribution 4.0 International
             License. The license is granted independent of rights and licenses associated with the
             source. &lt;/desc>
       &lt;/rights-excluding-sources>
       &lt;source xml:id="eng-uk">
          &lt;IRI>tag:parkj@textalign.net,2015:ring01&lt;/IRI>
          &lt;name>Transcription of ring around the roses in English (UK)&lt;/name>
          &lt;location when-accessed="2015-03-10">../TAN-T/ring-o-roses.eng.1881.xml&lt;/location>
       &lt;/source>
       &lt;source xml:id="eng-us">
          &lt;IRI>tag:parkj@textalign.net,2015:ring02&lt;/IRI>
          &lt;name>Transcription of ring around the roses in English (US)&lt;/name>
          &lt;location when-accessed="2014-08-13">../TAN-T/ring-o-roses.eng.1987.xml&lt;/location>
       &lt;/source>
       &lt;declarations/>
       &lt;agent xml:id="park" roles="creator">
          &lt;IRI>tag:parkj@textalign.net,2015:self&lt;/IRI>
          &lt;name xml:lang="eng">Jenny Park&lt;/name>
       &lt;/agent>
       &lt;role xml:id="creator">
          &lt;IRI>http://schema.org/creator&lt;/IRI>
          &lt;name xml:lang="eng">creator&lt;/name>
       &lt;/role>
       &lt;change when="2014-08-14" who="park">Started file&lt;/change>
    &lt;/head></programlisting></para>
            <para>Much of this will look similar to the previous two examples. Every alignment file
               has only one kind of source, namely TAN transcription files, nothing else. Therefore
                     <code><link linkend="element-source">&lt;source></link></code>'s <code><link
                     linkend="element-IRI">&lt;IRI></link></code> always takes the <code><link
                     linkend="attribute-id">@id</link></code> value in the TAN transcription file.
                     <code><link linkend="element-name">&lt;name></link></code> may replicate
               exactly the title found in the transcription file, or it may be modified, perhaps to
               harmonize better with the descriptions of the other texts aligned in the file.
                     <code><link linkend="element-source">&lt;source></link></code> also has an
               child element not seen in the earlier two examples, <code><link
                     linkend="element-location">&lt;location></link></code>, which specifies where
               the digital file was accessed and when (through <code><link
                     linkend="attribute-when-accessed">@when-accessed</link></code>). We may include
               as many of these <code><link linkend="element-location">&lt;location></link></code>
               elements as we wish (starting with a preferred or reliable location). The <code><link
                     linkend="attribute-when-accessed">@when-accessed</link></code> value is
               important, because if the owner of the file later edits it, and provides a date for
               the change, the validator will be able to detect that our alignment file depends upon
               an older version and return a warning with details about the latest change. We can
               then explore the source and see if the alterations merit any changes on our
               part.</para>
            <para>Our TAN-A-div file could have any number of <code><link linkend="element-source"
                     >&lt;source></link></code>s, and not necessarily for the same work. It also
               does not matter in which order we put the <code><link linkend="element-source"
                     >&lt;source></link></code>s. By putting the 1987 or the 1881 version first, we
               are not implying that one is the source of the other. The most important consequence
               is that most processes that use our alignment file will treat the first-listed source
               as the basis from which to compare other sources.</para>
            <para><code><link linkend="element-declarations">&lt;declarations></link></code> is
               empty, mainly because we have, in this case, no working assumptions to declare. In
               more advanced uses, this element would not be empty.</para>
            <para>This <code><link linkend="element-head">&lt;head></link></code> explains why the
                     <code><link linkend="element-body">&lt;body></link></code> of our TAN-A-div
               file could be empty. In the <code><link linkend="element-head"
                  >&lt;head></link></code> we have already specified the texts that would need to be
               aligned and where they are to be found. All TAN-A-div files assume, by default, that
               every source should be aligned with each other upon the basis of <code><link
                     linkend="element-div">&lt;div></link></code>s, especially leaf <code><link
                     linkend="element-div">&lt;div></link></code>s. That is, the TAN-A-div format
               assumes all alignments are to be made implicitly unless otherwise specified. </para>
            <para>In fact, a TAN-A-div file is in this case technically unnecessary. The two files
               are already predictably structured and aligned, and the works and division types are
               defined identically. But we will see that the options available in a TAN-A-div's
                     <code><link linkend="element-declarations">&lt;declarations></link></code> and
                     <code><link linkend="element-body">&lt;body></link></code> will allow us not
               only to deal with inconsistencies in source transcriptions but to create interesting
               alignments that go well beyond the automatic alignment afforded by identically
               structured transcriptions.</para>
            <para>Meanwhile we turn to our fourth file, the TAN-A-tok alignment, whose <code><link
                     linkend="element-head">&lt;head></link></code> looks like
               this:<programlisting>    &lt;head>
        &lt;name>token-based alignment of two versions of Ring o Roses&lt;/name>
        &lt;master-location>ringoroses.01+02.token.1.xml&lt;/master-location>
        &lt;rights-excluding-sources rights-holder="park">
            &lt;IRI>http://creativecommons.org/licenses/by/4.0/deed.en_US&lt;/IRI>
            &lt;name>Creative Commons Attribution 4.0 International License&lt;/name>
            &lt;desc>This data file is licensed under a Creative Commons Attribution 4.0 International
               License. The license is granted independent of rights and licenses associated with the
               source. &lt;/desc>
        &lt;/rights-excluding-sources>
         &lt;source xml:id="ring1881">
            &lt;IRI>tag:parkj@textalign.net,2015:ring01&lt;/IRI>
            &lt;name>Ring o roses 1881&lt;/name>
            &lt;location when-accessed="2015-01-17">../TAN-T/ring-o-roses.eng.1881.xml&lt;/location>
        &lt;/source>
        &lt;source xml:id="ring1987">
            &lt;IRI>tag:parkj@textalign.net,2015:ring02&lt;/IRI>
            &lt;name>Ring o roses 1987&lt;/name>
            &lt;location when-accessed="2015-01-17">../TAN-T/ring-o-roses.eng.1987.xml&lt;/location>
        &lt;/source>
        &lt;declarations>
            &lt;bitext-relation xml:id="B-descends-from-A">
                &lt;IRI>tag:textalign.net,2015:bitext-relation:a/x+/b&lt;/IRI>
                &lt;name>B descends directly from A, unknown number of intermediaries&lt;/name>
                &lt;desc>The 1987 versions is hypothesized to descend somehow from the 
                    1881 version, mainly for the sake of illustration.&lt;/desc>
            &lt;/bitext-relation>
            &lt;reuse-type xml:id="adaptationGeneral">
                &lt;IRI>tag:textalign.net,2015:reuse-type:adaptation:general&lt;/IRI>
                &lt;name>general adaptation&lt;/name>
            &lt;/reuse-type>
            &lt;tokenization src="ring1881 ring1987" which="general-1"/>
        &lt;/declarations>
        &lt;agent xml:id="park" roles="creator">
            &lt;IRI>tag:parkj@textalign.net,2015:self&lt;/IRI>
            &lt;name xml:lang="eng">Jenny Park&lt;/name>
        &lt;/agent>
        &lt;role xml:id="creator">
            &lt;IRI>http://schema.org/creator&lt;/IRI>
            &lt;name xml:lang="eng">creator&lt;/name>
        &lt;/role>
        &lt;change when="2015-01-20" who="park">Started file&lt;/change>
    &lt;/head></programlisting></para>
            <para>The TAN-A-tok <code><link linkend="element-head">&lt;head></link></code> looks
               similar to the previous examples, except that <code><link
                     linkend="element-declarations">&lt;declarations></link></code> has three
               children.</para>
            <para><code><link linkend="element-bitext-relation">&lt;bitext-relation></link></code>
               states through an IRI + name pattern the stemmatic relationship we think holds
               between the two sources. (Stemmatics is the study of the chain of transmission by
               which the versions written by authors made their way into the copies, versions, and
               editions that are extant; it frequently involves the creation of genealogical-like
               tree to depict how text-bearing objects with different copies of the same text derive
               from or relate to each other.)</para>
            <para>One or more <code><link linkend="element-reuse-type"
               >&lt;reuse-type></link></code>s specify how one text has reused another. The IRI we
               have used shows that we suspect that the text reuse is general adaptation. If this
               were a translation or a quotation or some other kind of text reuse, we would have
               used a different IRI value.</para>
            <para>A third declaration, <code><link linkend="element-tokenization"
                     >&lt;tokenization></link></code>, specifies the tokenization pattern we have
               adopted to define our word tokens. It is much like the <code><link
                     linkend="element-recommended-tokenization"
                  >&lt;recommended-tokenization></link></code>s that feature in TAN-T files. Note,
               however, that <code><link linkend="attribute-src">@src</link></code> may take more
               than one value, to specify that the same tokenization rule should be applied to both
               sources. We could have applied different tokenization patterns had we wanted to,
               either to customized TAN-R-tok files or to one of the <code><link
                     linkend="element-recommended-tokenization"
                  >&lt;recommended-tokenization></link></code> patterns in the source.</para>
         </section>
         <section>
            <title>Aligning across Projects</title>
            <para>We expand our example now and imagine what it might be like to extend the
               alignment outside our project. Let us assume that we have found in the library of
               another project a TAN transcription of a work that looks quite similar to our
               own:<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-T.rnc" type="application/relax-ng-compact-syntax"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-T.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
&lt;TAN-T xmlns="tag:textalign.net,2015:ns" id="tag:hans@beispiel.com,2014:ringel">
   &lt;head>
      &lt;name>TAN Transkription, Ringelreihen mit Riederfallen&lt;/name>
      &lt;master-location>http://beispiel.com/TAN-T/ringel.xml&lt;/master-location>
      &lt;rights-excluding-sources rights-holder="schmidt">
         &lt;IRI>http://creativecommons.org/licenses/by/4.0/&lt;/IRI>
         &lt;name>Creative Commons Namensnennung 4.0 International Lizenz.&lt;/name>
         &lt;desc>Dieses Werk ist lizenziert unter einer Creative Commons 
            Namensnennung 4.0 International Lizenz.&lt;/desc>
      &lt;/rights-excluding-sources>
      &lt;source>
         &lt;IRI>http://www.worldcat.org/oclc/4574384&lt;/IRI>
         &lt;name>Franz Magnus Böhme, Deutsches Kinderlied und Kinderspiel: Volksüberlieferungen aus
            allen Landen deutscher Zunge, gesammelt, geordnet und mit Angabe der Quellen. Leipzig,
            1897.&lt;/name>
      &lt;/source>
      &lt;declarations>
         &lt;work>
            &lt;IRI>tag:beispiel.com,2014:texte:holderbusch&lt;/IRI>
            &lt;name>"Die Kinder auf dem Holderbusch"&lt;/name>
         &lt;/work>
         &lt;version>
            &lt;IRI>urn:uuid:31648039-3dbb-49b9-b66e-9bd2cd11630e&lt;/IRI>
            &lt;name>zweite Version&lt;/name>
         &lt;/version>
         &lt;div-type xml:id="Zeile">
            &lt;IRI>http://dbpedia.org/resource/Gedichtzeile&lt;/IRI>
            &lt;name>Gedichtzeile&lt;/name>
         &lt;/div-type>
         &lt;recommended-tokenization which="general-1"/>
         &lt;filter>
            &lt;normalization>
               &lt;IRI>tag:kalvesmaki@gmail.com,2014:normalization:hyphens-discretionary-off&lt;/IRI>
               &lt;name>Keine Bindestriche&lt;/name>
            &lt;/normalization>
         &lt;/filter>
      &lt;/declarations>
      &lt;agent xml:id="schmidt" roles="Produzent">
         &lt;IRI>tag:hans@beispiel.com,2014:selbst&lt;/IRI>
         &lt;name xml:lang="eng">Hans Schmidt&lt;/name>
      &lt;/agent>
      &lt;role xml:id="Produzent">
         &lt;IRI>http://schema.org/producer&lt;/IRI>
         &lt;name xml:lang="eng">Produzent&lt;/name>
      &lt;/role>
      &lt;change when="2014-08-13" who="schmidt">Anfang&lt;/change>
      &lt;comment when="2014-08-13" who="schmidt">unten auf der Z. 438, recht&lt;/comment>
   &lt;/head>
   &lt;body xml:lang="deu" in-progress="false">
      &lt;div type="Zeile" n="a">Ringel, Ringel, Reihe!&lt;/div>
      &lt;div type="Zeile" n="b">Sind der Kinder dreie,&lt;/div>
      &lt;div type="Zeile" n="c">Sitzen auf dem Holderbuch,&lt;/div>
      &lt;div type="Zeile" n="e">Schreien alle: husch, husch, husch!&lt;/div>
   &lt;/body>
&lt;/TAN-T></programlisting></para>
            <para>It seems clear to us that this 19th-century German version is quite similar to our
               two English versions. We have some alignment options open to us. Two more sets of
               word-for-word alignments would be interesting, but remember, just because we find a
               text that nicely aligns with others does not mean that we <emphasis role="italic"
                  >must</emphasis> align them. In this case, we choose not to worry about word-for
               word alignments, and we focus here only on the TAN-A-div alignment, so that, for
               example, we can later generate an HTML report that will allow us to more conducively
               read the three versions in parallel and study their relationships.</para>
            <para>To that end, we first observe some differences between this transcription and our
               other two. First, the value of <code><link linkend="element-work"
                  >&lt;work></link></code> is not the one we have given our two versions. Second,
               the <code><link linkend="element-div-type">&lt;div-type></link></code> is defined as
                  <code>http://dbpedia.org/resource/Gedichtzeile</code>. Third, the lines have been
               lettered instead of numbered. And last, the editor seems to have made a typographical
               error, making the last line <code>n="e"</code> instead of <code>n="d"</code>). These
               four differences typify some of the inconsistencies that are found as people work
               independently on similar texts.<note>
                  <para>There are a few other differences in this third transcription that do not
                     affect our alignment. <code><link linkend="element-version"
                        >&lt;version></link></code> is used to distinguish different version of the
                     same work found on the same text-bearing object. Notice that the <code><link
                           linkend="element-IRI">&lt;IRI></link></code> value is a uuid, in this
                     case because the editor was not prepared to deploy a formal IRI naming scheme
                     (perhaps using a tag URN) that would be satisfactory for work-versions.</para>
               </note></para>
            <para>These are points we can easily reconcile in our TAN-A-div file, which we now
               expand to include the German version. We make the following adjustments (in
               boldface):<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-A-div.rnc" type="application/relax-ng-compact-syntax"?>
&lt;?xml-model href="http://textalign.net/release/1/dev/schemas/TAN-A-div.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
&lt;TAN-A-div xmlns="tag:textalign.net,2015:ns" id="tag:parkj@textalign.net,2015:ring-alignment">
    &lt;head>
       &lt;name>div-based alignment of multiple versions of Ring o Roses&lt;/name>
       &lt;master-location>ringoroses.div.1.xml&lt;/master-location>
       &lt;rights-excluding-sources rights-holder="park">
          &lt;IRI>http://creativecommons.org/licenses/by/4.0/deed.en_US&lt;/IRI>
          &lt;name>Creative Commons Attribution 4.0 International License&lt;/name>
          &lt;desc>This data file is licensed under a Creative Commons Attribution 4.0 International
             License. The license is granted independent of rights and licenses associated with the
             source. &lt;/desc>
       &lt;/rights-excluding-sources>
       &lt;source xml:id="eng-uk">
          &lt;IRI>tag:parkj@textalign.net,2015:ring01&lt;/IRI>
          &lt;name>Transcription of ring around the roses in English (UK)&lt;/name>
          &lt;location when-accessed="2015-03-10">../TAN-T/ring-o-roses.eng.1881.xml&lt;/location>
       &lt;/source>
       &lt;source xml:id="eng-us">
          &lt;IRI>tag:parkj@textalign.net,2015:ring02&lt;/IRI>
          &lt;name>Transcription of ring around the roses in English (US)&lt;/name>
          &lt;location when-accessed="2014-08-13">../TAN-T/ring-o-roses.eng.1987.xml&lt;/location>
       &lt;/source>
       <emphasis role="bold">&lt;source xml:id="ger">
          &lt;IRI>tag:beispiel.com,2014:ringel&lt;/IRI>
          &lt;name>Transcription of an ancestor of Ring around the roses in German&lt;/name>
          &lt;location when-accessed="2014-08-22">http://beispiel.com/TAN-T/ringel.xml&lt;/location>
          &lt;location when-accessed="2014-08-22">../TAN-T/ring-o-roses.deu.1897.xml&lt;/location>
       &lt;/source></emphasis>
       &lt;declarations/>
       &lt;agent xml:id="park" roles="creator">
          &lt;IRI>tag:parkj@textalign.net,2015:self&lt;/IRI>
          &lt;name xml:lang="eng">Jenny Park&lt;/name>
       &lt;/agent>
       &lt;role xml:id="creator">
          &lt;IRI>http://schema.org/creator&lt;/IRI>
          &lt;name xml:lang="eng">creator&lt;/name>
       &lt;/role>
       &lt;change when="2014-08-14" who="park">Started file&lt;/change>
       <emphasis role="bold">&lt;change when="2014-08-22" who="park">Added German version.&lt;/change></emphasis>
    &lt;/head>
    &lt;body>
       <emphasis role="bold">&lt;equate-works sources="eng-uk ger"/>
       &lt;equate-div-types>
          &lt;div-type-ref src="ger" div-type-ref="Zeile"/>
          &lt;div-type-ref src="eng-uk" div-type-ref="line"/>
       &lt;/equate-div-types>
       &lt;realign>
          &lt;anchor-div-ref source="ger" ref="Zeile e"/>
          &lt;div-ref source="eng-us" ref="l 4"/>
       &lt;/realign></emphasis>
    &lt;/body>
&lt;/TAN-A-div></programlisting></para>
            <para>The first major change is the insertion of a new <code><link
                     linkend="element-source">&lt;source></link></code>, identifying the name and
               location of the third example. Note that two locations have been provided, one for
               the original location and another for the copy saved locally into our project folder.
               Validation will occur at the first document available, so if we wanted to work
               primarily off our local copy, we would have put it first. By placing it second, we
               indicate that we want to have our local copy as a backup, in case the first is not
               available.</para>
            <para>The second major insertion is a new <code><link linkend="element-change"
                     >&lt;change></link></code>, documenting when we made the alterations. The value
               of <code><link linkend="attribute-when">@when</link></code> effectively alters the
               version number of our TAN-A-div file.</para>
            <para>The third major change populates the <code><link linkend="element-body"
                     >&lt;body></link></code> with elements that calibrate the new version to the
               other two. <code><link linkend="element-equate-works">&lt;equate-works></link></code>
               says that, for the sake of this alignment, the works defined in the UK version and
               the German version to be considered equivalent. We did not mention the US version
               because we do not need to. As was mentioned above, anyone using a TAN-A-div should
               assume that all alignments are transitive unless otherwise specified. That includes
               specifications like this. If A and B are already defined to be the same work, and we
               specify that A and C are also the same work, then it must be inferred that B and C
               are as well. Note, we are not committing ourselves to the proposition that they are
               in reality the same work. We are making this statement only provisionally, to
               facilitate the alignment.</para>
            <para><code><link linkend="element-equate-div-types">&lt;equate-div-types></link></code>
               declares that what the German version calls Zeile is, for the sake of this alignment,
               equivalent to what the UK version calls line. Transitivity means that Zeile is
               inferred to be equivalent to what the US version calls <code>l</code>.</para>
            <para>A <code><link linkend="element-realign">&lt;realign></link></code> takes care of
               the apparent typographical error, this time using the US version as the main way to
               correlate the division references. Any <code><link linkend="element-div-ref"
                     >&lt;div-ref></link></code> in a <code><link linkend="element-realign"
                     >&lt;realign></link></code> is wrested from automatic alignment. If there is an
                     <code><link linkend="element-anchor-div-ref">&lt;anchor-div-ref></link></code>
               then it will be realigned with that reference and, by the law of transitivity,
               anything that aligns to it, in this case the UK version.</para>
            <para>We do not need to reconcile the <code><link linkend="attribute-n">@n</link></code>
               values of <code>a</code>, <code>b</code>, and <code>c</code> in the German version.
               The TAN format allows four numeration systems other than Arabic numerals: Roman
               numerals (uppercase or lowercase), alphabetic numerals (a, b, c, ..., z, aa, bb,
               ....), and digit-alphabet combinations (e.g., 1a, 1e, 4g) or alphabet-digit
               combinations (e.g., a4, a5, b5). All these will be treated as their numerical
               equivalent.</para>
            <para>With these changes, the new version is completely synchronized with the other two.
               Our work may have been simplified if we had just modified the German version ourself.
               But then we would not have been able to connect our work to other TAN files that may
               be depending upon this version. Perhaps we should have gotten in touch with Hans
               Schmidt, the producer of the German version, and suggest that he modify the version
               to make it align better. In the case of <code><link linkend="element-div-type"
                     >&lt;div-type></link></code>, he need merely add another line: <code><link
                     linkend="element-IRI"
                  >&lt;IRI></link>http://dbpedia.org/resource/Line_(poetry)&lt;/IRI></code>. This
               line, in addition to the preexisting <code><link linkend="element-IRI"
                     >&lt;IRI></link></code>, specifies that the two IRIs are equivalent. Perhaps he
               has reasons for labeling the lines with letters, and perhaps he is reluctant to
               explicitly identify this poem with <emphasis role="italic">Ring around the
                  Rosie</emphasis>. That is within his rights. (Remember, TAN is meant to provide a
               framework within which opinions can be registered, even against popular opinion.) But
               the conversation might lead to our pointing out that <code>n="e"</code> should
               probably be <code>n="d"</code> and that there is an apparent discrepancy in the last
               line (the original, printed book has the poem twice on page 438, one with
               "Holderbuch," the other, "Holderbusch"). In correcting the original transcription and
               providing a record of the change through <code><link linkend="element-change"
                     >&lt;change></link></code>, he tacitly notifies anyone else using the file that
               corrections have been made.</para>
            <para>There is much more to TAN, of course. The rest of these guidelines provide full
               documentation. In addition, other examples in the TAN repository provide ideas on how
               to develop your other alignments, perhaps more complex. The data files in that
               repository are open for modification, copying, reuse, and so forth. Just remember, if
               you do that, be certain to change the tag URN of each TAN file's <code><link
                     linkend="attribute-id">@id</link></code> so that it points to an email address
               or domain name that you own(ed).</para>
         </section>
      </chapter>
      <chapter>
         <title>Intermediate Use of the TAN Format</title>
         <para>This chapter expands upon the previous one by building upon the
               <emphasis>Ring-a-ring-a-roses</emphasis> example to explore more advanced uses of the
            format. Unlike the previous chapter, very few concepts are introduced because the level
            of discussion is now at a point where the technical descriptions become elaborate and
            are best reserved for the next part of this manual. Instead, the focus is on considering
            common desiderata and on providing examples to illustrate solutions.</para>
         <section>
            <title>Making TEI Transcriptions TAN-Compliant</title>
            <para>Text pending.</para>
         </section>
         <section>
            <title>Simplifying References and Identifying Quotations</title>
            <para>Text pending.</para>
         </section>
         <section>
            <title>Aligning Multiple Versions of Multiple Works</title>
            <para>Text pending.</para>
         </section>
         <section>
            <title>Creating Tokenization Rules</title>
            <para>Text pending.</para>
         </section>
         <section>
            <title>Analyzing Words (Morphology / Part of Speech)</title>
            <para>Text pending.</para>
         </section>
      </chapter>
   </part>
   <part xml:id="detailed_description">
      <title>Detailed Description</title>
      <partintro>
         <para>This part of the guidelines provides a detailed description of the Text Alignment
            Network formats. The material is organized according to the structure that governs the
            schema files, so both can be read in tandem.</para>
         <para>Chapter 4 outlines the foundations of the TAN format, and generally readable without
            much background.</para>
         <para>Chapters 5 through 9 document in detail the TAN formats. Each chapter begins with
            preliminary theoretical or scholarly considerations, then presents in detail the rules
            for every element and attribute. A summary description is followed by a formal
            definition, the names of valid parents, and a list of validation rules for the attribute
            or element. If a Schematron Quick Fix is available it is explained, followed by examples
            drawn from <link xlink:href="http://textalign.net/release/1/dev/examples"/>.</para>
         <para>This part of the guidelines is intended to be consulted, not read through. It has
            been written with the assumption that you have already read the previous part (<xref
               linkend="general_overview"/>) and have begun to put together a TAN collection.</para>
         <para>Because readers of this section include specialists from different backgrounds, all
            acronyms, abbreviations, and concepts are defined and explained, even if only tersely.
            Specialized concepts or technologies are discussed only insofar as they affect the use
            of TAN; suggestions for further reading are provided for those who wish to read a more
            thorough introduction to the topic. </para>
      </partintro>
      <chapter xml:id="concepts_common">
         <title>General Underpinnings</title>
         <para>This chapter retains something of the introductory spirit of the previous one by
            providing an overview of the fundamental principles and technologies behind TAN. The
            overall goal of this chapter is to note definitions, assumptions, and other matters that
            run throughout the format. Although this chapter assumes no prior knowledge on your part
            of a particular technology, it is also not meant to be a tutorial. Links to further
            reading in this chapter will take you to introductory material that could be used in
            that way.</para>
         <section>
            <title>The Big Picture</title>
            <para>The Text Alignment Network is a suite of XML encoding formats. Each TAN format is
               designed for a specific type of textual data, organized in four classes: segmented
               representations of textual works (class 1), annotations of specific texts (class 2),
               rules for linguistic concepts (class 3), and general definitions and claims (class
               4). The format may grow in the future to cover claims about text-bearing objects, for
               example codicology or stemmatics (the study of how manuscripts and other versions of
               a work relate to each other).</para>
            <para><emphasis role="bold">Class 1</emphasis>, representations of textual objects,
               consists solely of transcription files. Each transcription file contains the text of
               a single work from a single text-bearing object, whether physical or digital (TAN
               regards digital files as objects). There are two types of transcription file, a
               standard generic format and another for TEI XML files. These two types are
               differentiated by the name of the rootmost element in the file, <code><link
                     linkend="element-TAN-T">&lt;TAN-T></link></code> and <code>&lt;TEI></code>
               respectively. In the future, class 1 may expand to include formats intended to
               segment (and therefore align) visual, audio, or audiovisual files; it may also expand
               to include a customized form of HTML. All class 1 files are TEI conformant.</para>
            <para><emphasis role="bold">Class 2</emphasis>, annotations of textual representations,
               consists of alignment files and lexico-morphology files. There are two types of
               alignment, one for broad, general alignments and another that supports detailed
               specificity. The former, identified by the name <code><link
                     linkend="element-TAN-A-div">&lt;TAN-A-div></link></code> in the rootmost
               element, aligns any number (one or more) of class 1 files. The latter, <code><link
                     linkend="element-TAN-A-tok">&lt;TAN-A-tok></link></code>, aligns only pairs of
               class 1 files. Lexico-morphology files, <code><link linkend="element-TAN-LM"
                     >&lt;TAN-LM></link></code>, are used to encode the lexical and morphological
               (or part of speech) forms of individual words in a given class 1 file. In the future,
               class 2 may expand to include syntax (treebanking).</para>
            <para><emphasis role="bold">Class 3</emphasis>, rules for linguistic concepts, currently
               consists of tokenization patterns and morphological patterns. The first of these,
                     <code><link linkend="element-TAN-R-tok">&lt;TAN-R-tok></link></code>, declares
               a pattern to be used to transform a string of text into a sequence of word tokens for
               linguistic analysis. The second type, <code><link linkend="element-TAN-R-mor"
                     >&lt;TAN-R-mor></link></code>, is used to declare the grammatical categories or
               features of a given language and to stipulate rules for classifying words. Class 3
               may expand in the future to include transliteration, lexicography, and syntax. </para>
            <para><emphasis role="bold">Class 4</emphasis>, general definitions and claims, allow
               users to create glossaries of commonly used terms and to make claims that do not fit
               naturally into class 1-3 TAN formats. The first of these, <code><link
                     linkend="element-TAN-key">&lt;TAN-key></link></code>, declares terms frequently
               used in other TAN files. The second, <code><link linkend="element-TAN-rdf"
                     >&lt;TAN-rdf></link></code>, is to make general assertions that can be used to
               provide context to other TAN files. Class 4 is designed to be general, so it is
               likely not so much to spawn other class 4 formats as to provide the impetus for new
               formats in the other three classes.</para>
            <para><emphasis role="italic">Dependence and reference</emphasis>: Class 1 files depend
               exclusively upon a single source—some text-bearing object (print or digital); they
               also must refer to TAN-R-tok files, and they may refer to class 3 files. Class 2
               files alone depend exclusively upon one or more class 1 files. They may also refer to
               class 3 or 4 files. Class 3 files refer to no other TAN files, except perhaps class 4
               files. Class 4 files depend upon no other class of TAN file, except perhaps other
               class 4 files.</para>
            <para><emphasis role="italic">Inclusions</emphasis>: Any TAN file may include any other
               TAN file, no matter the class of either the including or the included files.
               Inclusions in TAN behave differently than other kinds of inclusions in markup
               languages. For example, in XSLT and Schematron if file A includes file B, the
               entirety of B is copied into A before A is processed. In <link
                  xlink:href="https://www.w3.org/TR/2003/WD-xinclude-20031110/">XML
                  Inclusions</link>, inclusion pertains either to the entire file or to a specific
               element, named through <link xlink:href="https://www.w3.org/TR/WD-xptr"
                  >XPointer</link>. For these reasons, mutual inclusion is not allowed because of
               its inherent circularity.</para>
            <para>In TAN, inclusion is a two-step process. First the included file B is invoked, and
               second, as A is constructed, certain elements allow the attribute <link
                  linkend="attribute-include"><code>@include</code></link>, whose value specifies
               that all the attributes to be found in the chosen inclusion should be inserted there.
               Because of this behavior, mutual inclusion is allowed at the first step, but not the
               second. That is, A and B may validly invoke each other as inclusions as long as there
               is no overlap in elements that are included.</para>
            <para>Below is a visualization of each TAN format type per class, and lines of
               dependency.</para>
            <para><inlinemediaobject>
                  <imageobject>
                     <imagedata fileref="img/TAN%20formats%20class%201.jpeg"/>
                  </imageobject>
               </inlinemediaobject></para>
            <para><inlinemediaobject>
                  <imageobject>
                     <imagedata fileref="img/TAN%20formats%20class%202.jpeg"/>
                  </imageobject>
               </inlinemediaobject>
            </para>
            <para><inlinemediaobject>
                  <imageobject>
                     <imagedata fileref="img/TAN%20formats%20class%203.jpeg"/>
                  </imageobject>
               </inlinemediaobject>
            </para>
            <para><inlinemediaobject>
                  <imageobject>
                     <imagedata fileref="img/TAN%20formats%20class%204.jpeg"/>
                  </imageobject>
               </inlinemediaobject>
            </para>
            <para>TAN files that refer to or are referred to by other TAN files form a kind of
               network. Alignment files become the principal point of connection. Below is an
               illustration of a small collection of TAN files, with arrows showing lines of
               dependency.</para>
            <para><inlinemediaobject>
                  <imageobject>
                     <imagedata fileref="img/TAN%20example%20suite%202016-02.jpeg"/>
                  </imageobject>
               </inlinemediaobject></para>
            <para>This approach adopts what is sometimes called <emphasis role="italic">stand-off
                  annotation</emphasis> (or <emphasis role="italic">stand-off markup</emphasis>). It
               is to be contrasted with <emphasis role="italic">in-line annotation</emphasis>, in
               which a transcription along with its alignments, morphology, and so forth are
               incorporated into a single file. Most TEI and HTML files exhibit in-line annotation.
               Stand-off annotation breaks these different features into separate files. This
               approach has been adopted for several reasons: <itemizedlist>
                  <listitem>
                     <para>An editor can work on a file with minimal distraction, focusing on a
                        limited set of closely related questions.</para>
                  </listitem>
                  <listitem>
                     <para>Complementary or competing annotations can be made, even if those
                        annotations overlap (a major problem in in-line annotation, where by XML
                        rules no element may interlock or overlap with another).</para>
                  </listitem>
                  <listitem>
                     <para>Annotations can be made concurrent to any others that may already exist,
                        allowing for rich and complex analyses. </para>
                  </listitem>
                  <listitem>
                     <para>After a TAN collection is published, any other TAN files that it refers
                        to, or any TAN files referring to it, can be aggregated into much larger and
                        more complex datasets, which can then be queried to answer questions that
                        might not have been anticipated.</para>
                  </listitem>
                  <listitem>
                     <para>Editorial labor can be done without central coordination, as individuals
                        work at their own pace, independently, on separate files.</para>
                  </listitem>
                  <listitem>
                     <para>When errors are found, they can be corrected in a single master file.
                        Anyone depending upon that master file as a source will be notified of
                        changes that have been made and they can deal with them accordingly.</para>
                  </listitem>
                  <listitem>
                     <para>Any data file can be released, circulated, and used independent of any
                        other that points to it, or to which it points.</para>
                  </listitem>
                  <listitem>
                     <para>The TAN family of formats can be expanded to allow other types of
                        linguistic data, and therefore other lines of research.</para>
                  </listitem>
               </itemizedlist></para>
            <para>Stand-off annotation is not without its liabilities. Files might be altered or
               altogether deleted, fatally undermining dependent files. Files might contain
               erroneous or misleading information. An editor may find that not having the annotated
               text in the same place as the annotation is an inconvenience. These are important
               liabilities, mitigated somewhat by TAN validation rules. But if these sorts of
               concerns are more important than those pertaining ot in-line annotation formats, such
               as TEI or XHTML, then perhaps TAN is not the right format for you. </para>
         </section>
         <section>
            <title>Assumptions in the Creation of TAN Data</title>
            <para>All creators and users of TAN files are expected to share few basic
               assumptions.</para>
            <para>First, all TAN-compliant data is to be understood as largely
                  <emphasis>derivative</emphasis>. That is, data files have no originality or
               creativity independent of their sources (but see below about interpretation).
               TAN-compliant data is to be created with intent of adhering as closely as possible to
               some model or archetype. For example, a transcription should replicate faithfully
               some earlier digital edition or text-bearing material object (e.g., stone, papyrus,
               manuscript, printed book for written text; audiovisual media for oral or performative
               texts). Morphological files and alignment files should describe as clearly and as
               reliably as possible their source transcriptions. <emphasis>In creating and
                  publishing a TAN file you claim to have offered a good-faith representation or
                  description of something; in using a TAN file, you hold the creator to that
                  expectation.</emphasis></para>
            <para>Second, all core TAN files are <emphasis>interpretive</emphasis>. That is, they
               are permeated by editorial assumptions and opinions that might not be shared by
               everyone. If there is any originality or creativity in a TAN file, it is vested in
               the interpretation of the sources. For example, if you edit a transcription file you
               must decide how to handle unusual letterforms and other visible marks. Your decisions
               will be informed by how you view the original text and its native writing system, and
               how you interpret and use Unicode. If you write an alignment file, you must make
               decisions about what factors caused one text to be transformed into another.
               Lexicomorphological files require you to commit to one or more grammars and
               dictionaries, and you must discern how best to handle cases of vagueness and
               ambiguity. As a general rule, the TAN classes go from least interpretive (class 1) to
               most (class 4). But no matter which class, no TAN data file ever stands completely
               outside the interpretive act. <emphasis>In creating and publishing a TAN file you
                  claim to have disclosed as best you can the principles behind your interpretive
                  outlook; in using a TAN file, you hold the creator to that
               expectation.</emphasis></para>
            <para>Third, all core TAN files are <emphasis>useful</emphasis>. That is, the
               interpretive impluse is assumed to be coupled with an equally strong desire to make
               the data as useful to as many users as possible, even those who may not share your
               assumptions or interpretation. A creator of a transcription file, for example, should
               normalize and segment texts with a minimum of idiosyncracies, adopting when possible
               reference systems that are widely used so as to optimize the alignment process.
               Morphological files should depend whenever possible upon commonly accepted grammars
               and lexica. Alignment files should work with comprehensible categories of text reuse.
               No TAN file will always be useful to everyone, but it should be as useful to as many
               as possible, as frequently as possible. <emphasis>In creating a TAN file you claim to
                  use common, shared conventions whenever possible, and to note any departures; in
                  using a TAN file, you hold the creator to that expectation.</emphasis></para>
            <para>There are other important assumptions that can and should be declared in a TAN
               file, and they are addressed in the course of these guidelines.</para>
         </section>
         <section>
            <title>Core Technology</title>
            <para>TAN depends upon a core set of basic, relatively stable technologies. Those
               technologies and the underlying terminology are very briefly defined and explained
               below, to explain how they affect the TAN format. References to further reading will
               lead you to better and more thorough introductions. The central goal of this section
               is to note the foundations that make TAN possible, and to highlight the assumptions
               that may significantly affect how you create or interpret TAN-compliant data.</para>
            <section xml:id="unicode">
               <title>Unicode</title>
               <para>Unicode is the worldwide standard for the consistent encoding, representation,
                  and exchange of digital texts. The standard, stable but still growing, is intended
                  to represent all the world's writing systems, living and historical. Maintained by
                  a nonprofit organization, Unicode is the basis upon which we can create and edit
                  text in mixed alphabets and reliably share that data with other people,
                  independent of specific fonts. Any Unicode-compliant text is (in general)
                  semantically interoperable on the character level and can be exchanged between
                  users and systems, no matter what font might be used to display the text. If some
                  software tries to display some Unicode-compliant text in a particular font that
                  does not support a particular alphabet, and ends up displaying boxes, the
                  underlying data is still intact and valid. Styling the text with a font that does
                  support the alphabet will reveal this to be the case.</para>
               <para>With more than 110,000 characters, Unicode is almost as complex as human
                  writing itself, and so has required a system of organization. The entire sequence
                  of characters is divided into Unicode blocks, each one reserved, more or less, for
                  a particular alphabet. Within each block, the various characters may be grouped
                  further. Each character is assigned a single codepoint.</para>
               <para>Because computers work on the binary system, it was considered ideal to number
                  the characters or glyphs in Unicode with a related numeration system. Codepoints
                  are therefore numbered according to a hexadecimal system (base 16), which is
                  larger than our most common system, the decimal (base 10). The hexadecimal system
                  uses the digits 0 through 9 and the letters A through F. (The number 10 in decimal
                  is A in hexadecimal; decimal 11 = hex B; decimal 17 = hex 10; decimal 79 = hex
                  4F.) To find Unicode codepoint values is therefore helpful to think of the corpus
                  of glyphs as a very long ribbon sixteen squares wide. This is illustrated nicely
                     <link
                     xlink:href="http://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF"
                     >in this article</link>. Each position along the width is labeled with a
                  hexadecimal number (0-9, A-F) that always identifies the last digit of a
                  character's code point value.</para>
               <para>It is common to refer to Unicode characters by their value or their name. The
                  value customarily starts "U+" and continues with the hexadecimal value, usually at
                  least four digits. The official Unicode name is usually given fully in uppercase.
                  Examples:</para>
               <para>
                  <table frame="all">
                     <title>Unicode characters</title>
                     <tgroup cols="3">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <colspec colname="c3" colnum="3" colwidth="1.0*"/>
                        <thead>
                           <row>
                              <entry>Character</entry>
                              <entry>Unicode value</entry>
                              <entry>Unicode name</entry>
                           </row>
                        </thead>
                        <tbody>
                           <row>
                              <entry>" " (space)</entry>
                              <entry>U+0020</entry>
                              <entry>SPACE</entry>
                           </row>
                           <row>
                              <entry>®</entry>
                              <entry>U+00AE</entry>
                              <entry>REGISTERED SIGN</entry>
                           </row>
                           <row>
                              <entry>ю</entry>
                              <entry>U+044E</entry>
                              <entry>CYRILLIC SMALL LETTER YU</entry>
                           </row>
                        </tbody>
                     </tgroup>
                  </table>
               </para>
               <para>Further reading:<itemizedlist>
                     <listitem>
                        <para><link xlink:href="http://unicode.org">Unicode Consortium</link></para>
                     </listitem>
                     <listitem>
                        <para><link xlink:href="http://en.wikipedia.org/wiki/Unicode">Unicode</link>
                           (Wikipedia)</para>
                     </listitem>
                  </itemizedlist></para>
               <para>
                  <note xml:id="normalization">
                     <title>Normalization</title>
                     <para>TAN requires all data to be normalized according to the Unicode NFC
                        algorithm. Any text in a TAN body that does not comply will be marked as
                        invalid. Validation engines that support Schematron Quick Fixes should
                        provide an option to allow users to easily convert non-normalized to
                        normalized Unicode.</para>
                  </note>
                  <note xml:id="combining_characters">
                     <title>Combining characters</title>
                     <para>At the core level of conformance, Unicode does not dictate whether
                        combining characters (accents, modifying symbols) should be counted
                        independently or as part of a base character, nor does the family of XML
                        languages. This affects regular expressions and XPath expressions. Any class
                        2 TAN file that attempts to count characters in a string of text that
                        includes combining characters will trigger a warning. In the TAN format,
                        character counting is made exclusively of non-combining characters, strictly
                        defined as the regular expression <code>[^\p{M}]</code>. Any numerical
                        reference made in a TAN file to an individual character will be found by
                        counting only base characters, and will return that base character combined
                        with all combining characters that immediately follow. Any <link
                           linkend="element-div"><code>&lt;div></code></link> that starts with a
                        combining character will be marked as invalid. See also <xref
                           linkend="reg_exp_and_comb_chars"/>.</para>
                  </note>
               </para>
            </section>
            <section xml:id="xml">
               <title>eXtensible Markup Language (XML)</title>
               <para>The eXtensible Markup Language (XML) is a machine-actionable markup language
                  that facilitates human readability. Defined by the W3C, XML has two versions, 1.0
                  and 1.1. &lt;<emphasis role="bold">Q: should version 1.1 be allowed or
                     mandated?</emphasis>></para>
               <para>At its heart, XML is rather simple. It begins with an opening line that
                  declares that what otherwise would look just like plain text is an XML file. It
                  then proceeds to the data, which must marked by one or more pairs of tags. An
                  opening tag looks like <code>&lt;tag></code> and a closing like
                     <code>&lt;/tag></code> (or if the tags contain no data, this can be collapsed
                  into one: <code>&lt;tag/></code>). A pair of matching tags is called an <emphasis
                     role="bold">element</emphasis>. Elements must nest within each other. They
                  cannot overlap. For
                  example:<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;p>A paragraph about 
  &lt;name>
    &lt;first>Mary&lt;/first> 
    &lt;last>Lee&lt;/last>&lt;/name>.&lt;/p></programlisting></para>
               <para>This nesting relationship of elements means that an XML document can be
                  pictured as a tree, a metaphor that provides a host of technical names fro the
                  relationships that hold between elements: <emphasis>root</emphasis>,
                     <emphasis>parent</emphasis>, <emphasis>child</emphasis>,
                     <emphasis>sibling</emphasis>, <emphasis>ancestor</emphasis>, and
                     <emphasis>descendant</emphasis>. In the example above, the root element
                     <code>&lt;p></code> is the parent of <code>&lt;name></code> and the ancestor of
                     <code>&lt;name></code>, <code>&lt;first></code>, and <code>&lt;last></code>.
                  The element <code>&lt;first></code> is a child of <code>&lt;name></code> and a
                  descendant of both &lt;name> and <code>&lt;p></code>. <code>&lt;first></code> and
                     <code>&lt;last></code> are siblings to each other.</para>
               <para>The opening tag of an element might have additional nodes called <emphasis
                     role="bold">attributes</emphasis>, recognized by a word, an equals sign, and
                  then some text within quotation marks (single or double), e.g.,
                     <code>id="self"</code>. An element may have many attributes, and those
                  attributes can appear in any order. Attributes can be thought of as leaves on an
                  XML tree. They are intended to carry simple data (usually metadata about the data
                  contained by the element), because they cannot govern a hierarchy.</para>
               <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;p n="1" id="example">A paragraph about &lt;name>&lt;first>Mary&lt;/first> &lt;last>Lee&lt;/last>&lt;/name>.&lt;/p></programlisting>
               <para>The two examples above provide are functionally equivalent. The first takes up
                  several lines whereas the second has only two. But they're still equivalent. That
                  is because in most XML projects extra lines, spaces, and indentation are allowed,
                  to give an XML editor the flexibility to play around with indentations without
                  affecting the content. Therefore, continuous strings of multiple spaces, tabs, and
                  newline/carriage return are to be treated as a single space. (Although the feature
                  of ignoring spaces can be overridden in XML, TAN files always assume that elements
                  that are equivalent after normalizing space are, well, equivalent.)</para>
               <para>XML allows for other rules to be added, if an individual or group so wishes.
                  These rules, called schemas, can allow great flexibility or be very strict. The
                  TAN schemas tend to the latter. This is true also of its customization of the TEI
                  schemas. For more about the strictures placed upon the TEI All schema see <xref
                     linkend="tan-tei"/>. See also <xref linkend="class_common"/> and <xref
                     linkend="class_1"/>.</para>
               <para>TAN-TEI schemas are generated on the basis of the official TEI All schema that
                  is available at the time of release. </para>
               <para>Further reading:<itemizedlist>
                     <listitem>
                        <para><link xlink:href="http://www.tei-c.org/">Text Encoding
                              Initiative</link></para>
                     </listitem>
                  </itemizedlist><note xml:id="tei_and_id_validation">
                     <para>Some validation engines that process a valid TAN-compliant TEI file may
                        return an error something like <code>conflicting ID-types for attribute
                           "who" of element "comment" from namespace
                           "tag:textalign.net,2015:ns"</code>. Such a message alerts you to the fact
                        that by mixing the TEI and TAN namespaces, you open yourself up to the
                        possibility of conflicting <code>xml:id</code> values. It is your
                        responsibility to ensure that you have not assigned duplicate identifiers.
                        Very often, it is possible for you to configure an XML editor to ignore this
                        discrepancy. (In &lt;oXygen/> XML editor go to Options > Preferences... >
                        XML > XML Parser > RELAX NG and uncheck the box check ID/IDREF.)</para>
                  </note></para>

               <section xml:id="whitespace">
                  <title>TAN and white space</title>
                  <para>By default, XML treats multiple instances of space characters (space, tab,
                     newline, and carriage return) as a single space. If retention of multiple
                     spaces is important for your research, then the TAN formats are not an
                     appropriate XML format, because it always assumes space normalization. TAN is
                     not intended to replicate the appearance of a text-bearing object. Any project
                     that has this as a requirement should not use the TAN format.</para>
                  <para>All leaf <code><link linkend="element-div">&lt;div></link></code>s will have
                     their space normalized. This will be applied to the concatenation of all text()
                     descendants. This is important in transcriptions. If any amount of space exists
                     between two <code><link linkend="element-div">&lt;div></link></code>s, it is
                     assumed that there is some amount of white space between them. If a word
                     straddles <code><link linkend="element-div">&lt;div></link></code>s, there
                     should be no space between the end tag of the first <code><link
                           linkend="element-div">&lt;div></link></code> and the opening tag of the
                     next.</para>
                  <para>If two adjacent sibling <code><link linkend="element-div"
                        >&lt;div></link></code>s have some space between them, no specification is
                     made as to whether that spacing character should be interpreted as a word space
                     (U+0020 or the XML entity &amp;#x20;) or one of the other three possible
                     characters (line feed, carriage return, tab), or a combination thereof. It is
                     up to TAN-compliant processors to determine, according to the relevant
                           <code><link linkend="element-div-type">&lt;div-type></link></code> to
                     interpret the behavior. </para>
               </section>

            </section>
            <section xml:id="namespace">
               <title>Namespace</title>
               <para>XML allow users to develop vocabularies of elements as they wish. One person
                  may wish to use <code>&lt;bank></code> to refer to a financial institution,
                  another to a river. XML was designed to allow users to mix vocabularies, even when
                  those vocabularies use synonymous element names. This means that anyone using
                     <code>&lt;bank></code> as an element name must be able to specify exactly whose
                  vocabulary of <code>&lt;bank></code> is intended. Disambiguation is accomplished
                  by associating IRIs (see <xref linkend="IRIs_and_linked_data"/> below) with the
                  element names. The actual full name of an element is the joined IRI and element
                  name, e.g., <code>http://example1.com/terms/bank</code> and
                     <code>http://example2.com/terms/bank</code>. </para>
               <para>This approach to disambiguation is effective but it requires some way to
                  associate the element name with its base IRI. If only one vocabulary is in play,
                  then the base IRI can be declared to be the default
                  <emphasis>namespace</emphasis>, which means that any subsequent element should be
                  treated as being the <emphasis>local name</emphasis> of an element that is part of
                  that namespace. The namespace is much like a surname (family name) and the local
                  name, a given name of a person in that family. If a simple, small genealogical
                  tree is said to belong to the Smith family, then the name "Smith" need appear only
                  at the head, not at every person named on that tree.</para>
               <para>But just as genalogical trees that involve other families require
                  disambiguation, so too do XML files that mix vocabularies. But where a
                  genealogical tree can simply add the family names at every node, XML has opted for
                  a different mechanism, that of the <emphasis>prefix</emphasis>, a short string
                  that is associated with the namespace, and is then attached to the element name. </para>
               <para>For example, the TAN namespace is <emphasis role="bold"
                        ><code>tag:textalign.net,2015:ns</code></emphasis>. The recommended prefix
                  is <emphasis role="bold"><emphasis>tan</emphasis></emphasis>. It is customary,
                  then, when TAN elements are mixed with other elements such as TEI, to use the
                  prefix to disambiguate them, e.g., <code>&lt;tan:div></code> versus
                     <code>&lt;tei:div></code>. The fully qualified name of
                     <code>&lt;tei:div></code> is properly
                     <code>http://www.tei-c.org/ns/1.0/div</code>, whereas <code>&lt;tan:div></code>
                  is <code>tag:textalign.net,2015:ns/div</code>. </para>
               <para>Any XML element may take a special attribute (actually a pseudo-attribute,
                  since it is technically not an attribute), <code>@xmlns</code>, sometimes on its
                  own and sometimes followed by a colon and a prefix. The first case is used to
                  declare the default namespace (and therefore sidestep the need to use a prefix).
                  The second case is used to bind a namespace to a prefix. These definitions apply
                  not only to the element that contains the <code>@xmlns</code> attribute but to all
                  descendants, unless overridden. </para>
               <para>
                  <caution>
                     <para>There are no plans to change the namespace. But if, in the future
                        development of the network, it becomes clear that one or more elements must
                        be redefined in manner incompatible with previous definitions, then the
                        namespace will be changed as well. Such a change will coincide with a major
                        version update of the schemas (see <xref linkend="schemas_and_validation"
                        />).</para>
                  </caution>
               </para>
               <para>The examples and the validation files illustrate the use of the TAN namespace.
                  See especially those files pertaining to class 1 and TAN-TEI files, where the TEI
                  and TAN vocabularies mix.</para>
               <para>The TAN namespace uses a tag URN instead of an <code>http://</code> IRI for
                  several reasons: (1) http namespaces rarely resolve as a URL to anything useful;
                  (2) tag URN reinforces the lesson that the namespace is a name and not a location;
                  (3) tag URNs are naturally constructed to allow versioning (see note above); (4)
                  should the domain name <code>textalign.net</code> come under the ownership of
                  someone else, the namespace will still remain valid because it is tied to a date
                  when that domain was owned; http-prefixed namespaces are in jeopardy of being
                  rendered invalid when a domain name changes ownership.</para>
            </section>
            <section xml:id="schemas_and_validation">
               <title>Schemas and Validation</title>
               <para>XML files admit of a process called <emphasis role="italic"
                     >validation</emphasis>, which checks to see if all the declared rules have been
                  followed. These validation rules are kept in files called <emphasis role="italic"
                     >schemas</emphasis>, plain-text files that state the rules according to one of
                  the accepted schema languages. Each TAN file is validated by two types of schema
                  files, one dealing with major rules concerning structure and data type (written in
                  RELAX-NG) the other with very detailed rules (written in Schematron).</para>
               <para>Schema files are provided in major or minor updates. An update is minor if the
                  changes introduced do not render files valid under previous minor updates invalid.
                  (But new warnings might be produced.) Otherwise the update will be treated as
                  major.</para>
               <para>
                  <table frame="all">
                     <title>Locations of master schemas</title>
                     <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="2.86*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.99*"/>
                        <thead>
                           <row>
                              <entry>Schema path</entry>
                              <entry>Schema files accessed</entry>
                           </row>
                        </thead>
                        <tbody>
                           <row>
                              <entry><code>http://textalign.net/release/1/dev/schemas/</code></entry>
                              <entry>Major version 1, developmental version</entry>
                           </row>
                           <row>
                              <entry><code>http://textalign.net/release/1/schemas</code></entry>
                              <entry>Major version 1, latest minor version</entry>
                           </row>
                        </tbody>
                     </tgroup>
                  </table>
               </para>
            </section>
            <section xml:id="data_types">
               <title>Data types</title>
               <para>&lt;Stuff about data types></para>
               <para>Data types regularly used: boolean, string, integer, IRI, date, dateTime</para>
               <para>New paragraph introducing <code><link linkend="attribute-xmllang"
                        >@xml:lang</link></code> / xsd:language<note xml:id="language">
                     <title>xsd:language</title>
                     <para>TAN adopts for language identification Best Common Practices (BCP) 47,
                        which standardizes with high precision how languages are identified. For
                        most users of TAN, this will be a simple three-letter abbreviation,
                        sometimes supplemented with a hyphen and a script or regional subtag. For
                        example, <code>eng</code>, <code>eng-UK</code>, and <code>eng-UK-Cyrl</code>
                        refer, respectively, to English generally, English from the United Kingdom,
                        and English from the United Kingdom written in the Cyrillic script. As a
                        general rule, values of this type should begin with a three-letter language
                        code, preferably lowercase.</para>
                     <para>ISO codes for human languages appear in <code><link
                              linkend="attribute-xmllang">@xml:lang</link></code> and <code><link
                              linkend="element-for-lang">&lt;for-lang></link></code>. The first, an
                        attribute, indicates the principal language of the text enclosed by the
                        element and its descendants. But the second, an element, provides a way to
                        make a statement about a language. For example, <code><link
                              linkend="element-for-lang">&lt;for-lang></link></code> in the context
                        of a TAN-R-tok file indicates languages for which a tokenization rule is
                        appropriate.</para>
                     <para>More reading:<itemizedlist>
                           <listitem>
                              <para>BCP 47 <link xlink:href="http://tools.ietf.org/rfc/bcp/bcp47"
                                    >official specifications</link></para>
                           </listitem>
                           <listitem>
                              <para>BPC 47 <link
                                    xlink:href="http://www.w3.org/TR/xmlschema11-2/#language"
                                    >technical details</link></para>
                           </listitem>
                        </itemizedlist></para>
                  </note></para>
               <para>&lt;New paragraph introducing dates and times><note xml:id="date_and_datetime">
                     <title>xsd:date, xsd:dateTime</title>
                     <para>TAN adopts the standardized ISO form of dates and times, which begins
                        with the largest unit and moves to the smallest. A simple date takes this
                        form: <code>YYYY-MM-DD</code>. A time is specified by continuing the string,
                        first with a <code>T</code> (for time) then with &lt;NEEDS TO BE WRITTEN>.
                        Examples: &lt;PENDING>.</para>
                     <para>The normalized value of <code><link linkend="attribute-when"
                           >@when</link></code> that is most recent in a TAN document differentiates
                        the version of a documents that share the same IRI name (see <xref
                           linkend="tag_urn"/>).</para>
                     <para>Future dates are not allowed in TAN files. (This is checked against the
                        clock settings on individual computers.)</para>
                     <para>More reading:<itemizedlist>
                           <listitem>
                              <para>ISO dates</para>
                           </listitem>
                        </itemizedlist></para>
                  </note></para>
            </section>
            <section xml:id="IRIs_and_linked_data">
               <title>International Resource Identifiers and Linked Data</title>
               <para><emphasis role="bold">&lt;NOT YET WRITTEN></emphasis></para>
               <para>&lt;Stuff about URNs and related terms <emphasis>URI</emphasis>,
                     <emphasis>IRI</emphasis>, <emphasis>URN</emphasis>,
                  <emphasis>UUID</emphasis>></para>
               <para>The network regularly depends upon several types of legally defined
                  IRIs:</para>
               <para>
                  <itemizedlist>
                     <listitem>
                        <para>IRI generally: https://tools.ietf.org/html/rfc3986</para>
                     </listitem>
                     <listitem>
                        <para>UUID</para>
                     </listitem>
                     <listitem>
                        <para>HTTP</para>
                     </listitem>
                     <listitem>
                        <para>tag URNs: </para>
                     </listitem>
                     <listitem>
                        <para>OID</para>
                     </listitem>
                  </itemizedlist>
               </para>
               <para>&lt;xml:id can't take colons; thus the IRI for TAN files has been given another
                  attribute name, to ensure that tag URNs are always constructed validly. See
                  below.></para>
               <para><emphasis role="bold">Resource Description Framework (RDF) and Linked Open
                     Data</emphasis>. The recommended way to prepare data for the semantic web is to
                  coin and use URN names that take the form of URLs. The URL then allows one both to
                  uniquely name an object and to indicate how a human or computer can get more
                  information about it. The TAN encoding format has chosen tag URNs over URLs for
                  several reasons:</para>
               <para>
                  <itemizedlist>
                     <listitem>
                        <para><emphasis role="bold">Permanence.</emphasis> Authors of TAN data are
                           creating files that are meant to be relevant for decades and centuries in
                           the future, well after specific domain names have changed ownership or
                           fallen into obsolesence, and well after the creators are dead. To mint
                           names according to URLs is inadequate for long-term use, since it has no
                           built-in mechanism to identify who owned the domain name in question when
                           the name was minted. </para>
                     </listitem>
                     <listitem>
                        <para><emphasis role="bold">Hassle-free URN naming</emphasis>. Many
                           potential TAN authors never have owned a domain name, and never will.
                           Further, many of those who do own domain names cannot or do not wish to
                           configure and maintain servers to create the referral mechanisms upon
                           which the semantic web depends. The majority of potential TAN file
                           editors would be happy to mint names that could be later adapted for
                           semantic web applications, but would not want to take on the extra hassle
                           involved in writing and publishing more complicated data descriptions,
                           e.g., RDFa.</para>
                     </listitem>
                     <listitem>
                        <para><emphasis role="bold">Disambiguation of name and location</emphasis>.
                           In the semantic web, conflation of name with a location to resolve it is
                           considered a virtue because a single string answers two questions: what
                           is the resource and where can I find out more about it. But this
                           conflation is unhelpful for those who use the TAN formats, who are
                           encouraged to distribute their TAN files widely, and not rely upon a
                           single location. And URLs are in common parlance interpreted as locations
                           for data, not as names for things. TAN-compliant tag URLs ensure that the
                           names of concepts and objects do not look like locations, maintaining a
                           distinction that has always been a foundational principle in scholarly
                           citation, namely, that one should always distinguish the name of a
                           resource from where it might be found.</para>
                     </listitem>
                  </itemizedlist>
               </para>
               <para>TAN formats make extensive use of IRIs, kept either in <code><link
                        linkend="attribute-id">@id</link></code> or <code><link
                        linkend="element-IRI">&lt;IRI></link></code>. Values for <code><link
                        linkend="element-IRI">&lt;IRI></link></code> do not state where a source is,
                  even though some of them may look like they do. If the value looks like a web page
                  address (e.g., <code>http://...</code>), beware—it might be simply a name that
                  looks like a URL, but really isn't where you will find the source. Vice versa, any
                        <code><link linkend="element-location">&lt;location></link></code> that
                  happens fall in an IRI + name Pattern indicates only where the digital file was
                  found; it is not to be interpreted by anyone using linked open data as the name of
                  an entity. See <xref linkend="IRIs_and_linked_data"/> and <xref
                     linkend="digital_entity_metadata"/>.</para>
               <para>
                  <note>
                     <para>&lt;Internationalization behind IRIs></para>
                     <para>TAN does not constrain IRI values. Anything conforming to xsd:anyURI can
                        be used, including formulations that have not been approved by IANA. This
                        manual restricts itself to only approved URN schemes. &lt;link></para>
                     <para>IRI: http://www.ietf.org/rfc/rfc3987.txt</para>
                  </note>
               </para>
               <section xml:id="tag_urn">
                  <title>Tag URNs</title>


                  <para>TAN files make extensive use of tag URNs. In fact, TAN's namespace is
                     defined by a tag URN. A <link xlink:href="http://www.taguri.org">tag URN</link>
                     has two parts:</para>
                  <para>
                     <orderedlist>
                        <listitem>
                           <para><emphasis role="bold">Namespace.</emphasis>
                              <code>tag:</code> + an e-mail address or domain name owned by the
                              person or organization that has authorized the creation of the TAN
                              file + <code>,</code> + an arbitrary day on which that address or
                              domain name was owned. The day is expressed in the form
                                 <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or
                              <code>YYYY</code>. A missing <code>MM</code> or <code>DD</code> is
                              implicitly assigned the value of <code>01</code>.</para>
                        </listitem>
                        <listitem>
                           <para><emphasis role="bold">Name of the TAN file.</emphasis>
                              <code>:</code> + an arbitrary string (unique to the namespace chosen)
                              chosen by the namespace owner as a label for the entire file and
                              related versions. It need not be the same as the filename stored on a
                              local directory. You should pick a name that is at least somewhat
                              intelligible to human readers.</para>
                        </listitem>
                     </orderedlist>
                  </para>
                  <para>Tag URNs are required for labeling and identifying TAN files for a number of
                     reasons, foremost of which are their suitability for enduring naming schemes.
                     That is, they will remain valid centuries from now, long after the death of the
                     owner of a domain name or email address or if those accounts pass into the
                     hands of others. The TAN format requires every piece of data to be attributable
                     to someone (a person, organization, or some other agent) and tag URNs
                     facilitate that requirement in ways that other URNs cannot. Further, tag URNs
                     allow anyone to name things uniquely. You do not need to register your tag URN
                     or have a website that explains the nomenclature (a requirement, sometimes
                     daunting, in http-based IRIs for linked data).</para>
                  <para>Great care must be taken in choosing the IRI name, because you are the sole
                     guarantor of its uniqueness. <emphasis role="italic">It is permissible for
                        something to have multiple IRIs, but never acceptable for a IRI to name more
                        than one thing.</emphasis> It is a good practice to keep a master checklist
                     of IRI names you have created. If you find yourself forgetting, or think you
                     run the risk of creating duplicate IRI names, you should start afresh by
                     creating a new namespace for your tag URNs, easily done just by changing the
                     date in the tag URN namespace. That is, if
                        <code>tag:textalign.net,2015:...</code> seems to be overly cluttered, you
                     may start a new set of names with something else, e.g.,
                        <code>tag:textalign.net,2015-01-02:...</code>.</para>
                  <para>
                     <example>
                        <title>TAN IRI names</title>
                        <programlisting>tag:jan@example.com,1999-01-31:TAN-T001
tag:example.com,2001-04:hamlet-tan-t
tag:evagriusponticus.net,2014:tan-lm:Evagrius_Praktikos_grc_Guillaumonts
tag:bbrb@example.org,1995-04-01:pos-grc</programlisting>
                        <para>The first example comes from someone who owned the email address
                              <code>jan@example.com</code> on January 31, 1999 (at the stroke of
                           midnight, Universal Coordinated Time). The other examples follow a
                           similar logic. The namespace of the second and third examples are tied to
                           the owners of specific domain names, not those of email addresses. The
                              <code>2014</code> in the fourth example is shorthand for the first
                           second of January 1, 2014.</para>
                     </example>
                  </para>
                  <para>Further reading:<itemizedlist>
                        <listitem>
                           <para><link xlink:href="https://tools.ietf.org/html/rfc4151">RFC
                                 4151</link>, the official definition of tag URNs</para>
                        </listitem>
                     </itemizedlist></para>

               </section>
            </section>
            <section xml:id="regular_expressions">
               <title>Regular Expressions</title>
               <para>Regular expressions are patterns for searching text. The term <emphasis
                     role="italic">regular</emphasis> here does not mean ordinary. Rather, it means
                     <emphasis>rules</emphasis> (Latin <emphasis role="italic">regula</emphasis>),
                  and points to a rule-based syntax that provides expressive power in algorithms
                  that search and replace text. Because regular expressions come in different
                  flavors, and because the topic is rather complex, these guidelines are restricted
                  to a synopsis that conforms to the definition of regular expressions found in the
                     <link xlink:href="http://www.w3.org/TR/xslt-30/#regular-expressions"
                     >recommendation of XSLT 3.0</link> (XML Schema Datatypes plus some extensions),
                  and outlined in <link
                     xlink:href="http://www.w3.org/TR/xpath-functions-30/#regex-syntax">XPath
                     Fuctions 3.0</link>. <caution>
                     <para>XML Schema Datatypes define regular expressions differently than do Perl,
                        one of the most common forms of regular expression. For example, the pipe
                        symbol, |, is treated as a word character in XML regular expressions, but
                        the opposite is true for Perl.</para>
                  </caution></para>
               <para>A regular expression search pattern is treated just like a conventional search
                  pattern until the computer reaches a special escape character: <code>. [ ] \ | - ^
                     $ ? * + { } ( )</code>. Here is a brief key to how characters behave in regular
                  expressions, provided they are not in square brackets (on which see the
                  recommended reading below):</para>
               <para>
                  <table frame="all">
                     <title>Special characters in regular expressions</title>
                     <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="12.33*"/>
                        <thead>
                           <row>
                              <entry>Symbol</entry>
                              <entry>Meaning</entry>
                           </row>
                        </thead>
                        <tbody>
                           <row>
                              <entry>$</entry>
                              <entry>end of line</entry>
                           </row>
                           <row>
                              <entry>.</entry>
                              <entry>any character</entry>
                           </row>
                           <row>
                              <entry>|</entry>
                              <entry>or (union)</entry>
                           </row>
                           <row>
                              <entry>^</entry>
                              <entry>start of line</entry>
                           </row>
                           <row>
                              <entry>?</entry>
                              <entry>zero or one</entry>
                           </row>
                           <row>
                              <entry>*</entry>
                              <entry>zero or more</entry>
                           </row>
                           <row>
                              <entry>+</entry>
                              <entry>one or more</entry>
                           </row>
                           <row>
                              <entry>[ ]</entry>
                              <entry>a class of characters</entry>
                           </row>
                           <row>
                              <entry>( )</entry>
                              <entry>a group</entry>
                           </row>
                           <row>
                              <entry>{n}</entry>
                              <entry>n times</entry>
                           </row>
                           <row>
                              <entry>{n,m}</entry>
                              <entry>from n to m times</entry>
                           </row>
                           <row>
                              <entry>{n,}</entry>
                              <entry>n times or more</entry>
                           </row>
                           <row>
                              <entry>\w</entry>
                              <entry>any word character</entry>
                           </row>
                           <row>
                              <entry>\W</entry>
                              <entry>any nonword character</entry>
                           </row>
                           <row>
                              <entry>\s</entry>
                              <entry>any of the four standard spacing characters: space (U+0020),
                                 tab (U+0009), newline (U+000A), carriage return (U+000D)</entry>
                           </row>
                           <row>
                              <entry>\S</entry>
                              <entry>anything not a spacing character</entry>
                           </row>
                           <row>
                              <entry>\d</entry>
                              <entry>any digit (0-9)</entry>
                           </row>
                           <row>
                              <entry>\D</entry>
                              <entry>anything not a digit</entry>
                           </row>
                           <row>
                              <entry>\x{hhh..}</entry>
                              <entry>character with the Unicode code point hhh..</entry>
                           </row>
                           <row>
                              <entry>\p{IsGujarati}</entry>
                              <entry>any character from the Unicode block named Gujarati</entry>
                           </row>
                           <row>
                              <entry>\\</entry>
                              <entry>backslash (the backslash alone suggests that the next character
                                 is a special character)</entry>
                           </row>
                           <row>
                              <entry>\$</entry>
                              <entry>dollar sign</entry>
                           </row>
                           <row>
                              <entry>\(</entry>
                              <entry>opening parenthesis</entry>
                           </row>
                           <row>
                              <entry>\[</entry>
                              <entry>opening square bracket</entry>
                           </row>
                        </tbody>
                     </tgroup>
                  </table>
               </para>
               <para>Some examples:</para>
               <table frame="all">
                  <title>Examples of Regular Expressions</title>
                  <tgroup cols="3">
                     <colspec colname="newCol1" colnum="1" colwidth="1*"/>
                     <colspec colname="c1" colnum="2" colwidth="1.48*"/>
                     <colspec colname="c2" colnum="3" colwidth="6.59*"/>
                     <thead>
                        <row>
                           <entry>Expression</entry>
                           <entry>Meaning</entry>
                           <entry>What the expression matches when applied to "Wi-fi, good. A_hem*
                              isn't!"</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry><code>^.+$</code></entry>
                           <entry>one whole line of characters</entry>
                           <entry>"Wi-fi, good. A_hem* isn't!"</entry>
                        </row>
                        <row>
                           <entry><code>[ae]</code></entry>
                           <entry>a or e</entry>
                           <entry>"e"</entry>
                        </row>
                        <row>
                           <entry><code>[a-e]</code></entry>
                           <entry>a, b, c, d, or e</entry>
                           <entry>"d", "e"</entry>
                        </row>
                        <row>
                           <entry><code>[^ae]+</code></entry>
                           <entry>one or more characters that are anything except a or e</entry>
                           <entry>"Wi-fi, good. A_h", "m* isn't!"</entry>
                        </row>
                        <row>
                           <entry><code>.i</code></entry>
                           <entry>any character followed by i.</entry>
                           <entry>"Wi", "fi", " i"</entry>
                        </row>
                        <row>
                           <entry><code>(.i)</code></entry>
                           <entry>when a character followed by an i is found treat it as a capture
                              group (used only in a search pattern)</entry>
                           <entry>"Wi", "fi", " i"</entry>
                        </row>
                        <row>
                           <entry><code>$1</code></entry>
                           <entry>first capture group (used only in a replacement pattern, and
                              corresponds to the sequence of capture groups in the search
                              pattern)</entry>
                           <entry>In the example above, each match corresponds to $1</entry>
                        </row>
                        <row>
                           <entry><code>[aeiou]\w*</code></entry>
                           <entry>any lowercase vowel along with every word character that
                              follows</entry>
                           <entry>"i", "i", "ood", "em", "isn"</entry>
                        </row>
                        <row>
                           <entry><code>[t*].</code></entry>
                           <entry>any t or * and the following character</entry>
                           <entry>"* ", "t!" Note that the asterisk, if inside a character class,
                              acts as itself.</entry>
                        </row>
                        <row>
                           <entry><code>\s+</code></entry>
                           <entry>match one or more space characters</entry>
                           <entry>" ", " ", " "</entry>
                        </row>
                        <row>
                           <entry><code>\w+</code></entry>
                           <entry>match one or more word characters</entry>
                           <entry>"Wi", "fi", "good", "A_hem", "isn", "t"</entry>
                        </row>
                        <row>
                           <entry><code>\W+</code></entry>
                           <entry>match one or more nonword characters</entry>
                           <entry>"-", ", ", ". ", "* ", "'", "!"</entry>
                        </row>
                        <row>
                           <entry><code>[^q]+</code></entry>
                           <entry>one or more characters that are not a q</entry>
                           <entry>"Wi-fi, good. A_hem* isn't!"</entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
               <para>The examples above provide a taste of how regular expressions are constructed
                  and read. For further examples especially relevant to TAN see <code><link
                        linkend="element-filter">&lt;filter></link></code>.</para>
               <warning xml:id="reg_exp_and_comb_chars">
                  <title>Regular Expressions and Combining Characters</title>
                  <para>Regular expressions come in many different flavors, and each one deals with
                     some of the more complex issues in Unicode in their own manners. This ambiguity
                     will be most keenly felt in the use of combining characters in Unicode. Given a
                     string <code>&amp;#x61;&amp;#x301;&amp;#x62;</code> = áb, a search pattern
                        <code>a.</code> will in some search engines include the b and others
                     not.</para>
                  <para>Unicode has differentiated three levels of support for regular expressions
                     (see <link xlink:href="http://www.unicode.org/reports/tr18/">official
                        report</link>). Only level one conformance in TAN is guaranteed. Combining
                     characters fall in level two. If you find the need to count characters, and you
                     are working with a language that uses combining characters, you should use
                     count only base characters, not combining ones. In fact, TAN assumes that in
                     cases where characters are identified with a numeral, the numeral excludes
                     combining characters. See <xref linkend="combining_characters"/>. Further, any
                     regular expressions with wildcard characters cannot be expected to be treated
                     uniformly.</para>
               </warning>
               <para>Further reading:<itemizedlist>
                     <listitem>
                        <para>Various <link
                              xlink:href="http://www.google.com/search?q=tutorial+regular+expressions"
                              >tutorials on Regular Expressions</link></para>
                     </listitem>
                     <listitem>
                        <para>Wikipedia, <link
                              xlink:href="http://en.wikipedia.org/wiki/Regular_expression">Regular
                              Expressions</link></para>
                     </listitem>
                     <listitem>
                        <para><link xlink:href="http://www.w3.org/TR/xslt-30/#regular-expressions"
                              >Regular Expressions in XSLT 3.0</link></para>
                     </listitem>
                     <listitem>
                        <para><link xlink:href="http://www.unicode.org/reports/tr18/">Unicode and
                              Regular Expressions</link></para>
                        <para>http://www.w3.org/TR/xmlschema-2/#regexs</para>
                     </listitem>
                  </itemizedlist></para>
            </section>
            <section xml:id="xpath">
               <title>XPath</title>
               <para><emphasis role="bold">&lt;NOT YET WRITTEN></emphasis></para>
               <para>&lt;Stuff about XPath.></para>
               <para>&lt;Examples.></para>
               <para>&lt;Commonly used XPath expressions in TAN.></para>
               <para>&lt;Further reading.></para>
               <para>
                  <note>
                     <para>TAN adopts as its standard XPath 3.0.</para>
                  </note>
               </para>
            </section>
         </section>
      </chapter>
      <chapter xml:id="class_common">
         <title>Patterns and Structures Common to All TAN Encoding Formats</title>
         <section xml:id="patterns">
            <title>Common Patterns</title>
            <section xml:id="pattern-iri_and_name">
               <title>IRI + name Pattern</title>
               <para>Both humans and computers will need to read and write TAN metadata. Very often
                  what is readable to humans is unreadable to computers, and vice versa. So the TAN
                  format requires that all metadata be provided in both forms. Although this rule
                  may appear to introduce redundancy and therefore new opportunities for error, the
                  clarity is critical. It is the only way at present to ensure that anyone who
                  approaches the data--computer or human--can parse and use it. And, in reality,
                  doubly expressed metadata provides a safeguard much like a checksum: the human-
                  and computer-readable descriptions should correspond. Any discrepancy is a signal
                  that an error should be diagnosed and fixed.</para>
               <para>Some metadata, such as comments, are neither easily nor profitably translated
                  into a computer-actionable string. In such cases only the human-readable form is
                  required. Other metadata use regular expressions or ISO-compliant dates, both of
                  which are well formed and usually human-legible. In those cases the human- and
                  computer-readable components are not distinguished and duplicated. In other cases,
                  where a datum is not understandable to humans, such as a complex regular
                  expression, a <code><link linkend="element-comment">&lt;comment></link></code> may
                  be provided.</para>
               <para>Those exceptions aside, all other metadata takes what is called the <emphasis
                     role="italic">IRI + name</emphasis> pattern: one or more <code><link
                        linkend="namespace">&lt;IRI></link></code> and <code><link
                        linkend="element-name">&lt;name></link></code> and zero or more <code><link
                        linkend="element-desc">&lt;desc></link></code>s. If the thing being
                  described is a digital file, then the IRI + name pattern is part of a larger
                  pattern, the <xref linkend="digital_entity_metadata"/>.</para>
            </section>
            <section xml:id="digital_entity_metadata">
               <title>Digital Entity Metadata Pattern</title>
               <para>Some entities identified by the <xref linkend="pattern-iri_and_name"/> will be
                  digital resources. In those cases, the IRI + name Pattern is extended in two
                  different ways, according to whether the entity is a TAN file or not. </para>
               <para>If the entity is a TAN file, then <code><link linkend="namespace"
                        >&lt;IRI></link></code> (one and only one) must be a valid tag URN that
                  matches the <code><link linkend="attribute-id">@id</link></code> value of the TAN
                  file being referred to. </para>
               <para>If the entity is not a TAN file, then any IRI may be used. If you choose to use
                  the URL of where the digital resource is as its name (as well as its location; see
                  below), then it will be inferred that you mean to identify the digital resource
                  that appeared at that URL at the date or time you accessed it.</para>
               <para>In either case, the pattern adds to the IRI + name pattern one or more
                        <code><link linkend="element-location">&lt;location></link></code>s and an
                  optional <code><link linkend="element-checksum"
                  >&lt;checksum></link></code>.</para>
            </section>
            <section xml:id="edit_stamp">
               <title>Edit Stamp</title>
               <para>Most TAN elements allow for an optional edit stamp, an <code><link
                        linkend="attribute-ed-who">@ed-who</link></code> and an <code><link
                        linkend="attribute-ed-when">@ed-when</link></code>, stating who created or
                  edited the enclosed data and when. Neither attribute is allowed without the other. </para>
               <para><code><link linkend="attribute-ed-when">@ed-when</link></code>, along with
                        <code><link linkend="attribute-when">@when</link></code>, are the criterion
                  by which a TAN file's version is calculated. </para>
               <para>An edit stamp performs the same function as <code><link
                        linkend="element-change">&lt;change></link></code>, except that no
                  description can be provided and it points precisely to the element where a change
                  has been made. If a description of the alteration is necessary, <code><link
                        linkend="element-change">&lt;change></link></code> should be used.</para>
               <para><emphasis role="italic">Inheritability and dating individual
                     components</emphasis>. If an element lacks an edit stamp, it inherits the edit
                  stamp of its nearest ancestor. If no ancestor has an edit stamp, the element may
                  be assumed to be datable to the oldest date in the current file.</para>
            </section>
         </section>
         <section xml:id="structure">
            <title>Overall Structure (root)</title>
            <para>All TAN-compliant files, no matter the type or class, follow a common basic
               structure: (1) at least three processing instruction nodes, (2) a namespace node, and
               (3) a rootmost element that has only two children: <code><link linkend="element-head"
                     >&lt;head></link></code> and <code><link linkend="element-body"
                     >&lt;body></link></code> (with one exception, noted below).</para>
            <para><emphasis role="italic">Processing instruction nodes</emphasis>: The first of
               three required processing nodes is the standard declaration made in every XML file's
               prolog: <code>&lt;?xml version="1.0" encoding="UTF-8"?></code> After that come two
               more processing instruction nodes specifying the two schema files required for validation<itemizedlist>
                  <listitem>
                     <para><code>&lt;?xml-model href="[PATH]/[ROOTMOST-ELEMENT-NAME].rn[g OR c]"
                           type="application/relax-ng-compact-syntax"?></code></para>
                  </listitem>
                  <listitem>
                     <para><code>&lt;?xml-model href="[PATH]/[ROOTMOST-ELEMENT-NAME].sch"
                           type="application/xml"
                           schematypens="http://purl.oclc.org/dsdl/schematron"?></code></para>
                  </listitem>
               </itemizedlist></para>
            <para>The first processing instruction node points to the RELAX-NG schema that declares
               the major rules that hold over a TAN format. The second points to the finely tuned
               rules, written in Schematron. Both processing instructions are required.
                  <code>[PATH]</code> represents the pathname to the schema file, whether local or
               in the master location (see <xref linkend="schemas_and_validation"/>) and
                  <code>[ROOTMOST-ELEMENT-NAME]</code> stands for the name of the rootmost element.
               It is your choice whether you wish to use <code>.rnc</code> or <code>.rng</code> as
               the extension for the RELAX-NG schema. The former is the compact syntax and the
               latter, the XML format. They should work equally well.</para>
            <para>Some TAN formats govern files that are so long or complicated, that editing with
               strict, full validation can be a chore. And editing the files may require quick,
               contextual help. In those cases, especially with <link linkend="tan-a-div"
                  >TAN-A-div</link> files, a lightweight editing Schematron file is also available,
               e.g., <code>&lt;?xml-model href="../../schemas/TAN-A-div-edit.sch"
                  type="application/xml"
                  schematypens="http://purl.oclc.org/dsdl/schematron"?></code>.</para>
            <para>Master files are housed at the TAN website, and these files may be cached, saved,
               served, and used anywhere. You may customize the prolog by adding other processing
               instruction nodes, but do so at your own risk: conflicts may result.<note>
                  <para>The one semi-exception is the TAN-TEI format, which has at its core a
                     special format developed by the TEI for customization called ODD ("One Document
                     Does" it all; for details see <xref linkend="tan-tei"/>). TAN uses an ODD file
                     that constrains the latest version of TEI All to the requirements of the TAN-T
                     format.</para>
                  <para>Under the license under which materials are released, these schema files may
                     be freely modified and reused. Bear in mind that any alterations run the risk
                     of producing files that are not interoperable with TAN-compliant files.</para>
               </note></para>
            <para><emphasis role="italic">Namespace node</emphasis>: All TAN elements take the
               namespace <code>tag:textalign.net,2015:ns</code>. In most cases, this value is placed
               in the rootmost element. (The only exception are TAN-TEI transcription files, which
               take as a default namespace <code>http://www.tei-c.org/ns/1.0</code> everywhere but
               in <code>/TEI/head</code>, which takes the TAN namespace.) For more about namespaces,
               see <xref linkend="namespace"/>.</para>
            <para><emphasis role="italic">Rootmost element</emphasis>: The name of the rootmost
               element identifies the type of TAN file:<table frame="all">
                  <title>Rootmost TAN elements</title>
                  <tgroup cols="3">
                     <colspec colname="c1" colnum="1" colwidth="1.19*"/>
                     <colspec colname="c2" colnum="2" colwidth="1.19*"/>
                     <colspec colname="newCol3" colnum="3" colwidth="1*"/>
                     <thead>
                        <row>
                           <entry>Rootmost element name</entry>
                           <entry>Type of data</entry>
                           <entry>TAN class</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry><code><link linkend="element-TAN-T"
                              >&lt;TAN-T></link></code></entry>
                           <entry>plain text transcriptions</entry>
                           <entry><link linkend="class_1">1</link></entry>
                        </row>
                        <row>
                           <entry><code>&lt;TEI></code></entry>
                           <entry>TEI transcriptions</entry>
                           <entry><link linkend="class_1">1</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-A-tok"
                                 >&lt;TAN-A-tok></link></code></entry>
                           <entry>token-based alignments</entry>
                           <entry><link linkend="class_2">2</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-A-div"
                                 >&lt;TAN-A-div></link></code></entry>
                           <entry>division-based alignments</entry>
                           <entry><link linkend="class_2">2</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-LM"
                              >&lt;TAN-LM></link></code></entry>
                           <entry>lexico-morphological analysis</entry>
                           <entry><link linkend="class_2">2</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-R-mor"
                                 >&lt;TAN-R-mor></link></code></entry>
                           <entry>part of speech / morphology patterns</entry>
                           <entry><link linkend="class_3">3</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-R-tok"
                                 >&lt;TAN-R-tok></link></code></entry>
                           <entry>tokenization patterns</entry>
                           <entry><link linkend="class_3">3</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-key"
                              >&lt;TAN-key></link></code></entry>
                           <entry>glossaries</entry>
                           <entry><link linkend="class_4">4</link></entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-TAN-rdf"
                              >&lt;TAN-rdf></link></code></entry>
                           <entry>claims</entry>
                           <entry><link linkend="class_4">4</link></entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table></para>
            <para>Each rootmost element takes a mandatory <code><link linkend="attribute-id"
                     >@id</link></code> and <code><link linkend="attribute-TAN-version"
                     >@TAN-version</link></code>. </para>
            <para>The rootmost element takes only two children: <code><link linkend="element-head"
                     >&lt;head></link></code> and <code><link linkend="element-body"
                     >&lt;body></link></code>, the latter containing data and the former, metadata
               (data about the data). The only exception to this rule are TAN-TEI files, which take
               three children: <code>&lt;teiHeader></code>, <code><link linkend="element-head"
                     >&lt;head></link></code>, and <code>&lt;text></code>. See <xref
                  linkend="tan-tei"/>.</para>
            <section xml:id="iri_name">
               <title><code><link linkend="attribute-id">@id</link></code> and a TAN file's IRI
                  Name</title>
               <para>Every TAN file requires in the rootmost element <code><link
                        linkend="attribute-id">@id</link></code>. Its value, termed the TAN file's
                     <emphasis>IRI name</emphasis>, must take the form of a tag URN (see <xref
                     linkend="tag_urn"/> for syntax). The IRI name of a file, which is valid
                  independent of wherever it may be found, is the primary way other TAN files will
                  refer to it. </para>
               <para>The namespace of the current file's IRI name must match at least one namespace
                  in one <code><link linkend="element-agent">&lt;agent></link></code>'s <code><link
                        linkend="element-IRI">&lt;IRI></link></code> value. This helps to tie the
                  ownership of the TAN file to at least one person. </para>
               <para>In choosing a value of <code><link linkend="attribute-id">@id</link></code> you
                  might borrow the filename (the name one sees when one lists files in a directory),
                  but you do not have to. Indeed, it may not be a good idea, since files are
                  frequently renamed, often with good reason. A TAN file's IRI name should rarely if
                  ever change, especially after publication, because others will be refering to it
                  by its IRI name. </para>
               <para>On occasion during editing, it will become clear that revisions are so thorough
                  that the file is quite different than how it began. Coining a new IRI name is then
                  advised, to dissociate the file with previous versions. </para>
               <para>If you take someone else's data and alter it then you should <emphasis
                     role="italic">not</emphasis> change the namespace of the IRI name. To avoid
                  suggesting that the owner of that namespace is responsible for the revised file,
                  you should add yourself as an <link linkend="element-agent"
                        ><code>&lt;agent></code></link> and then document your alterations through
                     <link linkend="element-change"><code>&lt;change></code></link> or <link
                     linkend="attribute-ed-when"><code>@ed-when</code></link> and <link
                     linkend="attribute-ed-who"><code>@ed-who</code></link>. In these cases, you
                  should supply a <code><link linkend="element-see-also">&lt;see-also></link></code>
                  element in the <code><link linkend="element-head">&lt;head></link></code>
                  indicating that you are providing an alternative or new edition. </para>
               <para>The IRI name points to an edition but not a version. The specific version of a
                  TAN file is identified by the latest date documented in a file's <code><link
                        linkend="attribute-when">@when</link></code> or <code><link
                        linkend="attribute-ed-when">@ed-when</link></code>. It is important,
                  therefore, whenever you change a TAN file that has already been published to
                  provide at least an edit stamp (<xref linkend="edit_stamp"/>) in the part of the
                  file you changed or in a <code><link linkend="element-comment"
                     >&lt;comment></link></code> or <code><link linkend="element-change"
                        >&lt;change></link></code>. In so doing, when anyone editing a TAN file
                  dependent upon yours validates their file, they will get a warning that changes
                  have been made. The user may then either continue to process the file (if the
                  changes are minor, there may be no problem) or investigate the changes before
                  deciding what to do. </para>
               <para>Because the entire IRI name is a single string, it is suitable for encoding
                  formats outside of TAN (e.g., RDFa, JSON-LD, linked open data; see <xref
                     linkend="IRIs_and_linked_data"/>).</para>
               <para>The IRI name kept at <code><link linkend="attribute-id">@id</link></code> is
                  the only metadatum positioned outside <code><link linkend="element-head"
                        >&lt;head></link></code>. It is placed as rootward in the document as
                  possible to emphasize that it names the entire document tree.</para>
               <para><code><link linkend="attribute-TAN-version">@TAN-version</link></code> must be
                  the digit <code>1</code>, indicating the major version, optionally followed by the
                  minor version number. If the minor version is missing, the latest version is
                  assumed. These version numbers must match the schemas invoked in the prolog or the
                  file will be rendered invalid. For versions of schemas, see <xref
                     linkend="schemas_and_validation"/>.</para>
            </section>
         </section>
         <section xml:id="metadata_head">
            <title>Metadata (<code><link linkend="element-head">&lt;head></link></code>)</title>
            <para>No matter how much one TAN format differs from another, the metadata are quite
               similar. Anyone getting a TAN file, no matter its class or type, is assumed to want
               to know, and therefore find easily and predictably, the following:<orderedlist>
                  <listitem>
                     <para>the name;</para>
                  </listitem>
                  <listitem>
                     <para>the version;</para>
                  </listitem>
                  <listitem>
                     <para>the sources;</para>
                  </listitem>
                  <listitem>
                     <para>other files upon which it depends or otherwise have an important
                        relationship;</para>
                  </listitem>
                  <listitem>
                     <para>the most significant parts of the editorial history;</para>
                  </listitem>
                  <listitem>
                     <para>the linguistic or scholarly conventions that have been adopted in
                        creating the data;</para>
                  </listitem>
                  <listitem>
                     <para>the license, i.e., who holds what rights to the data, and what kind of
                        reuse is allowed.</para>
                  </listitem>
                  <listitem>
                     <para>the persons, organizations, or entities that helped create the data, and
                        the roles played by each.</para>
                  </listitem>
               </orderedlist></para>
            <para>To answer these questions completely, consistently, and predictably the
                     <code><link linkend="element-head">&lt;head></link></code>, a mandatory child
               of the rootmost element, takes a common pattern across <emphasis>all</emphasis> TAN
               formats, thus allowing anyone (people or computers) to work easily and predictably
               across large numbers and types of TAN files. The TAN <code><link
                     linkend="element-head">&lt;head></link></code>, intended to be concise and
               focused, compels you to provide metadata for the data that is governed by <code><link
                     linkend="element-body">&lt;body></link></code>, but it does not accommodate
               metadata for the metadata. That is, your metadata should focus on the data itself and
               not other things. For example, <code><link linkend="element-head"
                  >&lt;head></link></code> requires you name the people who helped create or edit
               the data, but you are not expected to give those person's birthdays, nationality,
               etc. You merely refer through <code><link linkend="element-IRI"
                  >&lt;IRI></link></code> to other authoritative sources that can provide more
               information about that person.</para>
            <para>A detailed description of <code><link linkend="element-head"
                  >&lt;head></link></code> is provided in the list of elements and attributes below,
               but what follows is a summary description, to give a general orientation to TAN
               users. </para>
            <para>To describe the current file, <code><link linkend="element-head"
                  >&lt;head></link></code> takes one or more <code><link linkend="element-name"
                     >&lt;name></link></code>s, zero or more <code><link linkend="element-desc"
                     >&lt;desc></link></code>s and <code><link linkend="element-master-location"
                     >&lt;master-location></link></code>s, and one <code><link
                     linkend="element-rights-excluding-sources"
                  >&lt;rights-excluding-sources></link></code>.</para>
            <para>Next come a list of file dependencies: zero or more <code><link
                     linkend="element-inclusion">&lt;inclusion></link></code>s, zero or more
                     <code><link linkend="element-key">&lt;key></link></code>s, zero or more
                     <code><link linkend="element-source">&lt;source></link></code>s, and zero or
               more <code><link linkend="element-see-also">&lt;see-also></link></code>s.</para>
            <para>All editorial assumptions are placed in <code><link linkend="element-declarations"
                     >&lt;declarations></link></code>, whose contents differ from one TAN format to
               the next.</para>
            <para>Finally comes the section that states who did what when: one or more <code><link
                     linkend="element-agent">&lt;agent></link></code>s, <code><link
                     linkend="element-role">&lt;role></link></code>s, and <code><link
                     linkend="element-change">&lt;change></link></code>s, and zero or more
                     <code><link linkend="element-agentrole">&lt;agentrole></link></code>s.</para>
            <para>Detailed descriptions about these elemnets are found in the links above. The rest
               of this section deals with broader metadata issues.</para>
            <section xml:id="license">
               <title>Rights and Licenses</title>
               <para>Two TAN elements cover rights and licenses: <code><link
                        linkend="element-rights-excluding-sources"
                        >&lt;rights-excluding-sources></link></code> (mandatory in every TAN file)
                  and <code><link linkend="element-rights-source-only"
                        >&lt;rights-source-only></link></code> (optional, and never allowed in class
                  2 files, because the rights statements are always found in the source TAN files).
                  The first element covers the work that you are doing in a given TAN file. The
                  second pertains to the rights for your sources. The distinction is important, and
                  helpful. It is much easier for you to decide and state the rights and license
                  behind your own work than it is to interpret others'. Declaring the who holds what
                  rights over your source(s) may not only be difficult but be risky, and is
                  therefore optional (see below).</para>
               <para>As an editor, you are strongly encouraged in the <code><link
                        linkend="element-desc">&lt;desc></link></code> element of <code><link
                        linkend="element-rights-excluding-sources"
                        >&lt;rights-excluding-sources></link></code> to emphasize the distinction
                  between the rights you have over your data and the rights held by others over your
                  source. A statement something like this is recommended: <code><link
                        linkend="element-desc">&lt;desc></link>The data in this file, only insofar
                     as it constitutes an independent work, is licensed exclusive of any licenses
                     held by parties over the source or sources listed
                  below.&lt;/desc></code></para>
               <para>If as a TAN file user you find a discrepancy between the two licenses--that of
                  a TAN file and that of its sources--the more restrictive license should be
                  respected. In working with a TAN file, it is your responsibility to investigate
                  the entire chain of rights. If a TAN file has a very liberal, open license for the
                  data, this does not necessarily mean that the material upon which it depends is in
                  the public domain. The TAN file's source may be under tightly regulated
                  rights.</para>
               <para>It is recommended that you not declare who own what rights over your source
                  unless you yourself are the rightsholder or unless you can make this assertion
                  with certainty. Copyright laws differ from one country to another, and they
                  change. A source may be protected by copyright in one place and simultaneously be
                  in the public domain in another. (At the time of this writing, dozens of scholarly
                  editions of ancient texts are in the public domain in Germany, where copyright of
                  a new edition lasts forty years, but not in the U.S. or Canada.) Some copyright
                  statements in books are false, or cannot be proven. Some persons or entities who
                  claim rights over a source may have no legal basis for the claim, at least in some
                  jurisdictions. Furthermore, if you mischaracterize the rights that are held over a
                  source, you may be held liable by a putative rights holder. It is safer to use the
                        <code><link linkend="element-IRI">&lt;IRI></link></code> of <code><link
                        linkend="element-source">&lt;source></link></code> (described below) to
                  point the user to authorities that have greater authority and specificity about
                  who owns what rights. </para>
               <para>TAN adopts the Creative Commons licenses as its default key vocabulary. See
                  &lt;XREF PENDING>.</para>
               <para>
                  <note xml:id="copyright_vs_contract">
                     <title>Copyright Law versus Contract Law</title>
                     <para>Some third-party services, such as the Thesaurus Linguae Graecae for
                        Greek texts, require users to agree not to copy and reuse the texts in
                        service's databases. Such agreements fall under the area of contract law and
                        not copyright law. That is, these third parties are most often not the
                        putative rights holder for the texts they store, therefore, they should
                        normally not be credited in any <code><link
                              linkend="element-rights-source-only"
                           >&lt;rights-source-only></link></code>.</para>
                  </note>
               </para>
            </section>
            <section xml:id="inclusions">
               <title>Inclusions</title>
               <para>Many if not most TAN files are created alongside or in close connection with
                  other files that are shared by a single project or provider. Many of these related
                  files will repeat information found in the others. Such repetition opens up the
                  possibility of discrepancies in the course of editing. To avoid duplication and to
                  minimize the problems inherent in incomplete editing, TAN has an inclusion feature
                  that may differ from inclusion patterns you are familiar with.</para>
               <para>When one TAN file includes another, it never includes the entire file, only
                  certain elements. Further, TAN inclusion is a two-step process. The first step
                  involves collecting TAN files that are available for inclusion. This is doen with
                  one or more <code><link linkend="element-inclusion">&lt;inclusion></link></code>,
                  inside <link linkend="element-head"><code>&lt;head></code></link>. An <code><link
                        linkend="element-inclusion">&lt;inclusion></link></code> does nothing on its
                  own. It merely indicates a file that may be used for patterned inclusions. </para>
               <para>The second step is in various parts the including TAN file, where <code><link
                        linkend="attribute-include">@include</link></code> may be placed in an empty
                  element to point to the <code><link linkend="attribute-xmlid"
                     >@xml:id</link></code> of an <code><link linkend="element-inclusion"
                        >&lt;inclusion></link></code>. This effectively tells every TAN-compliant
                  processor to retrieve every element of that type from the file indicated by the
                        <code><link linkend="element-inclusion">&lt;inclusion></link></code> and
                  insert it in that place in the host file, after eliminating duplications.</para>
               <para><code><link linkend="element-inclusion">&lt;inclusion></link></code>s are very
                  important, as important as <code><link linkend="element-source"
                     >&lt;source></link></code>s (see below). If an <code><link
                        linkend="element-inclusion">&lt;inclusion></link></code> cannot be located,
                  it will be treated as a fatal error during validation. Because of the importance
                  of access to included files, it is strongly recommended that inclusions be limited
                  to a specific collection. It is advisable to use for inclusions only those files
                  that you yourself control.</para>
               <para>Inclusions are recursive. For a file A with an element <code>&lt;x
                     include='B'></code> a processor will include every <code>&lt;x></code> found in
                  file B, along with any other inclusions for that element (i.e., if file B has
                     <code>&lt;x include='C D E'></code> then the same algorithm will be applied to
                  every <code>&lt;x></code> in C, D, and E). It is perfectly legal for two files to
                  use each other as inclusions for different elements, but not for the same element,
                  since it would entail circular inclusions. </para>
               <para>In fact, in a collection that relies upon inclusions, it is a good strategy to
                  distinguish between inclusions in the <code><link linkend="element-head"
                        >&lt;head></link></code> and those in the <code><link linkend="element-body"
                        >&lt;body></link></code>, and to ensure that inclusion elements pertain to
                  only one or the other. One file might be used as the principal place for metadata
                  related to the project, and given a special filename to easily distinguish it
                  (perhaps by putting the file in all caps). All other files might point to it for
                  their metadata, primarily for suitable <code><link linkend="element-head"
                        >&lt;head></link></code> inclusions (especially useful for <link
                     linkend="element-head"><code>&lt;agent></code></link>, <link
                     linkend="element-role"><code>&lt;role></code></link>, and <link
                     linkend="element-rights-source-only"
                     ><code>&lt;rights-source-only></code></link>, where the same information tends
                  to repeat in a project's files). In turn, that key metadata file might draw from
                  other dependent files for its body.</para>
            </section>
            <section xml:id="source_and_see-also">
               <title>Distinguishing <code><link linkend="element-source">&lt;source></link></code>s
                  and <code><link linkend="element-see-also">&lt;see-also></link></code>s</title>
               <para>Creating and editing a TAN file almost always involves working with previous
                  digital files. There will be times where it is unclear whether to credit those
                  files as <code><link linkend="element-source">&lt;source></link></code>s or as
                        <code><link linkend="element-see-also">&lt;see-also></link></code>, and if
                  the latter, what type.</para>
               <para>To answer this, first determine a TAN file's <code><link
                        linkend="element-source">&lt;source></link></code>s. Everything else is then
                  a <code><link linkend="element-see-also">&lt;see-also></link></code>. </para>
               <para>For class 2 TAN files, this is rather clear: only other class 1 TAN files are
                  sources. But the situation can get nebulous with class 1 files, which are
                  representations of textual objects. For a TAN file, the <code><link
                        linkend="element-source">&lt;source></link></code> might start off as a
                  digital transcription, but as editing proceeds, you find that changes are being
                  made to go back earlier, to the source of your source. It is almost always better
                  to go up the chain of dependence until you find the earliest version that still
                  meets your needs. Make that your <code><link linkend="element-source"
                        >&lt;source></link></code>. You can then make the third-party digital
                  transcription that helped in this process a <code><link linkend="element-see-also"
                        >&lt;see-also></link></code>. In crediting the third party, you do not
                  assign them any rights. But beware, lest any agreement you have made puts you in
                  violation of contract law (see <xref linkend="license"/>).</para>
               <para>The question about legitimate sources is more difficult for class 3 files,
                  which represent rather abstract entities: grammars and tokenization patterns. Most
                  times, there are no sources, or they represent the author's synthesis of a variety
                  of sources. For this reason <code><link linkend="element-source"
                        >&lt;source></link></code> is optional in those files.</para>
               <para>Having determined the <code><link linkend="element-source"
                     >&lt;source></link></code>s, you may credit each <code><link
                        linkend="element-see-also">&lt;see-also></link></code>s, as you see fit.
                  whose character is specified by <code><link linkend="element-relationship"
                        >&lt;relationship></link></code>, either through a reserved keyword or an
                     <link linkend="pattern-iri_and_name">IRI + name pattern</link>.</para>
            </section>
            <section xml:id="inheritable_attributes">
               <title>Inheritable attributes</title>
               <para>For all TAN formats, <code><link linkend="element-body">&lt;body></link></code>
                  and its descendants may take attributes whose values are defined in <code><link
                        linkend="element-head">&lt;head></link></code>. This special class of
                  attributes are termed <emphasis role="italic">inheritable attributes</emphasis>.
                  Each descendant of <code><link linkend="element-body">&lt;body></link></code>
                  takes the value of the attribute found in the closest ancestor, if not present in
                  the element itself. </para>
               <para>Each TAN format has been designed to limit inheritable attributes to the most
                  critical concepts for the field of inquiry covered by that format. From the
                  perspective of computability, there is no reason to restrict the number of
                  inheritable attributes; from a human perspective there is, because each new
                  inheritable attribute introduces a new parameter that has the potential to
                  exponentially increase file complexity.</para>
               <para>Every inheritable attribute is asserted without qualification. That is, if a
                  inheritable attribute occurs alongside or under <code><link
                        linkend="attribute-cert">@cert</link></code>, the latter casts doubt on the
                  data, not the qualifying attributes. Put another way, the combination of
                        <code><link linkend="attribute-cert">@cert</link></code> and a inheritable
                  attribute <code>@x</code> are to be interpreted to mean: "Assuming <code>@x</code>
                  to be true, I have <code><link linkend="attribute-cert">@cert</link></code>
                  confidence about the following data:...."</para>
               <para>TAN inheritable attributes are <code><link linkend="attribute-ed-who"
                        >@ed-who</link></code>, <code><link linkend="attribute-reuse-type"
                        >@reuse-type</link></code>, <code><link linkend="attribute-bitext-relation"
                        >@bitext-relation</link></code>, <code><link linkend="attribute-lexicon"
                        >@lexicon</link></code>, <code><link linkend="attribute-morphology"
                        >@morphology</link></code>, <code><link linkend="attribute-cert"
                        >@cert</link></code>, <code><link linkend="attribute-strength"
                        >@strength</link></code>.</para>
            </section>
         </section>
         <xi:include href="inclusions/TAN-core.xml"/>
      </chapter>
      <chapter xml:id="class_1">
         <title>Class-1 TAN Files, Representations of Textual Objects</title>
         <para>Class 1 TAN files preserve segmented representations of textual objects. This class
            consists solely of transcriptions, the foundation of any TAN-compliant project. No class
            2 files (e.g., alignment, morphology) can be created without class 1 files. </para>
         <para>Transcriptions come in two different formats, identified by the rootmost element.
                  <code><link linkend="element-TAN-T">&lt;TAN-T></link></code> is a simple, generic
            format, as close as one can get to plain text. <code>&lt;TEI></code> (also referred to
            in this manual as TAN-TEI), on the other hand, is highly expressive. Because the two
            types function almost identically, the generic TAN-T format is described first, followed
            by a supplementary discussion pertaining to TAN-TEI.</para>
         <section xml:id="transcription_principles">
            <title>Principles and Assumptions</title>
            <section>
               <title>General</title>
               <para>To maximize the utility of transcriptions within the TAN ecosystem, certain
                  assumptions and recommendations are made regarding transcriptions, complementing
                  the more general ones (see <xref linkend="design_principles"/>).</para>
               <para>First, TAN transcription files are restricted exclusively to the creation of an
                  accurate digital representation of a single version of a single work, correctly
                  segmented and labeled and coming from only one source, a text-bearing object.
                  Editors of TAN-T or TAN-TEI files should be able to read, write, and proofread
                  texts in the languages of the sources. They should understand the texts well
                  enough to segment them and label them according to the conventions used for those
                  works. They should be familiar with normalizing conventions for texts from the
                  period, language, and culture. They should have some familiarity with how users of
                  the text will distinguish and count words.</para>
               <para>Editors need not understand everything about their texts, and they need not
                  have any specialized skill in grammar or lexicology. They need not know the
                  morphology of individual words, or how individual parts of the text have been
                  translated. Those skills are reserved for other core TAN formats. </para>
               <para>TAN-T(EI) editors stand at the beginning of a larger workflow for text
                  alignment. It is critical that work not be published hastily, and only after
                  careful proofreading, especially of white-space. Many transcriptions, especially
                  those of long texts, have typographical errors. Eliminating as many as possible
                  before publication will maximize the utility of a TAN-T(EI) file.</para>
               <para>If you are creating a TAN-T(EI) file, you are doing so primarily to service
                  text alignment. To align is to correlate passages of text that attest to acts of
                  text reuse, e.g., translating, paraphrasing, revising, quoting, and summarizing.
                  Common to all these processes is that one or more texts, usually called the
                     <emphasis>source</emphasis> (or <emphasis>sources</emphasis>), serves as the
                  basis for a new text, oftentimes called the <emphasis>target</emphasis>. The
                  target may bear little resemblance to its sources. Translators, whether working
                  literally or freely, move from idea to idea, clause to clause, sentence to
                  sentence, and word to word. Line and page breaks in a source usually leave
                  negligible if any trace in the target. Therefore a TAN transcription file should
                  not try to reflect the appearance of its source (i.e., it should not be a
                  diplomatic edition), and it should be structured, when possible, by the most
                  familiar reference system for that work. If possible, semantic mileposts (clauses,
                  sentences, paragraphs, chapters) not visual (lines, columns, pages, volumes)
                  should be preferred (see below on <link linkend="reference_system">reference
                     systems</link>).</para>
               <para>Contributors and users of TAN files also assume a fundamental distinction
                  between a textual object (or a text-bearing object) and a conceptual work. The
                  former has materiality and the latter does not. Even though both are
                  constitutively necessary for any transcription, the two are sharply differentiated
                  in the TAN format. For example, when we refer in ordinary conversation to the
                     <emphasis>Odyssey</emphasis> we refer to an ideal, conceptual, or model
                  narrative/poem but not to a particular copy, version, or edition. On the other
                  hand, if we encounter a book with <emphasis>The Odyssey</emphasis> on the cover,
                  we do not necessarily assume that it matches the ideal concept of the
                     <emphasis>Odyssey</emphasis>. It might contain only parts of it, or it might
                  include other works, or it might be a very loose rendition. In ordinary
                  conversation, we usually indicate whether our use of "Odyssey" refers to the work
                  or to a specific copy.</para>
            </section>
            <section xml:id="domain_model">
               <title>Domain model</title>
               <para>The categories used to describe parts of class 1 files may remind some readers
                  of the domain model defined by the Functional Requirements for Bibliographical
                  Records (FRBR), which identifies four types of entities for what they call Group 1
                  (Products of intellectual &amp; artistic endeavor): <emphasis>Work</emphasis>,
                     <emphasis>Expression</emphasis>, <emphasis>Manifestation</emphasis>, and
                     <emphasis>Item</emphasis>, the first pair being conceptual, non-material
                  entities and the latter pair material ones. </para>
               <para>The TAN encoding format currently does not have a published domain model, but
                  if it did, it would reveal a slightly different perspective. FRBR Items are
                  equivalent to what TAN calls <emphasis>objects</emphasis> (a term chosen to
                  emphasize their materiality). Multiple objects that for all intents and purposes
                  are indistinguishable (i.e., items reproduced mechanically) are equivalent to FRBR
                  Manifestations, but in TAN no separate entity has been defined. It is best to
                  think of TAN objects as being equivalent to FRBR Items, with FRBR Manifestations
                  being sets of indistinguishable TAN objects. </para>
               <para>As for conceptual entities, TAN has been designed with the assumption that most
                  users will find the distinction between Works and Expressions to be unhelpful or
                  false. What one person calls a FRBR Expression another may legitimately call a
                  Work. TAN assumes that any derivation of a Work (or Works) is itself a Work, which
                  is really shorthand for <emphasis role="italic">work-version</emphasis>. Thus, in
                  this manual the term <emphasis>version</emphasis> indicates not an entity separate
                  from a work, but rather a work that is known either to derive from another work or
                  to be the basis for other versions of a work. </para>
               <para>TAN avoids altogether the term <emphasis>Expression</emphasis>, which implies a
                  medium, without which nothing can be expressed, and therefore materiality. </para>
            </section>
            <section>
               <title>One version, one work, one object, one reference system</title>
               <para><emphasis>Every TAN-T(EI) file must be restricted to a transcription of a
                     single version of a single conceptual work found on a single text-bearing
                     object, segmented and labeled according to a single reference
                  system</emphasis>. </para>
               <para>This restrictive principle is critical to the the success of the network. It
                  reduces the risk of confusion, simplifies the files, and shifts markup complexity
                  from an individual transcription file to the network in which that file
                  participates.</para>
               <section xml:id="textual_objects">
                  <title>One textual object</title>
                  <para>Each TAN-T(EI) file transcribes one and only one text-bearing, or textual,
                     object. It may be a digital file or a particular book, manuscript, stone,
                     label, and so forth. If the object you've chosen has been made mechanically and
                     is virtually indistinguishable from other objects created in the same process
                     (e.g., copies of a printed book or copies of a digital file), then the entire
                     set of copies is to be treated as a single object (an entity some librarians
                     call a manifestation). </para>
                  <para>Some cases about what constitutes an object will not be clear, and will
                     require discernment and judgment on your part. For example, some manuscripts
                     have been split up, their parts now residing in multiple libraries around the
                     world; other manuscripts have been physically altered or supplemented. In such
                     cases, you may need to define your single text-bearing object in a way that
                     might not match the way others define it. But the decision is your prerogative,
                     not theirs. You have both the right and responsibility to define your object in
                     the way that you think will most benefit users of your files.</para>
                  <para>It is a good idea, when naming your textual object in <code><link
                           linkend="element-source">&lt;source></link></code>, with an <code><link
                           linkend="element-IRI">&lt;IRI></link></code> value the form of an
                        <code>http</code> URL provided by a library catalogue. This way you provide
                     a way for human or computers to retrieve extensive, structured bibliographical
                     information. You also save yourself the hassle of writing a detailed
                     bibliographical description that your users would have to tailor for inclusion
                     into their reference management system. If a URL cannot be found for
                           <code><link linkend="element-IRI">&lt;IRI></link></code> (perhaps the
                     text-bearing object is a papyrus or a T-shirt), you may simply coin a tag URN
                     or a UUID. Alternatively, if you find another TAN file that uses the same
                     source, it would be a good idea to adopt that name.</para>
                  <para>For other suggestions on values of <code><link linkend="element-IRI"
                           >&lt;IRI></link></code>, see <link xlink:href="iris.xml"
                     >IRIs.xml</link>.</para>
               </section>
               <section xml:id="conceptual_works">
                  <title>One work</title>
                  <para>The transcription must be restricted to a single creative work, identified
                     by <code><link linkend="element-work">&lt;work></link></code> n the <code><link
                           linkend="element-declarations">&lt;declarations></link></code>. </para>
                  <para>A textual object is likely to have more than one work within it. Identifying
                     and defining the creative work you transcribe is, once again, your prerogative.
                     Suppose the text-bearing object you have is a Bible. The work you choose from
                     that object can take whatever contours you wish. Perhaps you wish to encode the
                     entire Bible and treat it as a single work. Or maybe you wish to treat only the
                     New Testament as the work, or the Tetraevengelion, or the Gospel of Matthew, or
                     a specific episode in that gospel, or simply the Beatitudes. </para>
                  <para>Any reasonable definition of a work is permitted, but a TAN-T(EI) file must
                     contain nothing but that work. It should be a complete representation of what
                     is found on the object, and preserve the order found in the text-bearing
                     object.</para>
                  <para>Well-known works may have a suitable IRI name already assigned to them. See
                        <link xlink:href="iris.xml"/> for suggestions on vocabularies. Most works
                     have not been assigned IRIs or are named in IRI vocabularies that are not well
                     known. You may assign any work your own URN, through a UUID or a tag URN. Any
                     IRIs that you mint are free to be used by other people writing TAN files about
                     the same work. Similarly, if you find that another TAN-T file has transcribed a
                     version of your work, you may also use that URN (you don't need to ask
                     permission, since no URN can be copyrighted). As with other parts of the
                     metadata, multiple <code><link linkend="element-IRI">&lt;IRI></link></code>s
                     and <code><link linkend="element-name">&lt;name></link></code>s are names for
                     the same work, not individual names for different works. </para>
                  <para>For suggestions on values of <code><link linkend="element-IRI"
                           >&lt;IRI></link></code>, see <link xlink:href="iris.xml"
                     >IRIs.xml</link>.</para>
               </section>
               <section xml:id="work-versions">
                  <title>One version</title>
                  <para>The transcription must be restricted to a single version of the creative
                     work, identified by <code><link linkend="element-version"
                        >&lt;version></link></code> in the <code><link
                           linkend="element-declarations">&lt;declarations></link></code>.
                     (Unnecessary if the object has only one version of the work.) Other versions
                     should have their own separate TAN-T(EI) files. If you wish to work a
                     transcription that is a critical edition or a collation of multiple versions of
                     a text then it is best to prepare and publish separately a print or digital
                     edition of that edition. That new edition can then be treated as the single
                     version for your TAN-T file.</para>
                  <para>In most cases, <code><link linkend="element-version"
                        >&lt;version></link></code> is unnecessary, because <code><link
                           linkend="element-work">&lt;work></link></code> in conjunction with
                           <code><link linkend="element-source">&lt;source></link></code> are
                     sufficient to identify a particular work-version. But if the source carries
                     multiple versions (e.g., a bilingual edition of a text), then <code><link
                           linkend="element-version">&lt;version></link></code> must be
                     included.</para>
                  <para>If you need to specify exactly where on a text-bearing object a version
                     appears, <code><link linkend="element-desc">&lt;desc></link></code> or
                           <code><link linkend="element-comment">&lt;comment></link></code> should
                     be used.</para>
                  <para>Very few work-versions have their own URN names. It is advisable to assign a
                     tag URN or a UUID. If you have used an IRI for <code><link
                           linkend="element-work">&lt;work></link></code> that you are entitled to
                     modify, you may wish to add a suffix that will name the version. For other
                     suggestions on values of <code><link linkend="element-IRI"
                        >&lt;IRI></link></code>, see <link xlink:href="iris.xml"
                     >IRIs.xml</link>.</para>
               </section>
               <section xml:id="reference_system">
                  <title>One reference system</title>
                  <para>Every TAN transcription must be segmented into a hierarchy of uniquely
                     labeled divisions, defined in the <code><link linkend="element-body"
                           >&lt;body></link></code> through <code><link linkend="element-div"
                           >&lt;div></link></code>s and their <code><link linkend="attribute-type"
                           >@type</link></code> and <code><link linkend="attribute-n"
                        >@n</link></code> values. </para>
                  <para>Those divisions, whenever possible, should align with the reference system
                     that prevails for the work across versions or translations, a so-called
                     canonical reference system. (Because the canonicity of a reference system
                     admits degrees and dispute, the simpler term <emphasis role="italic">reference
                        system</emphasis> is adopted, and applies to all textual labeling systems,
                     whether "canonical" or not.) </para>
                  <para>If you have your choice, preference should be shown to systems that follow
                     the semantic contours of the work, not the physical features of a particular
                     object. Chapter, paragraph, and sentence numbers are preferable to volume,
                     page, and line numbers, because other versions of the work (e.g., translations,
                     paraphrases) will only roughly, if at all, follow an object-oriented reference
                     system. </para>
                  <para>Sometimes an object-based reference system is inescapable, or is the most
                     common reference system for a work. It is perfectly acceptable to adopt that
                     scheme, but it may prove, down the line, to be more work during the alignment
                     process. There are ways of minimizing the work involved in coordinating a
                     transcription with an object-based reference system native to another version,
                     discussed in a separate part of these guidelines [XREF PENDING].</para>
                  <para>If a given work has multiple systems (e.g., the works of Plato and
                     Aristotle, which have both semantic- and object-oriented reference systems),
                     then you may wish to provide two files per transcription, placing in each file
                     a <code><link linkend="element-see-also">&lt;see-also></link></code> pointing
                     to the other and a <code><link linkend="element-relationship"
                           >&lt;relationship></link></code> with the keyword <code>alternatively
                        divided edition</code> as content. A pair of alternatively divided editions
                     can usefully serve as the basis for concordances.</para>
                  <para>If there is a good reference system, but the divisions are overly lengthy,
                     you may introduce subdivisions. Such subdivided texts will still support
                     references to the older system. One drawback is that leaf divs shift from the
                     older to the new subdivision system. Elements from class 2 files that require
                     references to point to leaf divs will need to use the new system. There is also
                     no guarantee that the provisional subdivisions you introduce will be adopted by
                     other editors who create or edit TAN versions of the same work.</para>
                  <para>If there is no reference system, or if you think that the ones that exist
                     are inadequate or misguided, you may create one of your own. If you develop
                     your own reference system, be sure to make it useful and consistent, not just
                     for your version but for any others of the same work. All references must be
                     unique, and they must conform to a hierarchical model. Like XML itself, a
                     reference system must follow a treelike hierarchy: one-to-many relationships
                     from the root element down, with no overlapping siblings. </para>
                  <para>In the <code><link linkend="element-declarations"
                        >&lt;declarations></link></code>, at least one <code><link
                           linkend="element-div-type">&lt;div-type></link></code> must be supplied,
                     declaring the types of divisions into which the text has been segmented, to be
                     referred to by <code><link linkend="attribute-type">@type</link></code> in
                           <code><link linkend="element-div">&lt;div></link></code>s. It is
                     advisable to keep the abbreviation coined in <code><link
                           linkend="attribute-xmlid">@xml:id</link></code> brief but meaningful.
                     Each <code><link linkend="element-div-type">&lt;div-type></link></code> takes
                     the <xref linkend="pattern-iri_and_name"/>.</para>
                  <para>Well-known division types already have suitable IRI names. See <link
                        xlink:href="iris.xml"/> for suggestions. That list also includes less common
                     types of divisions. If you encounter a rare division type, or one that needs
                     specificity not provided for in a well-known URN, you should mint your
                     own.</para>
                  <para>The <code><link linkend="element-div-type">&lt;div-type></link></code>'s
                           <code><link linkend="attribute-ns-are-numerals"
                        >@ns-are-numerals</link></code> is optional. If absent, the value is assumed
                     to be true, and processors of the TAN-T file will attempt to cast the values of
                     each <code><link linkend="attribute-n">@n</link></code> as
                        <code>xs:integer</code>. </para>
                  <para xml:id="numeration_systems">TAN supports four numeration systems other than
                     Arabic numerals:<orderedlist>
                        <listitem>
                           <para><emphasis role="bold">Roman numerals</emphasis>. Values up to 5000,
                              utilizing i, v, x, l, c, d, and m, uppercase or lowercase, with
                              liberal syntactic rules (within a roman numeral, any digit preceding
                              one of a higher value is assumed to be a subtraction from the total
                              value; all others are positive values).</para>
                        </listitem>
                        <listitem>
                           <para><emphasis role="bold">Alphabetic sequences</emphasis>. The
                              26-letter Roman alphabet, assigned 1 through 26, with each series 26n
                              + 1 beginning with n + 1 repeated letters. E.g., aa = 27, bbb = 54.
                              Uppercase or lowercase allowed.</para>
                        </listitem>
                        <listitem>
                           <para><emphasis role="bold">Arabic numerals + alphabetic
                                 sequences</emphasis>. Arabic numerals followed immediately by an
                              alphabetic sequence. The second item is to be calculated as a
                              subsequence of the first item, with the lack of a second item taking
                              highest priority. E.g., 4, 4a, 4b, 4c....</para>
                        </listitem>
                        <listitem>
                           <para><emphasis role="bold">Alphabetic sequences + Arabic
                                 numerals</emphasis>: As above, but with alphabetic sequence
                              preceding Arabic numerals.</para>
                        </listitem>
                     </orderedlist></para>
                  <para>Implementations processing TAN files should determine whether the
                           <code><link linkend="attribute-n">@n</link></code>s are numerals by
                     testing all values and opting for the numeration system that predominates. It
                     is recommended that the functions and variables defined for <link
                        xlink:href="../functions/TAN-A-div-functions.xsl">TAN-A-div</link>, <link
                        xlink:href="../functions/TAN-class-2-functions.xsl">TAN-class-2</link>, and
                        <link xlink:href="../functions/TAN-core-functions.xsl">TAN-core</link> be
                     studied in reconciling and converting numeration systems. </para>
                  <para>In most cases, <code><link linkend="attribute-ns-are-numerals"
                           >@ns-are-numerals</link></code> will not need to be invoked. Even if
                     there is a case where <code>n="civ"</code> and <code>civ</code> is meant to be
                     a word or abbreviation, this will be interpreted as a Roman numeral only if the
                     majority of <code><link linkend="attribute-n">@n</link></code>s for that
                           <code><link linkend="element-div">&lt;div></link></code> type match the
                     pattern for Roman numerals. In that case, <code><link
                           linkend="attribute-ns-are-numerals"
                        >@ns-are-numerals</link>="false"</code> should be invoked in the appropriate
                           <code><link linkend="element-div-type">&lt;div-type></link></code>. </para>
                  <para>You may have as many <code><link linkend="element-div-type"
                           >&lt;div-type></link></code>s as you like. Not every division type needs
                     to be used in the transcription. In this it resembles surplus namespace
                     invocations at the head of an XML document. The only harm is bloat.</para>
                  <para>In addition you may advise on whether references to the work should be
                        <code>implicit</code> or <code>explicit</code>, discussed at <code><link
                           linkend="element-recommended-div-type-refs"
                           >&lt;recommended-div-type-refs></link></code>. </para>
               </section>
            </section>
            <section xml:id="preparing_transcriptions_for_tokenization">
               <title>Preparing transcriptions for tokenization</title>
               <para>The previous sections describe segmentation that applies to phrases and larger
                  portions of text. But you must give thought to how your transcription will be used
                  for token- or word-based segmentation (see <xref linkend="tan-r-tok"/>). You will
                  make recommendations on tokenization in one or more <code><link
                        linkend="element-recommended-tokenization"
                        >&lt;recommended-tokenization></link></code>s (under <code><link
                        linkend="element-declarations">&lt;declarations></link></code>). If no
                  thought has been given to tokenization, this element should be left empty.</para>
               <para>There are, in general, two ways to approach tokenization.</para>
               <para>The first, and most common in TAN, treats words purely as locators, not as
                  linguistic concepts. This mirrors ordinary discourse where we tell people to find
                  a specific place in the text, e.g., "Please look at the fourth word in this
                  sentence." Normally we do not consider the linguistic context in either giving or
                  acting on such commands, although this leaves ambiguity, when we are uncertain
                  whether to treat "pom pom", "New York", or "macro-processor" as one or two
                  words.</para>
               <para>In the TAN format, "word" means merely an arbitrary string of characters
                  defined by means of a TAN-R-tok tokenization pattern (discussed fully at <link
                     linkend="tan-r-tok"/>). That pattern specifies exactly what separates one word
                  from another. The most common separators are white space and white space in
                  conjunction with punctuation. These two patterns are used so widely that they are
                  assigned reserved keywords for the <code><link linkend="attribute-which"
                        >@which</link></code> of <code><link
                        linkend="element-recommended-tokenization"
                        >&lt;recommended-tokenization></link></code>:
                     <code>general-words-only-1</code> and <code>general-1</code>.</para>
               <para>A second approach to tokenization attempts to align the locator system with
                  linguistic units such as morphemes and lexemes. This is the case where you are
                  intending to allow your transcription to be easily handled for morphological or
                  syntactic analysis. In those cases, you are willing to prepare your transcription
                  such that the morphemes and lexemes are defined by a consistent pattern.</para>
               <para>For cases such as this, one reserved keyword is available,
                     <code>precise-1</code>, which defines the word separator to be any white space
                  in conjunction with U+200B (ZERO-WIDTH SPACE = [ZWS]). It is recommended that the
                  latter be spelled out with its XML entity, <code>&amp;#x200B;</code>, so that
                  editors and readers of the text can easily see where these markers have been set.
                  In display, however, the ZWS will not introduce space between characters.</para>
               <para>It is up to other users to decide whether to adopt your recommendations or not.
                  In the end, TAN tokenization is a reference system, intended for the convenience
                  of the user. There are ways in class 2 files to take a given tokenization system
                  and redefine an individual token down to the character level.</para>
               <para>You may have as many <code><link linkend="element-recommended-tokenization"
                        >&lt;recommended-tokenization></link></code>s as you like, but the best
                  should be placed first. </para>
            </section>
            <section xml:id="normalizing_transcriptions">
               <title>Normalizing transcriptions</title>
               <para>You should declare what kind of normalizing alterations you have made to the
                  transcription by means of <code><link linkend="element-filter"
                     >&lt;filter></link></code> and its children, <code><link
                        linkend="element-normalization">&lt;normalization></link></code>,
                        <code><link linkend="element-transliteration"
                     >&lt;transliteration></link></code>, and <code><link linkend="element-replace"
                        >&lt;replace></link></code>. </para>
               <para>(For suggestions on values of <code><link linkend="element-IRI"
                     >&lt;IRI></link></code> for <code><link linkend="element-normalization"
                        >&lt;normalization></link></code> and <code><link
                        linkend="element-transliteration">&lt;transliteration></link></code>, see
                     <link xlink:href="iris.xml">IRIs.xml</link>.)</para>
               <para>Generally speaking, normalization should entails the suppression of such
                  elements extraneous to the work you have chosen. You should feel free to omit
                  parenthetical editorial insertions, stray handwritten remarks, discretionary
                  word-breaking hyphens, editorial comments, inserted cross-references, and
                  reference numerals (page numbers, section numbers, etc.). In addition, you may
                  wish to resolve ligatures and to correct unintended typographical errors. </para>
               <para>In a digital source, variable lengths of spacing marks (e.g., General
                  Punctuation U+2000..U+200A; U+200B) should be converted to ordinary spaces (unless
                  if using precise-1 method of tokenzation; see <xref
                     linkend="preparing_transcriptions_for_tokenization"/>), and superscript
                  combining Roman letters (U+0363..U+036F) should probably be converted to their
                  non-combining counterparts. All Unicode must be normalized to NFC forms (see <xref
                     linkend="normalization"/>). </para>
               <para>You should remove from the text anything that is not part of the work proper
                  and would interfere with detailed word-for-word alignment, or would create many
                  extra hours of preprocessing or postprocessing work for later users. If your
                  source is an electronic text that has preserved line breaks, you may need to
                  ensure that the sibling elements that split the single word have no space
                  (including line breaks) between <code><link linkend="element-div"
                     >&lt;div></link></code>s. For more on XML and space, see <xref
                     linkend="whitespace"/>.</para>
               <para>Not all decisions will be clear-cut. You may justly hesitate before normalizing
                  orthography, punctuation, accentuation, or capitalization. Some aspects of Unicode
                  that lend themselves to varying conventions may need special consideration. You
                  may need to consider whether an unusual or rarely used Unicode character might be
                  misinterpreted, or a hindrance to other users (especially for parsing word
                  tokens). Describe any decisions that might not be agreeable to everyone who uses
                  the file in the <code><link linkend="element-filter"
                  >&lt;filter></link></code>.</para>
               <para>If you choose to transliterate a text, bear in mind that transliteration rules
                  rarely allow the original to be reconstructed. </para>
            </section>
         </section>
         <section xml:id="tan-t_data">
            <title>Transcriptions</title>
            <para>The sole purpose of the <code><link linkend="element-body">&lt;body></link></code>
               of a class 1 file is to contain a segmented transcription of a single version of a
               single work from a textual object. <code><link linkend="element-body"
                     >&lt;body></link></code> may take <code><link linkend="attribute-in-progress"
                     >@in-progress</link></code> and must take <code><link
                     linkend="attribute-xmllang">@xml:lang</link></code>. </para>
            <para><code><link linkend="element-body">&lt;body></link></code> takes one or more
                     <code><link linkend="element-div">&lt;div></link></code> elements, each of
               which either govern other <code><link linkend="element-div">&lt;div></link></code>
               elements, or govern text (and perhaps TEI markup).</para>
            <para>This tree of <code><link linkend="element-div">&lt;div></link></code> elements,
               along with each one's <code><link linkend="attribute-type">@type</link></code> and
                     <code><link linkend="attribute-n">@n</link></code> values, structures the text
               according to the reference system that has been adopted (see <xref
                  linkend="reference_system"/>). </para>
            <para>The term <emphasis>leaf div</emphasis> refers to those <code><link
                     linkend="element-div">&lt;div></link></code>s that contain text (and, by rule,
               no other <code><link linkend="element-div">&lt;div></link></code>s, XPath expression
                  <code>//tan:div[not(descendant::tan:div)]</code>)</para>
            <para>If a change in language occurs within a leaf <code><link linkend="element-div"
                     >&lt;div></link></code>, you should ensure that the <code><link
                     linkend="attribute-xmllang">@xml:lang</link></code> value of that <code><link
                     linkend="element-div">&lt;div></link></code> (explicity or by inheritance)
               reflects the majority language. Alternatively, you may subdivide that <code><link
                     linkend="element-div">&lt;div></link></code>s into a new set of leaf
                     <code><link linkend="element-div">&lt;div></link></code>s, with the appropriate
                     <code><link linkend="attribute-xmllang">@xml:lang</link></code> values
               applied.</para>
            <para>Within this treelike structure of <code><link linkend="element-div"
                     >&lt;div></link></code>s, any given <code><link linkend="element-div"
                     >&lt;div></link></code> will be identified by the paired values of <code><link
                     linkend="attribute-type">@type</link></code> and <code><link
                     linkend="attribute-n">@n</link></code>, going from the most ancestral
                     <code><link linkend="element-div">&lt;div></link></code> down to the context
               node. The concatenation of the entire chain is called the <emphasis>flat
                  ref</emphasis>, and is the heart of identifiers it TAN, particularly in class 2
               files. </para>
            <para>If a section of text traditionally carries no label, for example an unnumbered
               preface, this must declared explicitly with an empty value, i.e., <code><link
                     linkend="attribute-n">@n</link>=""</code>. In such cases look out for ambigua:
               any other sibling <code><link linkend="element-div">&lt;div></link></code> of the
               same type that would assign its <code><link linkend="attribute-n">@n</link></code> as
               a null value (for example, two prefaces to the same work).</para>

            <section xml:id="leaf_div_uniqueness_rule">
               <title>Flattened References, and the Leaf Div Uniqueness Rule</title>
               <para>One of the most important validation rules is the <emphasis>Leaf Div Uniqueness
                     Rule</emphasis>, which states that the flat ref for each leaf <code><link
                        linkend="element-div">&lt;div></link></code> must be unique.</para>
               <para>Take for example a work that is structured into books, chapters, and finally
                  sections. If you are told to find book 3, chapter 7, section b, line 5, you should
                  be able to find the one place where that applies. There should not be two passages
                  labeled 3.7.b.5.</para>
               <para>This rule applies only to leaf <code><link linkend="element-div"
                        >&lt;div></link></code>s and not to <code><link linkend="element-div"
                        >&lt;div></link></code>s in general. That is because there are many cases
                  where a source will begin a major textual unit, interject another one, then resume
                  the previous one. For example, chapters 24 and 30 in the book of Proverbs of the
                  Septuagint are split in half and collated. The sequence goes as follows: 24.1 -
                  24.22e (22a - 22e are verses not extant in the Hebrew); 30.1 - 30.14; 24.23 -
                  24.34; and 30.15 - 30.33. If the uniqueness rule applied universally, this kind of
                  reference system would be impossible.</para>
            </section>
         </section>
         <section xml:id="tan-tei">
            <title>Transcriptions Using the Text Encoding Initiative (<code>&lt;TEI></code>)</title>
            <para>
               <note>
                  <para>This section is to be read in conjunction with <xref linkend="class_1"/> and
                        <xref linkend="xml"/>, which addresses some technical issues that relate to
                     TAN-compliant TEI to XML and validation generally.</para>
               </note>
            </para>
            <para>Some creators and editors of transcriptions will find the rather stripped-down
               TAN-T format inadequate. Some may wish to mark up the text in leaf <code><link
                     linkend="element-div">&lt;div></link></code>s. Others may already have a
               library of transcriptions with detailed annotations that are desirable to keep, even
               if TAN users may not be interested. To serve these needs, TAN has adopted the Text
               Encoding Intiative (TEI) format for its expressiveness, its stability, its
               flexibility, and its widespread use in scholarship.</para>
            <para>TEI is one of the best known XML encoding formats for textual markup. It was
               designed to be maximally expressive and flexible, to serve the most robust needs of
               humanities scholars. In serving this mission, TEI has come to define more than five
               hundred different element names, and more than two hundred attributes. Of course, any
               given TEI file uses only a small subset of those elements and attributes, and TEI
               itself comes in different sizes, from TEI Lite, which uses only 75 attributes and 140
               elements, to TEI All, which opens up almost the entire library. </para>
            <para>The TEI has been designed to be customizable, which is actively encouraged.
               Individuals and projects may define their own subset of TEI elements, to constrict or
               expand the allowable rules as they see fit. TAN-TEI is one of those customizations,
               adjusting the TEI rules to ensure that the transcriptions are interchangeable and
               suitable with all other TAN files.</para>
            <para>The customization of the TEI can be summarized as follows (the default namespace
               in this section is the TEI namespace,
               <code>http://www.tei-c.org/ns/1.0</code>):</para>
            <para>
               <table frame="all">
                  <title>Synopsis of TAN-TEI customization</title>
                  <tgroup cols="2">
                     <colspec colname="c1" colnum="1" colwidth="1*"/>
                     <colspec colname="c3" colnum="2" colwidth="3.21*"/>
                     <thead>
                        <row>
                           <entry>TEI element</entry>
                           <entry>summary of alteration</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry><code>&lt;TEI></code></entry>
                           <entry>
                              <itemizedlist>
                                 <listitem>
                                    <para>must have <code><link linkend="attribute-id"
                                          >@id</link></code> with IRI name</para>
                                 </listitem>
                                 <listitem>
                                    <para>should take new namespace declaration,
                                          <code>xmlns:tan="tag:textalign.net,2015:ns"</code>
                                    </para>
                                 </listitem>
                                 <listitem>
                                    <para>takes a new child element, <code><link
                                             linkend="element-head">&lt;head></link></code>, placed
                                       between <code>&lt;teiHeader></code> and
                                          <code>&lt;text></code></para>
                                 </listitem>
                              </itemizedlist>
                           </entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-body">&lt;body></link></code></entry>
                           <entry>
                              <itemizedlist>
                                 <listitem>
                                    <para>must take <code><link linkend="attribute-xmllang"
                                             >@xml:lang</link></code></para>
                                 </listitem>
                                 <listitem>
                                    <para>may take <code><link linkend="attribute-in-progress"
                                             >@in-progress</link></code></para>
                                 </listitem>
                                 <listitem>
                                    <para>must take exclusively one or more <code><link
                                             linkend="element-div">&lt;div></link></code>s</para>
                                 </listitem>
                                 <listitem>
                                    <para>overall contents must be restricted to a single
                                       work</para>
                                 </listitem>
                              </itemizedlist>
                           </entry>
                        </row>
                        <row>
                           <entry><code><link linkend="element-div">&lt;div></link></code></entry>
                           <entry>
                              <itemizedlist>
                                 <listitem>
                                    <para>must take either only <code><link linkend="element-div"
                                             >&lt;div></link></code>s or no <code><link
                                             linkend="element-div">&lt;div></link></code>s at
                                       all</para>
                                 </listitem>
                                 <listitem>
                                    <para>must take <code><link linkend="attribute-type"
                                             >@type</link></code>, <code><link linkend="attribute-n"
                                             >@n</link></code></para>
                                 </listitem>
                              </itemizedlist>
                           </entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
            </para>
            <para>Like all other TAN files, the rootmost elements of TAN-TEI files must take an
                     <code><link linkend="attribute-id">@id</link></code>, the IRI name. See above,
                  <xref linkend="tag_urn"/>.</para>
            <para>The <code>&lt;teiHeader></code> is retained, but for TAN purposes, the contents do
               not matter. If your <code>&lt;teiHeader></code> has any kind of metadata relevant to
               TAN users, you will need to copy and modify the data for <code>&lt;tan:head></code>.
               You must follow the TAN rules for <link linkend="element-head">&lt;head></link> (see
                  <xref linkend="metadata_head"/> and <xref linkend="transcription_principles"/>).
               You may find that some of the material you put in <code>&lt;teiHeader></code> is not
               expected in <code><link linkend="element-head">&lt;head></link></code> and that some
               of the expectations of <code><link linkend="element-head">&lt;head></link></code> are
               nowhere in your <code>&lt;teiHeader></code>.</para>
            <para>The opening tage of <code>&lt;tan:head></code> (the sibling element between
                  <code>&lt;teiHeader></code> and <code>&lt;text></code>) will declare the TAN
               namespace to be its default, i.e., <code>&lt;head
                  xmlns="tag:textalign.net,2015:ns"></code> or <code>&lt;tan:head></code> if the
               prefix <code>tan:</code> has been defined in the rootmost element.</para>
            <para>The TEI <code><link linkend="element-body">&lt;body></link></code> must take
                     <code><link linkend="attribute-xmllang">@xml:lang</link></code>, and it may
               take <code><link linkend="attribute-in-progress">@in-progress</link></code>. It must
               take one or <code><link linkend="element-div">&lt;div></link></code>s, which, just
               like TAN-T files, take either only <code><link linkend="element-div"
                  >&lt;div></link></code>s or no <code><link linkend="element-div"
                  >&lt;div></link></code>s at all. This hierarchy of <code><link
                     linkend="element-div">&lt;div></link></code>s must be devoted to only one work.
               Each <code><link linkend="element-div">&lt;div></link></code> must take <code><link
                     linkend="attribute-type">@type</link></code> and <code><link
                     linkend="attribute-n">@n</link></code>.</para>
            <para>Within any leaf <code><link linkend="element-div">&lt;div></link></code>, you may
               use whatever TEI markup you wish, to whatever level of depth or complexity. All users
               of your TAN-TEI file will be interested in the text nodes, but only a subset will
               care about any markup within leaf <code><link linkend="element-div"
                  >&lt;div></link></code>s. For this reason, even if you change the value of
                     <code><link linkend="attribute-xmllang">@xml:lang</link></code> within a leaf
                     <code><link linkend="element-div">&lt;div></link></code>, there is no guarantee
               that readers or processors of your data will take it into account. Or if you try to
               represent the physical appearance of the text on the object, it is likely to be
               ignored. TAN rules on normalizing space and Unicode characters also prevails over any
               exemptions declared in TEI.</para>
            <para>As a matter of practicality, it is helpful to envision the TEI to TAN-TEI
               conversion process as falling in three steps:</para>
            <para>
               <orderedlist>
                  <listitem>
                     <para>Structure: insert new processing instructions (TAN-TEI validation files);
                        adjust rootmost element by supplying IRI name to <code><link
                              linkend="attribute-id">@id</link></code>, TAN namespace to
                           <code>@xmlns:tan</code>.</para>
                  </listitem>
                  <listitem>
                     <para>Metadata: create new <code><link linkend="element-head"
                           >&lt;head></link></code> and populate with correct metadata</para>
                  </listitem>
                  <listitem>
                     <para>Data: edit <code><link linkend="element-body">&lt;body></link></code> to
                        restrict the content to a single work; restructure <code><link
                              linkend="element-body">&lt;body></link></code> content into nesting
                              <code><link linkend="element-div">&lt;div></link></code>s with unique
                              <code><link linkend="attribute-type">@type</link></code> and
                              <code><link linkend="attribute-n">@n</link></code> values.</para>
                  </listitem>
               </orderedlist>
            </para>
            <para>It has been the experience of those who have made TEI to TAN-TEI conversions that
               step 2 is the most time-consuming. The TAN <code><link linkend="element-head"
                     >&lt;head></link></code> requires one to more carefully curate the metadata
               than does <code>&lt;teiHeader></code>.</para>
         </section>
         <xi:include href="inclusions/TAN-class-1.xml"/>
         <xi:include href="inclusions/TAN-T.xml"/>
      </chapter>
      <chapter xml:id="class_2">
         <title>Class-2 TAN Files, Annotations of Texts</title>
         <para>This chapter is devoted to the class 2 format, which treats annotations of class 1
            files. At present, class 2 files are restricted to alignment or
            lexico-morphology.</para>
         <para>Alignment files come in two different formats, identified by the rootmost element.
            TAN-A-div provides macroscopic alignment; TAN-A-tok, microscopic. TAN-A-div aligns one
            or more class 1 files. It is intended for broad, general alignments of any number of
            versions of any number of works. The scope of TAN-A-tok is more restricted, to two class
            1 files, allowing one to declare alignments with detailed specificity, certainty, and
            type between words (tokens).</para>
         <para>Lexico-morphology files (also called part-of-speech files), TAN-LM, are used to
            encode the lexical headwords and morphological forms of individual words in class 1
            files.</para>
         <section xml:id="class_2_common">
            <title>Common Elements</title>
            <para>The class 2 formats have been designed to be human readable. And because that data
               invariably points to class 1 files, it has been assumed that those references should
               reflect the way, in ordinary conversation, we refer to specific parts of a text. We
               like to cite pages, paragraphs, sentences, lines, words, letters, and so forth. We
               prefer to use relative keywords, and or sometimes parts of the text itself. We might
               say, for example, "See page 4, second paragraph, the last four words." Or, "See page
               4, second paragraph, first sentence, second occurence of 'pull'." </para>
            <para>The TAN pointer syntax differs from other pointer systems (e.g., URLs, XPath, and
               XPointer) in that it depends upon fixed features that do not change if someone
               reindents or structurally rearranges a source file: works, divisions, word tokens,
               and characters. <emphasis>Works</emphasis>, defined above (see <xref
                  linkend="conceptual_works"/>), are defined by the <emphasis>source</emphasis>
               (which may not have more than one work). <emphasis>Divisions</emphasis> are defined
               by the <code><link linkend="element-div">&lt;div></link></code> structure of each
               source. <emphasis>Tokens</emphasis> are words of those divisions, defined according
               to one or more tokenization rules. And <emphasis>characters</emphasis> are defined as
               non-modifying codepoints in a word token.</para>
            <para>Parts of this fourfold hierarchy—works, divisions, tokens, and characters—are
               named with vocabulary that the editor of a class 2 file finds most useful. Sources
               are given a nickname (e.g., <code><link linkend="attribute-xmlid">xml:id</link> =
                  "hamlet-1741"</code>); the identifying labels for division types and labels are
               either adopted from the class 1 sources (e.g., <code><link linkend="attribute-ref"
                     >ref</link> = "Act I scene 1"</code>), or are provisionally adjusted; word
               tokens can be referred to by position, by its actual value, or both (e.g.,
                     <code><link linkend="attribute-pos">pos</link> = "1 - 5", <link
                     linkend="attribute-pos">pos</link> = "last-1 - last", <link
                     linkend="attribute-val">val</link> = "hath"</code>; see <xref
                  linkend="attr_pos_and_val"/>). Characters are always identified by number (e.g.,
                     <code><link linkend="attribute-chars">chars</link> = "2, 7"</code>).</para>
            <para>This approach not only makes the syntax human readable, it also mitigates any
               disruptions that corrections or alterations might incur. For example, if an
               incorrectly duplicated <code><link linkend="element-div">&lt;div></link></code> is
               deleted, disruption to the reference system is restricted to that particular
                     <code><link linkend="element-div">&lt;div></link></code> and does not affect
               the rest of the document.</para>
            <section xml:id="class_2_metadata">
               <title>Class 2 Metadata (<code><link linkend="element-head"
                  >&lt;head></link></code>)</title>
               <para>Class 2 files share a few common features in their metadata, mostly to
                  facilitate the human-friendly reference system outlined above.</para>
               <para>All class 2 files have as their sources nothing other than class 1 files.
                  Therefore each <code><link linkend="element-source">&lt;source></link></code> must
                  take only a single <code><link linkend="element-IRI">&lt;IRI></link></code> that
                  carries the IRI name of the source TAN-T(EI) file, and at least one <code><link
                        linkend="element-location">&lt;location></link></code>. Because the rights
                  have already been declared in the source files, <code><link
                        linkend="element-rights-source-only">&lt;rights-source-only></link></code>
                  is disallowed. </para>
               <para>Most class 2 files must be able to name or number word-tokens in a
                  transcription. All class 2 files that require tokenization (i.e., TAN-A-tok and
                  TAN-LM) must have under <code><link linkend="element-declarations"
                        >&lt;declarations></link></code> one or more <code><link
                        linkend="element-tokenization">&lt;tokenization></link></code>s that can be
                  applied to every language in every source. Tokenizations may or may not be those
                  recommended by a source. They can be standard TAN tokenizations, or completely
                  different TAN-R-tok files. See <code><link linkend="element-tokenization"
                        >&lt;tokenization></link></code>, <xref
                     linkend="preparing_transcriptions_for_tokenization"/>, and <xref
                     linkend="tan-r-tok"/>.</para>
               <para>There may be some cases where a source has a div type that is unnecessary or
                  confusing. One or more optional <code><link linkend="element-suppress-div-types"
                        >&lt;suppress-div-types></link></code>s may be used to specify division
                  types that you wish to suppress in references.</para>
               <para xml:id="implicit-div-type-refs">Optional <code><link
                        linkend="element-implicit-div-type-refs"
                     >&lt;implicit-div-type-refs></link></code> names sources (via the <code><link
                        linkend="attribute-src">@src</link></code>) that will be referred to with a
                  brief syntax where div types are omitted (e.g., <code><link
                        linkend="attribute-ref">ref</link> = "I 1"</code> instead of <code><link
                        linkend="attribute-ref">ref</link> = "Act I scene 1"</code>). Even if a
                  source recommends the implicit reference system, it must be explicitly declared
                  through <code><link linkend="element-implicit-div-type-refs"
                        >&lt;implicit-div-type-refs></link></code>.</para>
               <para>Optional <code><link linkend="element-rename-div-types"
                        >&lt;rename-div-types></link></code> and <code><link
                        linkend="element-rename-div-ns">&lt;rename-div-ns></link></code> provide a
                  convenient way to provisionally rename <code><link linkend="attribute-n"
                     >@n</link></code> and <code><link linkend="element-div">&lt;div></link></code>
                  values. This is useful for cases where you wish to use division labels that more
                  familiar to users of the class 2 files, or are easier to edit and read. </para>
               <para><code><link linkend="element-rename-div-ns">&lt;rename-div-ns></link></code>
                  can be used to harmonize discordant <code><link linkend="attribute-n"
                     >@n</link></code> values. This is especially helpful for divs that are named,
                  not numbered, such as the books of the Bible, or to declare a change from Roman
                  and alphabetic numbering systems into Arabic. But that is strictly speaking a
                  convenience, not a necessity, since TAN-compliant preprocessors are required to
                  automatically detect Roman and alphabetic numbering systems and treat them as if
                  Arabic numerals.</para>
               <para><code><link linkend="element-rename-div-ns">&lt;rename-div-ns></link></code>
                  has potentially more impact than <code><link linkend="element-rename-div-types"
                        >&lt;rename-div-types></link></code>. The latter points to division types
                  that are defined by the <code><link linkend="element-IRI">&lt;IRI></link></code>
                  value under <code><link linkend="element-div-type">&lt;div-type></link></code>.
                  Changing the name of the div type does not change the underlying definition. But
                  changing the value of <code><link linkend="attribute-n">@n</link></code>
                  effectively changes the actual value, so any changes in <code><link
                        linkend="element-rename-div-ns">&lt;rename-div-ns></link></code> must
                  preserve the Leaf Div Uniqueness Rule. Furthermore, in a TAN-A-div file, this kind
                  of renaming changes any default alignments. See <xref linkend="tan-a-div"
                  />.</para>



            </section>
            <section xml:id="class_2_body">
               <title>Class 2 Data Patterns (<code><link linkend="element-body"
                     >&lt;body></link></code>)</title>
               <para>The three types of class 2 files treat different kinds of phenomena, so their
                  data structures look quite different. Nevertheless, a few elements and attributes
                  are shared by two or more formats.</para>
               <para>Many class 2 elements take <code><link linkend="attribute-src"
                     >@src</link></code> and <code><link linkend="attribute-ref">@ref</link></code>.
                        <code><link linkend="attribute-src">@src</link></code> points via ID
                  reference to one ore more <code><link linkend="element-source"
                     >&lt;source></link></code>s and <code><link linkend="attribute-ref"
                     >@ref</link></code> points to one or more <code><link linkend="element-div"
                        >&lt;div></link></code>s through their <emphasis>flattened
                     references</emphasis>. A flattened reference is the concatenated value of the
                        <code><link linkend="attribute-type">@type</link></code>s and <code><link
                        linkend="attribute-n">@n</link></code>s of all self and ancestral
                        <code><link linkend="element-div">&lt;div></link></code>s, joined by
                  non-word characters as delimiters, and perhaps substituted with their new values
                  if <code><link linkend="element-rename-div-types"
                     >&lt;rename-div-types></link></code> or <code><link
                        linkend="element-rename-div-ns">&lt;rename-div-ns></link></code> have been
                  invoked (see <xref linkend="metadata_head"/>).</para>
               <para>In the example <code><link linkend="attribute-ref">ref</link> = "bk.1:ch.2 -
                     bk.1:ch.4"</code>, the delimiters of colon and period are arbitrary. You may
                  use any punctuation you wish, but it is recommended you use what will be most
                  familiar to users. Question marks, hyphens, and commas are not recommended, since
                  the first is reserved for requesting assistance and the last two, for creating
                  ranges of references. Further, the comma in most contexts means "and". That is, it
                  joins like things and is paratactic. But delimiting punctuation is
                  hypotactic.</para>
               <para>In most cases, <code><link linkend="attribute-ref">@ref</link></code> may point
                  to multiple <code><link linkend="element-div">&lt;div></link></code>s, constructed
                  by taking two or more flattened references and joining them with a hyphen
                     <code>-</code> for range or a comma <code>,</code> for union. In any range, the
                  reference on the left should precede the one on the right in the source document.
                  For example, <code>bk.3:c.4:s.2 - bk.3:c.4:s.4, bk.3:c.4:s.8</code> and
                     <code>3:4:2 - 3:4:4, 3:4:8</code> are correct ways to refer to sections 2, 3,
                  4, and 8 of the fourth chapter of book three. </para>
               <para>In some cases, a range of references must be siblings (i.e., <code>bk.3 -
                     bk.3:c.4:s.4</code> would be disallowed), as, for example, in elements for
                  which <code><link linkend="attribute-distribute">@distribute</link></code> (<xref
                     linkend="attr_distribute"/>) is <code>true</code>.</para>
               <para><code><link linkend="attribute-chars">@chars</link></code> and <code><link
                        linkend="attribute-pos">@pos</link></code> follow a useful compact syntax,
                  described below (<xref linkend="attr_pos_and_val"/>).</para>
               <para>It is helpful to think about these attributes in the context of <code><link
                        linkend="element-tok">&lt;tok></link></code>, which appears in all class 2
                  formats. This element points to individual words in one or more sources, in or
                  more references, calculated distributively. For example, <code>&lt;<link
                        linkend="element-tok">tok</link> src = "a b c" <link linkend="attribute-ref"
                        >ref</link> = "bk.1:ch.2 - bk.1:ch.4" <link linkend="attribute-pos"
                        >ord</link> = "1 - 3"/></code>, points to three sources, three, references,
                  and three ordinal positions of words, and so points to twenty-seven words
                  total.</para>
            </section>
            <section xml:id="attr_pos_and_val">
               <title><code><link linkend="attribute-pos">@pos</link></code> and <code><link
                        linkend="attribute-val">@val</link></code></title>
               <para>To point to a token, one of three methods may be used.</para>
               <para>
                  <orderedlist>
                     <listitem>
                        <para><emphasis role="italic"><code><link linkend="attribute-pos"
                                    >@pos</link></code> alone</emphasis>. Under this method, one or
                           more digits, or the phrase <code>last</code> or <code>last-</code> plus a
                           digit, joined by hyphens or commas indicate one or more token numbers.
                           For example, <code>2, 4 - 6, last-2 - last</code> refers to the second,
                           fourth, fifth, sixth, antepenult, penult, and final tokens in a sequence
                           of word tokens.</para>
                     </listitem>
                     <listitem>
                        <para><emphasis role="italic"><code><link linkend="attribute-val"
                                    >@val</link></code> alone</emphasis>. Under this method, a
                           single token is picked by means of a string value equivalent to the
                           token. For example, <code><link linkend="attribute-val">@val</link> =
                              "bird"</code>, points to the first occurence of the token
                              <code>bird</code>.</para>
                     </listitem>
                     <listitem>
                        <para><emphasis role="italic"><code><link linkend="attribute-pos"
                                    >@pos</link></code> and <emphasis role="italic"><code><link
                                       linkend="attribute-val">@val</link></code></emphasis>
                              together.</emphasis> Under this method, specific occurences of a token
                           are picked. For example, <code><link linkend="attribute-val"
                              >@val</link>="bird" <link linkend="attribute-pos">@pos</link>="2,
                              4"</code> picks the second and fourth occurences of the token
                              <code>bird</code>.</para>
                     </listitem>
                  </orderedlist>
               </para>
               <para>If <code><link linkend="attribute-pos">@pos</link></code> points to an ordinal
                  value of a word token or token value beyond the acceptable range for every
                        <code><link linkend="attribute-src">@src</link></code> and <code><link
                        linkend="attribute-ref">@ref</link></code>, an error will be generated. This
                  is true not just for absolute digits, but those combined with <code>last</code>.
                  For example, the attribute combination <code>val="bird" ord="last-5"</code> will
                  produce an error if the word token <code>bird</code> does not occur more than five
                  times.</para>
               <para>The numerical value to which the keyword <code>last</code> resolves depends
                  upon the context of each source and ref.</para>
            </section>
         </section>
         <section xml:id="alignment_principles">
            <title>Alignments: Principles and Assumptions</title>
            <para>At the heart of class 2 are alignment files. TAN distinguishes two types of
               alignment. </para>
            <para>The first, <emphasis role="bold">TAN-A-div</emphasis>, aiming at breadth and
               extent, collects multiple versions of a work to facilitate parallel editions or to
               generate comparative statistics across multiple versions of related texts.
               facilitates the general alignment of any number of class 1 files</para>
            <para>The second, <emphasis role="bold">TAN-A-tok</emphasis>, aiming at depth and
               precision, concentrates on two versions of a single work and indicates which letters,
               words, or phrases in one version were omitted, retained, or changed in the other and
               why.</para>
            <para>For cases where both precision and breadth are required, one or more files of each
               format should be written.</para>
            <para>TAN aligments attest to acts of translating, paraphrasing, revising, quoting,
               summarizing, and so forth. All these are treated as types of text reuse, where one or
               more texts, usually called in translation studies the <emphasis>source</emphasis> (or
                  <emphasis>sources</emphasis>), are transformed into a new text, customarily called
               the <emphasis>target</emphasis>. Text reuse has directionality and is asymmetrical
               (if I play with a quotation from Homer, it does not change what he originally wrote).
               But many times we deal with texts where the original lines of direction are contested
               or unknown. In those cases, it is hasty or misleading to refer to either of the texts
               as a source or a target. Indeed, the two texts may in fact derive from a common
               source, or be only indirectly related, the result of multiple generations of copying
               and translating. In these guidelines, therefore, we avoid the term <emphasis
                  role="italic">target</emphasis> altogether, and when we use the word <emphasis
                  role="italic">source</emphasis>, we are referring only to one of the class 1 files
               upon which a class 2 alignment depends.</para>
            <para>Consequently, the order of <code><link linkend="element-source"
                  >&lt;source></link></code>s in an alignment file's <code><link
                     linkend="element-head">&lt;head></link></code> does not imply chronological
               precedence. The only implication is that of processing order: the first will be the
               foundation or base against which subsequent sources will be aligned. It is usually a
               good idea to list as the first <code><link linkend="element-source"
                     >&lt;source></link></code> the version that is most complete or most important
               to a given alignment.</para>
         </section>
         <section xml:id="tan-a-div">
            <title>Division-Based Alignments (<code><link linkend="element-TAN-A-div"
                     >&lt;TAN-A-div></link></code>)</title>
            <para>TAN-A-div is the format for macroscopic, division-based alignment, and is
               dedicated to aligning any number of versions of any number of works on the basis of
                     <code><link linkend="element-div">&lt;div></link></code>s, or even smaller, ad
               hoc segments in the sources invoked. </para>
            <para>A TAN-A-div file is technically not an alignment per se. Rather, it is an
               alignment constructor. That is, a TAN-A-div file specifies the core parameters
               necessary in creating an alignment. It is up to a processor to use that TAN-A-div
               file to generate a byproduct (HTML, pdf, spreadsheet, document, etc.) that will be
               recognizable to most people as an alignment.</para>
            <para>Some independently created transcriptions of the same work will, no matter the
               good intentions of the transcribers, fail to correspond exactly to other versions of
               the same works. Perhaps the works or div types will not be defined identically, or
               perhaps one version follows a reference system at odds with the majority of other
               versions. Perhaps a source is interpolated or lacunose. TAN-A-div is used to
               reconcile such inconsistencies, to make special alignments that a computer might not
               be able to detect automatically, and to refine the alignment of parallel sources,
               even down to the word level. </para>
            <para>The motivations of an aligner are opaque in the TAN-A-div format. A TAN-A-div file
               says, in essence, "Please align the following sources," but it does not say why the
               alignment is requested, and it does not indicate what relationship holds between the
               various sources. In fact, a TAN-A-div file could be used to align texts that have no
               apparent relationship (to what end would be unclear). </para>
            <para>Processors of a TAN-A-div file will assume greedy alignment. Alignments will be
               inferred wherever possible, when not explicitly overridden. Alignments are also
               transitive. If passage A is declared to align with B, then, barring any exceptions,
               anything that aligns with A will be assumed to align with anything that aligns with
               B.</para>
            <section>
               <title>Rootmost Element and Header</title>
               <para>The rootmost element of a TAN division-based alignment file is <code><link
                        linkend="element-TAN-A-div">&lt;TAN-A-div></link></code>.</para>
               <para>Under <code><link linkend="element-head">&lt;head></link></code>, some special
                  rules apply to TAN-A-div types.</para>
               <para>One or more <code><link linkend="element-source">&lt;source></link></code>s
                  must be declared (<xref linkend="source_and_see-also"/>). An alignment file with
                  only a single source may seem at first strange, but it may be useful for
                  self-alignment (i.e., to indicate places where a source reuses itself). </para>
               <para><code><link linkend="element-declarations">&lt;declarations></link></code>
                  takes zero or more of the declarations common to class 2 files: <code><link
                        linkend="element-tokenization">&lt;tokenization></link></code>, <code><link
                        linkend="element-suppress-div-types">&lt;suppress-div-types></link></code>,
                        <code><link linkend="element-rename-div-types"
                     >&lt;rename-div-types></link></code>, <code><link
                        linkend="element-rename-div-ns">&lt;rename-div-ns></link></code>. See <xref
                     linkend="class_2_common"/>.</para>
            </section>
            <section>
               <title>Data (<code><link linkend="element-body">&lt;body></link></code>)</title>
               <para>A TAN-A-div may have an empty <code><link linkend="element-body"
                        >&lt;body></link></code> because the format by default demands greedy
                  alignment. That is, it states, in effect, "Take the list of sources in the header.
                  First group (align) them by work, then by <code><link linkend="element-div"
                        >&lt;div></link></code>s according to flattened references." </para>
               <para>A processor will create groups of works according to the <code><link
                        linkend="element-IRI">&lt;IRI></link></code> values under <code><link
                        linkend="element-work">&lt;work></link></code> in each source. To those
                  matches will be added any sources you claim should be treated as being
                  equivalently the same work. Then within each group of versions of the same work,
                  the processor will align (group) <code><link linkend="element-div"
                     >&lt;div></link></code>s based on their values of <code><link
                        linkend="attribute-type">@type</link></code> and <code><link
                        linkend="attribute-n">@n</link></code>, after normalization and after taking
                  into account expections declared in the TAN-A-div file.</para>
               <para>So if aligned sources already have <code><link linkend="element-div"
                        >&lt;div></link></code>s whose <code><link linkend="attribute-type"
                        >@type</link></code> and <code><link linkend="attribute-n">@n</link></code>
                  match well, then nothing needs to be declared in a TAN-A-div <code><link
                        linkend="element-body">&lt;body></link></code>. A TAN-conformant processor
                  will perform the alignment. </para>
               <para>The <code><link linkend="element-body">&lt;body></link></code> of a TAN-A-div
                  file, therefore, is used only (1) to reconcile and customize the alignment between
                  source TAN-T(EI) files and (2) to indicate new alignments where passage x from
                  work A quotes from passage y from work B, or where passages x, y, and z all deal
                  with the same topic. </para>
               <para>Those procedures follow a five-step process. Each step is optional and
                  sequence-specific. That is, each statement assumes declarations made in previous
                  siblings have already been taken into account. Although these steps are
                  fundamentally simple, some of the descriptions that follow may seem unnecessarily
                  detailed or complex. You are advised to consult examples found in the detailed
                  description of individual elements and attributes.</para>
               <section>
                  <title>Step 1: Correlate Works</title>
                  <para>In the first step you may declare an ad hoc equivalence between sources that
                     do not already share an <code><link linkend="element-IRI"
                        >&lt;IRI></link></code> value for <code><link linkend="element-work"
                           >&lt;work></link></code>. Each equivalence is made through an <code><link
                           linkend="element-equate-works">&lt;equate-works></link></code>, which
                     groups together under <code><link linkend="attribute-src">@src</link></code>
                     the ids of sources that should be treated as containing the same work. </para>
                  <para>Transitive alignment holds: <code>&lt;<link linkend="element-equate-works"
                           >equate-works</link>
                        <link linkend="attribute-src">src</link>="a b"/></code> means that any
                     sources that share the same works as <code>a</code> and <code>b</code> will
                     also be treated as equivalent.</para>
                  <para>This declaration does not imply that the works are, in reality, one and the
                     same. It merely states that, for the purposes of this alignment, they should be
                     treated as equivalent.</para>
               </section>
               <section>
                  <title>Step 2: Correlate Division Types</title>


                  <para>This second step does for div types what the first step did for works, with
                           <code><link linkend="element-equate-div-types"
                           >&lt;equate-div-types></link></code>. Across all sources, every
                           <code><link linkend="element-div-type">&lt;div-type></link></code> that
                     shares an <code><link linkend="element-IRI">&lt;IRI></link></code> value will
                     be treated as equivalent. But you may augment that automated alignment through
                     an <code><link linkend="element-equate-div-types"
                        >&lt;equate-div-types></link></code>, which takes one or more <code><link
                           linkend="element-div-type-ref">&lt;div-type-ref></link></code>s, each of
                     which takes a mandatory <code><link linkend="attribute-src">@src</link></code>
                     and <code><link linkend="attribute-div-type-ref">@div-type-ref</link></code>,
                     to point to one or more sources and division types. You must use either the
                           <code><link linkend="attribute-xmlid">@xml:id</link></code> assigned by
                     the source to that div type or its renamed value, if there is a corresponding
                           <code><link linkend="element-rename-div-types"
                           >&lt;rename-div-types></link></code> under <code><link
                           linkend="element-declarations">&lt;declarations></link></code> (see <xref
                        linkend="class_2_metadata"/>).</para>
                  <para>As with <code><link linkend="element-equate-works"
                        >&lt;equate-works></link></code>, <code><link
                           linkend="element-equate-div-types">&lt;equate-div-types></link></code>
                     assume a greedy, transitive alignment. The ad hoc declaration does not imply
                     that the two types of division are, in reality, one and the same—it just
                     correlates them for the sake of the alignment.</para>
               </section>
               <section>
                  <title>Step 3: Refine Segmentation</title>


                  <para>Suppose you have two transcriptions where a phrase ending one leaf
                           <code><link linkend="element-div">&lt;div></link></code> in source A
                     actually corresponds to the beginning phrase of the next leaf <code><link
                           linkend="element-div">&lt;div></link></code> in source B. Or suppose that
                     you wish to break down a leaf <code><link linkend="element-div"
                        >&lt;div></link></code> into smaller constituent parts, to facilitate more
                     exact alignment against another version that is divided more granularly. Before
                     these refined alignments can occur, the source transcriptions must be refined
                     by first segmenting specific leaf <code><link linkend="element-div"
                           >&lt;div></link></code> . This is done through <code><link
                           linkend="element-split-leaf-div-at">&lt;split-leaf-div-at></link></code>,
                     containing one ore more <code><link linkend="element-tok"
                        >&lt;tok></link></code>s pointing to individual words (see <xref
                        linkend="attr_pos_and_val"/>) that should begin a new segment in each
                     reference in each source.</para>
                  <para><code><link linkend="attribute-ref">@ref</link></code> must refer only to
                     leaf <code><link linkend="element-div">&lt;div></link></code>s. Any leaf
                           <code><link linkend="element-div">&lt;div></link></code> may be split as
                     many times as one wishes.</para>
               </section>
               <section>
                  <title>Step 4: Realign Versions of the Same Work</title>







                  <para>After step 3, some of the divisions and segments of a work may not be
                     properly aligned. Segments newly created by <code><link
                           linkend="element-split-leaf-div-at">&lt;split-leaf-div-at></link></code>s
                     may need to be realigned. Or perhaps one of the sources uses a reference system
                     that is out of step with the others. <code><link linkend="element-realign"
                           >&lt;realign></link></code> is used to reconcile differences. It is not
                     used for aligning across works (see step 5, below). </para>
                  <para>There are two types of realignment: anchored and unanchored, discussed in
                     detail at <code><link linkend="element-realign"
                     >&lt;realign></link></code>.</para>
               </section>
               <section xml:id="tan-a-div_align">
                  <title>Step 5: Add New Alignments</title>
                  <para>At this point, the versions of each work should be aligned. You are now in a
                     position to indicate other places where one work aligns with another, to
                     supplement the aligments that will be inferred from steps 1 through 4. In this
                     fifth step, <code><link linkend="element-align">&lt;align></link></code> is
                     used to indicate where one work quotes another or itself. It can also be used
                     to take a topic and specify the passages that align with that topic. This last
                     step is particularly helpful as the basis for the creation of indexes, either
                     of quotations or a general index.</para>
                  <para>These alignments occur through children <code><link
                           linkend="element-div-ref">&lt;div-ref></link></code>s, qualified by some
                     optional attributes:</para>
                  <para><link linkend="attribute-cont"><code>@cont</code></link> (default = false;
                     if present must take <code>1</code> or <code>true</code>) indicates that the
                     present <code><link linkend="element-div-ref">&lt;div-ref></link></code>should
                     be taken with the next as a single group. By default, i.e., when this attribute
                     is absent, the current <code><link linkend="element-div-ref"
                           >&lt;div-ref></link></code> is assumed to be a completely distinct set
                     from every other sibling <code><link linkend="element-div-ref"
                           >&lt;div-ref></link></code>. Likewise, if a <code><link
                           linkend="element-div-ref">&lt;div-ref></link></code> points to multiple
                     passages in <link linkend="attribute-ref"><code>@ref</code></link>, these are
                     to be taken collectively.</para>
                  <para><code><link linkend="attribute-strength">@strength</link></code> (default =
                     1) is a rough equivalent to <code><link linkend="attribute-cert"
                        >@cert</link></code>, but makes no claim on doubt. After all, TAN-A-div
                     files do not furnish a mechanism to indicate the reason why the sources are
                     being aligned (e.g., quotation, translation), and so do not admit any doubt. To
                     align a text is to do it with certitude, and without claims for the rationale
                     for the alignment. </para>
                  <para><code><link linkend="attribute-exclusive">@exclusive</link></code> (default
                     = false) indicates whether an alignment should be excluded or not from
                     transitive inference. If the default false value holds true, then transitive
                     alignments are allowed and each <code><link linkend="element-div-ref"
                           >&lt;div-ref></link></code> may take only one value for <code><link
                           linkend="attribute-src">@src</link></code>, to minimize potential
                     confusion in what is, in effect, a redundancy.</para>
                  <para xml:id="attr_distribute"><code><link linkend="attribute-distribute"
                           >@distribute</link></code> (default = false), indicates whether the
                     references declared in a <code><link linkend="element-div-ref"
                           >&lt;div-ref></link></code> should be interpreted as a group or
                     individually (every nth item to be matched against the nth item in every other
                           <code><link linkend="element-div-ref">&lt;div-ref></link></code>).</para>
                  <para>Any <code><link linkend="element-div-ref">&lt;div-ref></link></code> that is
                     a child of an <code><link linkend="element-align">&lt;align></link></code> may
                     take the optional <code><link linkend="attribute-strength"
                        >@strength</link></code>. (If not present, the value is assumed to be
                        <code>1</code>, or the value is inherited.) This feature is helpful when you
                     wish to indicate in a quotation that one set of references does not align as
                     strongly with the rest of the group.</para>
                  <para>An <code><link linkend="element-align">&lt;align></link></code>, in effect,
                     says, "This, this, and this group of passages from the given works are to be
                     aligned with each other." If the groups represent large blocks of text, nothing
                     is inferred about more granular alignments. The processor of a TAN-A-div may
                     determine if the alignment should be taken <emphasis>en bloc</emphasis>, or if
                     it should be refined and distributed, and upon what basis. If you wish to
                     specify how distribution should occur in a given <code><link
                           linkend="element-align">&lt;align></link></code>, you should create more
                     refined, individual <code><link linkend="element-align"
                        >&lt;align></link></code>s, perhaps using <code><link
                           linkend="attribute-distribute">@distribute</link></code>.</para>
                  <para>As in step 4, the order of <code><link linkend="element-div-ref"
                           >&lt;div-ref></link></code>s in an <code><link linkend="element-align"
                           >&lt;align></link></code> is immaterial. Any processor of your data will
                     handle references according to the document order of the sources, but no other
                     meaning will be inferred from the sequence of <code><link
                           linkend="element-align">&lt;align></link></code>.</para>
               </section>
            </section>
         </section>
         <section xml:id="tan-a-tok">
            <title>Token-Based Alignments (<code><link linkend="element-TAN-A-tok"
                     >&lt;TAN-A-tok></link></code>)</title>
            <para>TAN-A-tok files provide a microscopic view of how two texts relate to each other.
               The format is intended to allow you to specify exactly where, how, and why two
               transcriptions align, and to do so on the most granular level possible. TAN-A-tok
               files also allow you to express levels of confidence or alternative opinions.</para>
            <para>Creators and editors of TAN-A-tok files should be able to read the languages of
               their sources and to explain as precisely as possible the relationship between the
               two sources. You should be prepared to think about and specify types of textual
               reuse. TAN-A-tok files tend to be more demanding to create and edit than TAN-A-div
               files are because they reflect work that is more detailed, and therefore more
               time-consuming, than simple en masse alignment of sources.</para>
            <para>Because of the detailed nature of the inquiry, token alignment is restricted to
               two texts, referred to jointly as a <emphasis role="italic">bitext</emphasis>. Each
               half of the bitext must be a TAN-T(EI) file. It is assumed that those two sources
               share some special relationship, direct or indirect, and relate through one or more
               types of textual reuse: translation, paraphrase, commentary, and so forth. Some of
               these bitexts, such as literal translations, may line up quite nicely word for word.
               Others, such as paraphrases, may line up sporadically, vaguely, ambiguously, or, in
               places, not at all. So alignment of a bitext is oftentimes not easy, and requires you
               to think hard about assumptions you have made in two key areas: the relationship that
               holds from one source to the other and the types of reuse that was involved in
               turning one version into the other (or a common ancestor into both).</para>
            <para><emphasis role="bold">Relationship of sources</emphasis>. Some bitexts will be
               directly related. Others will share a common distant ancestor. The history may be
               uncertain or vague. You may find it difficult if not impossible to tell whether a
               striking difference between the two source texts is to be credited/blamed on a
               translator or on an intermediary (such as an editor or redactor). What you know and
               understand about the relationship will affect how you create token alignments.
               Therefore, you must declare what you believe to be the physical relationship or
               history that connects the sources on the two text-bearing objects. It is important to
               think about the material aspect of philology, because you are trying to answer how
               object A's text relates to object B's.</para>
            <para><emphasis role="bold">Types of reuse</emphasis>. In creating a TAN-A file, you
               should think about and declare the cagories of text reuse you wish to use. Such a
               declaration tells users of your data what paradigm you bring to your analysis. You
               may wish to keep your categories nondescript and somewhat vague, using poorly
               concepts such as <emphasis>translation</emphasis>, <emphasis>paraphrase</emphasis>,
                  <emphasis>quotation</emphasis>, and so forth without offering a specific
               definition. On the other hand, you may have a specific and detailed view of text
               reuse. Perhaps you have adopted field-specific categories such as
                  <emphasis>obligatory explicitation</emphasis>, <emphasis>optional
                  explicitation</emphasis>, <emphasis>pragmatic explicitation</emphasis>, or
                  <emphasis>translation-inherent explicitation</emphasis>. You may also wish to
               declare secondary types of reuse, such as <emphasis role="italic">scribal
                  omission</emphasis> or <emphasis role="italic">dittography</emphasis>, to declare
               secondary types of reuse that may have intervened. You must declare at least one type
               of reuse.</para>
            <section>
               <title>Rootmost Element and Header</title>
               <para>The rootmost element of a token-based alignment file is <code><link
                        linkend="element-TAN-A-tok">&lt;TAN-A-tok></link></code>.</para>
               <para>The TAN-A-tok header builds upon the core and class 2 headers (see <xref
                     linkend="metadata_head"/> and <xref linkend="class_2_metadata"/>).</para>
               <para>TAN-A-tok files take exactly two <code><link linkend="element-source"
                        >&lt;source></link></code>s. The sequence is arbitrary, determining only the
                  order in which processors will handle the data. Each <code><link
                        linkend="element-source">&lt;source></link></code> must take an <code><link
                        linkend="attribute-xmlid">@xml:id</link></code>.</para>
               <para><code><link linkend="element-declarations">&lt;declarations></link></code>
                  takes, in addition to all the elements allowed in class 2 files (see <xref
                     linkend="class_2_metadata"/>), two elements unique to TAN-A-tok: <code><link
                        linkend="element-bitext-relation">&lt;bitext-relation></link></code> and
                        <code><link linkend="element-reuse-type">&lt;reuse-type></link></code>. The
                  first of these describes genealogical descent of the two versions, and is
                  concerned with directionality. The second avoids these categories altogether and
                  focuses on the qualitative aspect of the bitext relationship.</para>
            </section>
            <section>
               <title>Data (<code><link linkend="element-body">&lt;body></link></code>)</title>
               <para>The <code><link linkend="element-body">&lt;body></link></code> of a TAN-A-tok
                  file takes, in addition to the customary optional attributes found in other TAN
                  files (see <code><link linkend="attribute-in-progress">@in-progress</link></code>
                  and <xref linkend="edit_stamp"/>), required <code><link
                        linkend="attribute-bitext-relation">@bitext-relation</link></code> and
                        <code><link linkend="attribute-reuse-type">@reuse-type</link></code>, which
                  take one or more id references from <code><link linkend="element-bitext-relation"
                        >&lt;bitext-relation></link></code> and <code><link
                        linkend="element-reuse-type">&lt;reuse-type></link></code>, defining the
                  default values of the alignment. </para>
               <para><code><link linkend="element-body">&lt;body></link></code> has only one type of
                  child: one or more <code><link linkend="element-align">&lt;align></link></code>s,
                  each of which collects sets of <code><link linkend="element-tok"
                     >&lt;tok></link></code>s from one or both sources, known collectively as a
                     <emphasis role="italic">token cluster</emphasis>. Each token cluster in a given
                  TAN-A-tok file is valid independent of any other token cluster. They may overlap,
                  thereby reflecting the nature of translations, in which words often fall in
                  one-to-one, one-to-many, many-to-one, and many-to-many relationships. The
                  independence of token clusters allows you to register differences of opinion about
                  the same set of tokens. An <code><link linkend="element-align"
                     >&lt;align></link></code> may take an <code><link linkend="attribute-xmlid"
                        >@xml:id</link></code>, to facilitate external discussions about an
                  assertion.</para>
               <para>Unlike TAN-A-div files, under which a processor will assume automatic,
                  transitive, greedy alignment, TAN-A-tok files specify the opposite. Nothing should
                  be inferred about two texts outside of explicitly stated alignments. If a
                  TAN-A-tok file does not mention word tokens that are in a source, it does not mean
                  that they were, for example, left out of a translation. All it means is that the
                  creators and editors of the TAN-A-tok file have said nothing about the tokens. </para>
               <para>If you wish to declare that one or more words in one source were left out of a
                  translation or inserted into one, you must do so through a <emphasis role="italic"
                     >half-null alignment</emphasis>, i.e., a token cluster that has tokens from
                  only one source. That is, a half-null alignment implies—to drawn from the
                  terminology of translation studies—implicitation or explicitation of entire
                  words.</para>
               <para>Because nothing can be implied in a TAN-A-tok file, the status of <code><link
                        linkend="attribute-in-progress">@in-progress</link></code> (default = true)
                  is very important, since it is the only way to signal that you have said all you
                  intend to say about the bitext. (Remember, <code>in-progress = "false"</code> does
                  not mean that the file is free of errors, only that the entire scope of work has
                  been finished.)</para>
               <para>A fully aligned bitext may result in a TAN-A-tok file with a very long
                        <code><link linkend="element-body">&lt;body></link></code> (in contrast to
                  the typical TAN-A-div file). That does not mean, however, that everything in a
                  transcription <emphasis>must </emphasis>be encoded or described. In writing and
                  editing a TAN-A-tok file you do not commit you to saying everything possible about
                  the bitext. You might choose to encode only a few token clusters.</para>
               <para>If there are multiple IDs in <code><link linkend="attribute-reuse-type"
                        >@reuse-type</link></code> or <code><link
                        linkend="attribute-bitext-relation">@bitext-relation</link></code>, the
                  union, not the intersection, of those values is to be understood. For example,
                     <code>reuse-type="trans para"</code> might be used to indicate that the token
                  cluster results from translation, paraphrase, or both. </para>
            </section>
         </section>
         <section xml:id="tan-lm">
            <title>Lexico-Morphology</title>
            <para>TAN-LM files are used to associate words or word fragments with lexemes and
               morphological categories. They are intended primarily to facilitate research that
               depends upon alignments, but they can be valuable on their own, whether or not there
               are other versions or alignments.</para>
            <para>These files rely upon the grammatical rules declared for a given language, and
               those rules must be defined in a TAN-R-mor file. Therefore this section should be
               read in close conjunction with its companion: <xref linkend="tan-r-mor"/>).</para>
            <section>
               <title>Principles and Assumptions</title>
               <para>TAN-LM files are assumed to be applicable to texts in languages whose
                  vocabulary lends itself to grammatical and lexicographical analysis. The two areas
                  are interrelated but independent. If you wish, your TAN-LM file may contain only
                  lexemes or only morphological analyses.</para>
               <para>As an editor of a TAN-LM file you should understand the vocabulary and grammar
                  of the languages you have picked. You should have a good sense of the rules
                  established by the lexical and grammatical authorities you have chosen to follow.
                  You should be familiar with the TAN-R-mor files you have chosen.</para>
               <para>Although you must assume the point of view of a particular grammar and lexicon,
                  you need not define those authorities, nor hold to a single one. In addition, you
                  may bring to lexical analysis your own expertise and supply lexical headwords
                  unattested in printed authorities.</para>
               <para>Although TAN-LM files are simple, they can be laborious to read and write, more
                  than other types of TAN files. It is expected that an editor of a TAN-LM file will
                  find one or more tools to help create and edit the data.</para>
            </section>
            <section>
               <title>Rootmost Element and Header</title>
               <para>The rootmost element of a lexico-morphological file is TAN-LM.</para>
               <para>A mandatory <code><link linkend="element-source">&lt;source></link></code>
                  element points to the one and only TAN-T(EI) file that is the object of analysis. </para>
               <para><code><link linkend="element-declarations">&lt;declarations></link></code>
                  takes the elements common to class 2 files (see <xref linkend="class_2_metadata"
                  />. It takes two other elements unique to TAN-LM: <code><link
                        linkend="element-lexicon">&lt;lexicon></link></code> and <code><link
                        linkend="element-morphology">&lt;morphology></link></code>. Any number of
                  lexica and morphologies may be declared, without regard for order. </para>
               <para>There is, at present, no TAN format for lexica and dictionaries, although this
                  may change in the future. So even if a digital form of a dictionary is identified
                  through the <xref linkend="digital_entity_metadata"/>, no validation tests will be
                  performed. </para>
               <para>You may find that one of the existing lexical models may be a suitable
                  supplement to any TAN collections you develop. The <link
                     xlink:href="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/DI.html">TEI
                     supports dictionary encoding</link>, and the <link
                     xlink:href="http://www.lexicalmarkupframework.org/">Lexical Markup
                     Framework</link>, an ISO standard (ISO-24613:2008), has defined a data model
                  for lexicons and dictionaries. The former is geared toward philology and the
                  latter toward linguistics. You may also devise your own format if neither of these
                  support aspects of lexicology that you find important.</para>
            </section>
            <section>
               <title>Data (<code><link linkend="element-body">&lt;body></link></code>)</title>
               <para>The <code><link linkend="element-body">&lt;body></link></code> of a TAN-LM file
                  takes, in addition to the customary optional attributes found in other TAN files
                  (see <code><link linkend="attribute-in-progress">@in-progress</link></code> and
                     <xref linkend="edit_stamp"/>), <code><link linkend="attribute-lexicon"
                        >@lexicon</link></code> and <code><link linkend="attribute-morphology"
                        >@morphology</link></code>, to specify the default lexicon and grammar for
                  the file. <code><link linkend="attribute-lexicon">@lexicon</link></code> may point
                  either to a <code><link linkend="element-lexicon">&lt;lexicon></link></code> id or
                  to an <code><link linkend="element-agent">&lt;agent></link></code> id
                  (particularly useful for languages without good published lexica).</para>
               <para><code><link linkend="element-body">&lt;body></link></code> has only one type of
                  child: one or more <code><link linkend="element-ana">&lt;ana></link></code>s
                  (short for analysis), each of which matches one or more tokens to one or more
                  lexemes or morphological assertions. </para>
               <para>If due to tokenization a linguistic token is broken up such that two different
                        <code><link linkend="element-tok">&lt;tok></link></code>s must be used, you
                  may use <code><link linkend="attribute-cont">@cont</link></code> in the first
                        <code><link linkend="element-tok">&lt;tok></link></code> to specify that it
                  continues and should be concatenated with the next one and treated as a single
                  linguistic token. </para>
               <para>If <code><link linkend="attribute-ref">@ref</link></code> or <code><link
                        linkend="attribute-pos">@pos</link></code> have multiple values then the
                        <code><link linkend="element-tok">&lt;tok></link></code> is assumed to be
                  referring to multiple tokens. But if <code><link linkend="attribute-chars"
                        >@chars</link></code> has multiple values, these are to be treated as
                  constituent parts of each word picked by <code><link linkend="attribute-ref"
                        >@ref</link></code> or <code><link linkend="attribute-pos"
                     >@pos</link></code>.</para>
               <para><code><link linkend="element-tok">&lt;tok></link></code> may take an
                        <code><link linkend="attribute-xmlid">@xml:id</link></code> value, reserved
                  for use by a future class-2 format, to relate words to their larger syntactical
                  context. </para>
               <para>If a lexicon has more than one entry for a given <code><link
                        linkend="element-l">&lt;l></link></code>, <code><link
                        linkend="attribute-pos">@pos</link></code> may be used to specify which
                  entry or entries are meant (<xref linkend="attr_pos_and_val"/>). If <code><link
                        linkend="attribute-pos">@pos</link></code> is absent, the value is assumed
                  to be 1.</para>
               <para>The content of <code><link linkend="element-m">&lt;m></link></code> consists of
                  one or more codes, space-delimited and defined in the chosen TAN-R-mor file. For
                  more about how codes are built, and how they function, see <xref linkend="tan-lm"
                  />.</para>
            </section>
         </section>
         <xi:include href="inclusions/TAN-class-2.xml"/>
         <xi:include href="inclusions/TAN-A-div.xml"/>
         <xi:include href="inclusions/TAN-A-tok.xml"/>
         <xi:include href="inclusions/TAN-LM.xml"/>
      </chapter>
      <chapter xml:id="class_3">
         <title>Class-3 TAN Files, Varia</title>
         <para>This chapter discusses class 3 TAN formats, which are those that do not fit either
            class 1 or 2. This class, at present, consists of rules pertaining to morphology, of
            keywords, and of RDF-friendly statements.</para>
         <section xml:id="tan-r-tok">
            <title>Tokenization Patterns</title>
            <para>The term <emphasis role="italic">word</emphasis> is notoriously difficult to
               define for any language. In English, for example, "New York" and "didn't" can each be
               justifiably defined as one or two words. So we adopt a proximate term, <emphasis
                  role="italic">token</emphasis>. A token is essentially a word that is defined not
               linguistically but computationally, according to a regular expression, and those
               regular expressions are constructed such that matches approximate what we normally
               call words. For example, we may define a token as any continuous string of word
               characters, <code>\w+</code> (see above, <xref linkend="regular_expressions"/>). </para>
            <para>To <emphasis role="italic">tokenize</emphasis> is to segment a string into a
               sequence of tokens. The segmentation is specified by another regular expression that
               defines the pattern that separates tokens, that is, the opposite or complement set.
               The way we find the tokens made of <code>\w+</code>, our example above, is by
               tokenizing on the complement set, <code>\W+</code>.</para>
            <para>Every TAN-R-tok file is, in essence, a tokenization constructor. It describes zero
               or more preparatory replacement processes, followed by a single tokenizing command,
               so as to create a sequence of words or tokens that can then be referred to by their
               position in the sequence. This is the backbone upon which all class-2 files depend
               for referring to specific word tokens in one or more class 1 files. Because TAN-R-tok
               files are used extensively by both class 1 and class 2 files, it is important that
               you familiarize yourself with how a TAN-R-tok file will be invoked by them. See <xref
                  linkend="element-recommended-tokenization"/> and <xref linkend="tokenization"
               />.</para>
            <para>Tokenization files may be either language specific or language agnostic. The
               latter are used for patterns that recur throughout languages, and are anticipated to
               be heavily used and limited in number. So for convenience, TAN provides the following
               language-agnostic TAN-R-tok files as standard, predefined rules:</para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para><code><link
                              xlink:href="http://textalign.net/release/1/dev/rules/TAN-R-tok/general-1.xml"
                              >http://textalign.net/release/1/dev/rules/TAN-R-tok/general-1.xml</link></code></para>
                  </listitem>
                  <listitem>
                     <para><code><link
                              xlink:href="http://textalign.net/release/1/dev/rules/TAN-R-tok/general-words-only-1.xml"
                              >http://textalign.net/release/1/dev/rules/TAN-R-tok/general-words-only-1.xml</link></code></para>
                  </listitem>
                  <listitem>
                     <para><code><link
                              xlink:href="http://textalign.net/release/1/dev/rules/TAN-R-tok/precise-1.xml"
                              >http://textalign.net/release/1/dev/rules/TAN-R-tok/precise-1.xml</link></code></para>
                  </listitem>
               </itemizedlist>
            </para>
            <para>For more about these core tokenization patterns and how they should be used, see
               the files themselves.</para>
            <section>
               <title>Principles and Assumptions</title>
               <para>Certain assumptions and recommendations are made regarding tokenization files,
                  complementing the more general ones; see <xref linkend="design_principles"
                  />.</para>
               <para>TAN-R-tok files are used exclusively to describe how a text should first be
                  changed (if needed) and then tokenized. Editors of these files should be familiar
                  with the writing conventions of the scripts for the languages they are tokenizing
                  and with the behavior of Unicode and Regular Expressions. (See <xref
                     linkend="unicode"/> and <xref linkend="regular_expressions"/>).</para>
               <para>Decisions in tokenizing are motivated by the assumptions one makes about a
                  given language and about the questions that motivates someone to tokenize a text.
                  Some linguists prefer to treat punctuation as tokens in their own right. Others,
                  such as those who work with ancient texts (where much punctuation is erratic,
                  anachronistic, or irrelevant), may wish to suppress them altogether. </para>
               <para>A poorly chosen or constructed TAN-R-tok file can produce invalid or undesired
                  results. You should clearly document the ideal purposes of a TAN-R-tok file, both
                  through a description of contents and good examples (at least one of which is
                  required).</para>
               <para>Tokenization will be applied to one leaf <code><link linkend="element-div"
                        >&lt;div></link></code> at a time, and not to the concatenation of those
                        <code><link linkend="element-div">&lt;div></link></code>s. So if a word
                  straddles leaf <code><link linkend="element-div">&lt;div></link></code>s, it will
                  always be broken up into two or more tokens. </para>
               <para>TAN-R-tok files do not admit doubt or multiple opinions. </para>
            </section>
            <section>
               <title>Rootmost Element and Header</title>
               <para>The rootmost element of a tokenizing file is <code><link
                        linkend="element-TAN-R-tok">&lt;TAN-R-tok></link></code>.</para>
               <para>Many TAN-R-tok files will have no <code><link linkend="element-source"
                        >&lt;source></link></code> element. Those that do may describe previous
                  works that have been used as sources for the patterning rules.</para>
               <para><code><link linkend="element-declarations">&lt;declarations></link></code>
                  takes one or more <code><link linkend="element-for-lang"
                     >&lt;for-lang></link></code>s that take a standard language code (see <xref
                     linkend="language"/>). If a TAN-R-tok file is meant to apply to any language,
                        <code><link linkend="element-for-lang">&lt;for-lang></link></code> should be
                  suppressed. </para>
            </section>
            <section>
               <title>Data (<code><link linkend="element-body">&lt;body></link></code>)</title>
               <para>The <code><link linkend="element-body">&lt;body></link></code> of a TAN-R-tok
                  file takes the customary optional attributes found in other TAN files (see
                        <code><link linkend="attribute-in-progress">@in-progress</link></code> and
                     <xref linkend="edit_stamp"/>). <code><link linkend="element-body"
                        >&lt;body></link></code> has only three kinds of children: zero or more
                        <code><link linkend="element-replace">&lt;replace></link></code>s followed
                  by one <code><link linkend="element-tokenize">&lt;tokenize></link></code> followed
                  by one or more <code><link linkend="element-example">&lt;example></link></code>s .
                  See these elements for details and examples.</para>
            </section>
         </section>
         <section xml:id="tan-r-mor">
            <title>Morphological Concepts and Patterns (TAN-R-mor)</title>
            <para>TAN-R-mor files allow you to describe the morphological features of a given
               language, to assign codes of those features, and to define rules in how those codes
               may be applied. The format allows specificity, flexibility, and responsiveness.
               Assertions in the format may be doubted, rules may be expressed as contingent upon
               other coniditons, and warnings and error messages may be sent to users who may have
               used a pattern incorrectly, or not in accordance with best practices.</para>
            <para>The TAN-R-mor format is like a Schematron language for languages. That is, you may
               specify series of reports and assertions to be made, based upon how user of the
               format tries to combine morphological features. So a user is not only able to see if
               the rules have been violated, but why, and exactly where.</para>
            <para>This chapter should be read in close conjunction with that pertaining to TAN-LM
               files, which exclusively depend upon them (<xref linkend="tan-lm"/>).</para>
            <section>
               <title>Principles and Assumptions</title>
               <para>Certain assumptions and recommendations are made regarding morphology files,
                  complementing the more general ones; see <xref linkend="design_principles"
                  />.</para>
               <para>TAN-R-mor files are restricted exclusively to the description of the
                  inflectional categories that characterize a language, and to declare rules that
                  restrict how those categories can be declared or combined. Editors of these files
                  should be familiar with the grammar of the languages they are describing.</para>
               <para>The TAN-R-mor format has been designed under the assumption that word formation
                  and inflection, in any given language, can be analyzed in different ways. It is
                  also assumed that patterns of word inflection and formation can be categorized,
                  classified, named, and described. Different views on the grammatical features and
                  tendencies of a language should be declared, not suppressed. For example, not
                  everyone agrees on the number of major parts of speech in English. And among those
                  who think there are only eight, some name and define those categories in different
                  ways. A mid-twentieth-century paradigm held to a major category called <emphasis
                     role="italic">conjunctions</emphasis>, whereas most linguists now prefer to
                  break this into two major categories, <emphasis role="italic"
                     >subordinators</emphasis> and <emphasis role="italic"
                  >coordinators</emphasis>.</para>
               <para>The TAN-R-mor format has also been designed to cater to two approaches to
                  coding the morphological features of a language: structured or unstructured. </para>
               <para>Structured codes are created with a presumption of a set number of categories
                  into which various features of morphology should be combined. Structured codes
                  tend to have a set number of code elements, and usually require gaps in different
                  spots. For example, the Perseus approach to the morphological categories of Greek,
                  Latin, and other highly inflected languages dictate ten categories, with the first
                  two being the major and minor parts of speech, and the subsequent categories
                  devoted to person, number, tense, and so forth. Each word that is analyzed must
                  have a value, even if null.</para>
               <para>Morphology based on unstructured codes relies upon a single master set of tags
                  for morphological features, which can be applied in any sequence and combination
                  (other rules permitting). This approach is viable for any language, but it is most
                  often found in tagging sets for languages that have little inflection, e.g., the
                  Brown and Penn sets for English.</para>
            </section>
            <section>
               <title>Rootmost Element and Header</title>
               <para>The rootmost element of a morphological rule file is <code><link
                        linkend="element-TAN-R-mor">&lt;TAN-R-mor></link></code>.</para>
               <para>Zero or more <code><link linkend="element-source">&lt;source></link></code>
                  elements describe the grammars or related works that account for the rules
                  declared in the TAN file. If the rules are not based upon any published work, then
                        <code><link linkend="element-source">&lt;source></link></code> may be
                  omitted. Any TAN-R-mor file without a source will assume to be based upon the
                  personal knowledge of the <code><link linkend="element-agent"
                     >&lt;agent></link></code>s who edited the file.</para>
               <para><code><link linkend="element-declarations">&lt;declarations></link></code>
                  takes two types of element, one or more <code><link linkend="element-for-lang"
                        >&lt;for-lang></link></code>s that take a standard language code (see <xref
                     linkend="language"/>) and one or more <code><link linkend="element-feature"
                        >&lt;feature></link></code>s that declare the morphological features that
                  characterize the languages being described. This forms a kind of morphological
                  alphabet from which both structured and unstructured approaches begin. </para>
            </section>
            <section>
               <title>Data (<code><link linkend="element-body">&lt;body></link></code>)</title>
               <para>The <code><link linkend="element-body">&lt;body></link></code> of a TAN-R-mor
                  file takes the customary optional attributes found in other TAN files (see
                        <code><link linkend="attribute-in-progress">@in-progress</link></code> and
                     <xref linkend="edit_stamp"/>). <code><link linkend="element-body"
                        >&lt;body></link></code> takes any number of <code><link
                        linkend="element-assert">&lt;assert></link></code>, <code><link
                        linkend="element-report">&lt;report></link></code>, <code><link
                        linkend="element-category">&lt;category></link></code> (if relying upon
                  structured codes), or <code><link linkend="element-option"
                     >&lt;option></link></code>s. </para>
               <para>Very generally, <code><link linkend="element-option">&lt;option></link></code>
                  allows the means either to rename <link linkend="element-feature"
                        ><code>&lt;feature></code></link>s or to provide individual members of a
                        <code><link linkend="element-category">&lt;category></link></code>.</para>
               <para><code><link linkend="element-category">&lt;category></link></code> allows you
                  to sort <link linkend="element-feature"><code>&lt;feature></code></link>s into
                  groups. This technique may be useful for languages that have numerous
                  morphological features that are traditionally grouped to support complex codes. A
                  common way to handle the morphology of Greek, for example, is through a
                  ten-character code that indicates the major part of speech, person, number, and so
                  forth. This requires users of the TAN-R-mor file to respect the order in which
                  various codes appear.</para>
               <para>This approach is only optional and probably not the best way to declare the
                  morphological features of a language. By dispensing with <code><link
                        linkend="element-category">&lt;category></link></code>, you allow users to
                  access the <link linkend="attribute-xmlid"><code>@xml:id</code></link> value of
                     <link linkend="element-feature"><code>&lt;feature></code></link> directly, and
                  to list features in any order they wish.</para>
               <para>The values and combinations can be constrained through <code><link
                        linkend="element-assert">&lt;assert></link></code> and <code><link
                        linkend="element-report">&lt;report></link></code> declarations, which are
                  used to declare rules that must be followed, or must never be used, in any
                  dependent TAN-LM file. </para>
               <para>An <code><link linkend="element-assert">&lt;assert></link></code> and
                        <code><link linkend="element-report">&lt;report></link></code> may be
                  restricted to specific features through <code><link
                        linkend="attribute-feature-filter">@feature-filter</link></code>. If
                        <code><link linkend="attribute-feature-filter">@feature-filter</link></code>
                  is present, then <code><link linkend="element-assert">&lt;assert></link></code>
                  and <code><link linkend="element-report">&lt;report></link></code> declarations
                  will be checked in a TAN-LM file only against values of <code><link
                        linkend="element-m">&lt;m></link></code> that invoke the feature; otherwise,
                  all <code><link linkend="element-m">&lt;m></link></code>s will be tested. Four
                  kinds of tests are allowed (for details of any given test, follow the
                  link):</para>
               <para>
                  <itemizedlist>
                     <listitem>
                        <para><code><link linkend="attribute-code-regex-test"
                                 >@code-regex-test</link></code>: indicates a regular expression
                           pattern to be checked against the code in an <code><link
                                 linkend="element-m">&lt;m></link></code>.</para>
                     </listitem>
                     <listitem>
                        <para><code><link linkend="attribute-token-regex-test"
                                 >@token-regex-test</link></code>: indicates a regular expression
                           pattern to be checked against the tokens picked by the values of
                                 <code><link linkend="element-tok">&lt;tok></link></code> in a
                           dependent TAN-LM file.</para>
                     </listitem>
                     <listitem>
                        <para><code><link linkend="attribute-feature-test"
                              >@feature-test</link></code>: indicates features to be checked in the
                           content of <code><link linkend="element-m">&lt;m></link></code>s.</para>
                     </listitem>
                     <listitem>
                        <para><code><link linkend="attribute-feature-qty-test"
                                 >@feature-qty-test</link></code>: indicates the number of features
                           to be checked in the content of <code><link linkend="element-m"
                                 >&lt;m></link></code>s.</para>
                     </listitem>
                  </itemizedlist>
               </para>
               <para>An <code><link linkend="element-assert">&lt;assert></link></code> indicates
                  that for any <code><link linkend="element-m">&lt;m></link></code> in any dependent
                  TAN-LM file, if the test proves false, and if the <code><link linkend="element-m"
                        >&lt;m></link></code> has a feature declared in <code><link
                        linkend="attribute-feature-filter">@feature-filter</link></code>, then the
                        <code><link linkend="element-m">&lt;m></link></code> should be marked as
                  erroneous (or merely a warning should be returned, if <code><link
                        linkend="attribute-code">@cert</link></code> is present) and the message
                  included by the <code><link linkend="element-assert">&lt;assert></link></code>
                  should be returned.</para>
               <para><code><link linkend="element-report">&lt;report></link></code> has the same
                  effect, but the role of the test is the opposite: the error and message will be
                  returned only if the test proves true.</para>
            </section>
         </section>
         <section xml:id="tan-key">
            <title>Keyword Vocabulary (<code>TAN-key</code>)</title>
            <para>All too often, a project has a set of vocabulary it draws from time and again for
               its files. To repeat the IRI + name pattern can not only be tedious, it can be
               treacherous, especially when a project decides to change or augment its vocabulary,
               and fails to do so thoroughly.</para>
            <para>The TAN-key format is intended to allow a project to define the IRI + name
               patterns for things that it regularly names, and to be applied to any element that
               takes <link linkend="attribute-which"><code>@which</code></link>. . This format is
               used as a core part of the TAN schema to define the concepts invoked by reserved
               keywords for <code><link linkend="element-tokenize">&lt;tokenization></link></code>,
                  <link linkend="element-div-type"><code>&lt;div-type></code></link>s, and so forth.
               This same format can be used by a project to define a discrete range of
               terminology.</para>
            <para>A TAN-key file is invoked via <code><link linkend="element-key"
                  >&lt;key></link></code>. Furthermore, every <code><link linkend="element-key"
                     >&lt;key></link></code> invoked by an <code><link linkend="element-inclusion"
                     >&lt;inclusion></link></code> (calculated recursively) is automatically
               included in a TAN document's privately reserved keywords and definitions.</para>
            <xi:include href="inclusions/TAN-key.xml"/>
         </section>
         <section xml:id="tan-rdf">
            <title>RDF assertions (<code>TAN-rdf</code>)</title>
            <para>Many projects using the TAN format will find the need to include in their workflow
               declarations about related concepts, and to include that in their workflow. In many
               cases, there are adequate formats that are available. At other times, you may want to
               encode your information in a format much like your other TAN files. For those cases,
               an experimental format, TAN-rdf, is provided.</para>
            <para>The concept is relatively simple: allow a user to make RDF-compliant declarations
               about concepts invoked, but never defined in the TAN format. Take, for example, two
               TAN files, where one is a commentary or set of notes on the other. Properly speaking,
               each TAN-T(EI) file should define the work differently. But you want to be able to
               indicate that one work is a set of annotations or comments to the other. In such a
               case, you would write a separate TAN-rdf file that declares this relationship, and
               you would point to that TAN-rdf file in the two transcription files, via a
               computer-readable form of <code><link linkend="element-desc">&lt;desc></link></code>
               under <code><link linkend="element-work">&lt;work></link></code>.</para>
            <xi:include href="inclusions/TAN-rdf.xml"/>
         </section>
         <xi:include href="inclusions/TAN-class-3.xml"/>
         <xi:include href="inclusions/TAN-mor.xml"/>
         <xi:include href="inclusions/TAN-key.xml"/>
         <xi:include href="inclusions/TAN-rdf.xml"/>
      </chapter>
   </part>

   <part>
      <title>Working with the Text Alignment Network</title>
      <partintro>
         <para>[This part has not been drafted. Individual chapters may contain ideas in the rough
            that will later be developed into comprehensive prose.]</para>
      </partintro>
      <chapter>
         <title>Built-in Editorial Aids for TAN Files</title>
         <para>Editing any XML file can be a chore. Perhaps a file is invalid, and for unclear
            reasons. Or perhaps you are trying to add values that are found in other files, and you
            do not want to leave your editing context to find those values, copy them, return to
            where you were editing, and paste them.</para>
         <para>This chapter is devoted to documenting TAN-supported editorial assistance. For select
            TAN formats, a lightweight schematron file is provided as an auxiliary, predictably
            constructed by inserting <code>-edit</code> just before the <code>.sch</code>. If you
            are working with very large or complex files where the main validation is
            time-consuming, you may suppress the official validation schematron file and use only
            the editing schematron until you are ready to validate everything. At that point restore
            the official Schematron schema and validate as you would normally.<example>
               <title>Prolog of TAN file using built-in TAN editing assistance, with official
                  schemas</title>
               <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?> 
&lt;?xml-model href="../dev/schemas/TAN-A.rnc" type="application/relax-ng-compact-syntax"?> 
&lt;?xml-model href="../dev/schemas/TAN-A.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
&lt;?xml-model href="../dev/schemas/TAN-A-edit.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?> </programlisting>
            </example><example>
               <title>Prolog of TAN file using built-in TAN editing assistance, suppressing
                  Schematron validation</title>
               <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?> 
&lt;?xml-model href="../dev/schemas/TAN-A.rnc" type="application/relax-ng-compact-syntax"?> 
&lt;!–- &lt;?xml-model href="../dev/schemas/TAN-A.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>-->
&lt;?xml-model href="../dev/schemas/TAN-A-edit.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?> </programlisting>
            </example></para>
         <para>&lt;At this point need to develop an algorithm to traverse any -edit.sch file, to
            populate an inclusion to document what formats are editable, and to what ends.></para>
      </chapter>
      <chapter>
         <title>Best Practices in Creating and Editing TAN Files</title>
         <para>Filenames: Class 1: good idea to construct a filename that starts with an acronym for
            the work, followed by the language code, then the date or editor's last name. If you
            think you're going to branch it off into different editions, then provide a version
            number at the end. Class 2 files are tougher, because you want to specify for TAN-A-tok
            which two versions are being compared. You might wind up with very long filenames if you
            try to include both. And for TAN-A-div, all hope is lost for specifying the names of the
            sources. But that format is really about collating works, so you may want simply to
            indicate the work or works that are being aligned. TAN-LM files should adopt the name of
            their one and only source, but make clear that they are LM files. Class 3: TAN-R-mor:
            start with the language code then the namespace of the document's @id then a version
            number. TAN-R-tok: tok + description + version number.</para>
         <para>If you have a text with notes, distinguish between whether the notes are intrinsic or
            extrinsic to the work. </para>
         <para>If the former, treat them as such and give them <code><link linkend="element-div"
                  >&lt;div></link></code>s. But don't try to keep everything in document order. That
            is, either put notes at the end of every relevant div, or put them all the way at the
            end of the work. And you can also probably delete the note signals. You can use
            self-alignment to make sure that notes are pegged to their proper place. And there you
            have the opportunity to attach the note not only to the word or punctuation to which it
            is attached, but you can try to sense the entire range of text that the author wished
            the note to apply to.</para>
         <para>If the notes are not part of the work per se -- for example, translator's notes in a
            translation of a primary source -- you may treat the notes as a work in their own right.
            Just create a separate TAN file for those notes, then create an alignment file to
            correlate the notes with the translation.</para>
         <para>Remember that the note signals in the main text and in the footnote area are metadata
            meant to help readers link corresponding passages of texts. So if you've already
            accommodated those alignments through a TAN-A file, the note signals are otiose, and
            they are good candidates for normalization.</para>
         <para>What about if you are transcribing a text that has variants to the work integrated
            into the document? For example, a manuscript may have correctors' marks. Or a critical
            edition can be seen as a modern instatiation, noting where corrections and deviations
            occur. In those cases...</para>
         <para>If you are working with an XML editor that utilizes Schematron Quick Fixes, you will
            find that quite a lot of work can be saved by taking advantage of these. For specifics,
            see part II of these guidelines, where SQF tips are documented. &lt;to do: go through
            all SQFs and make sure they are documented in the guidelines.></para>
      </chapter>
      <chapter>
         <title>Best Practices in Managing and Sharing TAN Files</title>
         <para>Good idea to think about TAN files as resting in controlled libraries of a manageable
            size and, to you at any rate, coherent theme.</para>
         <para>Put your class 1 files in the root of the library directory. Then put your class 2 or
            class 3 files in their own subdirectory, given the name of their TAN type, e.g.,
            TAN-A-div.</para>
         <para>If class 2 or class 1 files point to other members of that same project, use a local
            URL for &lt;location>. You may wish to provide other &lt;location>s with the absolute
            URL.</para>
         <para>Put your TAN libraries in a single folder. If you import someone else's TAN library
            for local use, put it in that same folder, using a descriptor for the filename that
            makes sense to you.</para>
         <para>When you poin to external libraries, include along with the absolute URL another
            &lt;location> that points to the local version.</para>
      </chapter>
      <chapter>
         <title>Best Practices in Using TAN Files</title>
         <para>Developers: it is advisable to process the data in two steps. The first step puts all
            the data into a simplified, normalized data set. The second step queries and arranges
            that simplified data.</para>
         <para>The first step: collect all the files that have been invoked. Normalize the data
            according to the <code><link linkend="element-declarations"
               >&lt;declarations></link></code>s specified in the <code><link linkend="element-head"
                  >&lt;head></link></code>. Transcription references should be homogenized to have a
            common nomenclature. It may help to flatten the hierarchy of the transcription data into
            leaf <code><link linkend="element-div">&lt;div></link></code>s, i.e., pairs consisting
            of a leaf <code><link linkend="element-div">&lt;div></link></code> ref and the text
            values for that ref.</para>
         <para>The second step, that of transforming or querying the text, becomes much simpler and
            easier.</para>
      </chapter>
   </part>
   <xi:include href="inclusions/index.xml"/>
</book>
