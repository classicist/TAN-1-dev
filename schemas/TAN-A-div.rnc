default namespace local = "tag:textalign.net,2015:ns"

start =
    
    ## specifies that the file is a div-based TAN alignment file. Root element.
    element TAN-A-div { TAN-root }
include "incl/TAN-class-2.rnc" {
    
    ## TAN-A-div files must have one or more sources
    source-list = source-item+
    
    ## declarations by default have ids
    decl-id-ref-opt = internal-id
    
    ## TAN-A-div sources must be named
    source-id-opt = internal-id
    declaration-items = decl-tok-def* & decl-supp-div-type* & decl-rename-div-n* & TAN-c-decl-core
    continuation-opt = empty
    
    ## Redefining TAN-body-core not only defines what is in the body of a TAN-A-div but also excludes groups from it.
    TAN-body-core = work-equiv*, div-type-equiv*, split*, realignment*, set-of-claims?
}
# <equate-works>
work-ref =
    
    ## refers to a work by means of a source ID as a proxy. The attribute will be treated as indicating all sources that share the same work as the one mentioned.
    
    ## If you wish to avoid making a claim applying to all other versions of a work, use @src instead.
    attribute work {
        xsd:string { pattern = "\S+" }
    }
work-refs =
    
    ## refers to works by means of source IDs as a proxy. 
    attribute work { text }
work-equiv =
    
    ## declares an ad hoc equivalence between works that are not defined by the <IRI>s in their sources as being identical.
    
    ## This element extends the automatic equating of works, which is transitive and greedy. If work A is defined with <IRI> X, work B with <IRI>s X and Y, and work C with only <IRI> Y, then works A and C will be automatically equated.
    
    ## <equate-works> does not imply that the two works are, in reality, one and the same. It merely states that, for the purposes of this alignment, they should be treated as equivalent.
    element equate-works { ed-stamp?, (inclusion | work-refs) }
# <equate-div-types>
div-type-equiv =
    
    ## declares an ad hoc equivalence between div types that are not defined by the <IRI> values in their sources as being identical.
    
    ## <equate-div-types> are assumed to be greedy and transitive. If this element is used to equate div type X with type Y, then any div type in any source identical to X's or Y's IRI values will treated as identical. 
    
    ## This element does not imply that the two types of division are, in reality, one and the same. It merely states that, for the purposes of this alignment, they should be treated as equivalent.
    element equate-div-types {
        ed-stamp?,
        (inclusion | (div-type-ref-cluster, div-type-ref-cluster+))
    }
div-type-ref-cluster =
    
    ## points to a <div-type> in one or more sources, using the @xml:id assigned by the source to that div type. 
    element div-type-ref { ed-stamp?, source-refs, div-type-ref }
# <split-leaf-div-at>
split =
    
    ## creates ad hoc splits in leaf <div>s, to facilitate alignments and realignments of textual units smaller than leaf <div>s. Any leaf div may be split as many times as there are token, as defined by <tokenization>s.
    
    ## Each split creates a provisional segment, a textual subdivision of a leaf <div>.
    element split-leaf-div-at {
        ed-stamp?,
        (inclusion | (comment* & tok-regular+))
    }
# <realign>
anchor-div-ref-item =
    
    ## refers to a group of one or more <div>s (or segments of <div>s) to which <div>s from other versions of the same work should be realigned (defined by the <div-ref>s that follow). The first child of a <realign>, it is constructed exactly like <div-ref>, except that only @src, not @work, is used, and @seg is excluded. 
    
    ## <anchor-div-ref> does not permit the comma in @ref in an undistributed realignment, since realignment must always be made to a contiguous range of text. 
    
    ## If the parent <realign>'s @distribute is false, or missing, then each <div-ref> group will be realigned as a whole to the anchor, treated as a whole.
    
    ## If @distribute is true, then every nth realign head will serve as the anchor for the nth realign head in each subsequent <div-ref>s (grouped by source).
    
    ## @seg, which applies to splits in specific sources, is not allowed because the job of an anchor is to reconcile other <div>s to a reference that is valid independent of any particular edition. @seg would defeat that purpose.
    
    ## For more, see <div-ref>.
    element anchor-div-ref { ed-stamp?, source-ref, pointer-to-div-range }
seg-ref =
    
    ## picks specific segments in a leaf div. There must be an appropriate number of splits declared for those leaf divs in <split-leaf-div-at>.
    attribute seg { seq-picker }
reanchor-div-ref-item =
    
    ## refers to and groups one or more <div>s (or segments of <div>s).
    
    ## <div-ref>s are expanded against @src/@work, @ref, and @seg. That is, a <div-ref> points to every segment of every div of every source cited.
    
    ## A <div-ref>, or a group of <div-ref>s joined by @cont, are treated as many groups as sources referred to. That is, <div-ref src="X Y" ... /> will be treated as shorthand for <div-ref src="X" ... /> and <div-ref src="Y" ... />. This applies to @work as well: <div-ref work="w" ... /> is equivalent to <div-ref src="w1" ... />, <div-ref src="w2" ... />, etc. 
    
    ## After this distinction between sources is made, the entire set of <div>s pointed to will be treated as a group, and processed as a whole (see @distribute). 
    
    ## <div-ref> is a grouping device, and is therefore unlike <tok>, which always refers to single items, never sets. As a result, the siblings <div-ref src="X" ref="a"/> and <div-ref src="X" ref="b"/> are NOT identical to <div-ref src="X" ref="a, b"/>   
    element div-ref { ed-stamp?, source-refs, pointer-to-div-range, seg-ref? }
realignment =
    
    ## corrects misaligned or unaligned divisions and segments in versions of the same work. <realign> is intended to reconcile discordant reference systems by mapping <div>s from one or more sources onto the <div>s of another, treated as an anchor. The reanchored divs are then excluded from any default alignments, but they inherit the anchor's alignments. 
    
    ## Realignments come in four types.
    
    ## An UNANCHORED, ONE-SOURCE realigment consists solely of one or more <div-ref>s belonging to only one source. Any number of <div>s may be referred to by the child <div-ref>s. All <div>s referred to will be excluded from automatic alignment with every other version of the same work.
    
    ## An UNANCHORED, MULTIPLE-SOURCE realignment realigns <div>s from multiple sources. The number of <div>s per source must be identical, since these <div>s will not only be excluded from automatic alignment, but realigned with each other, with the nth <div> in each source constituting a realigned group.
    
    ## An ANCHORED, ONE-TO-ONE realignment consists of an <anchor-div-ref> that points to n <div>s, and each source invoked by the following <div-ref>s also point to n <div>s, which will be reanchored to the nth <div> in the anchor. 
    
    ## An ANCHORED, ONE-TO-MANY realignment consists of an <anchor-div-ref> that points only to one <div>, and <div-ref>s that point to any number of sources and any number of <div>s. To that one anchor will be remapped each source's collection of <div>s to be reanchored. The sequence of <div>s referred to will be respected. If to an anchor A is remapped <div>s 2, 4, and 3, then  
    
    ## Realignment is disruptive, displacing any default alignment that might have been inferred in the reanchored source. Assume a case where a <div> with reference B is being realigned to an anchor with reference A. In the source to be reanchored reference A, if it exists, will be excluded from automatic alignment with the anchor, unless if it is explicitly included in a <realign>. 
    
    ## All realignment, except one-to-many anchored, is inheritable, affecting not only the specified <div>s but also their descendants. That is, if X is realigned to Y, then children in X will be automatically aligned with children in Y, based on normalized values of @n. Children of <div>s in one-to-many anchored realignments must be explicitly realigned.
    
    ## Because of the distributive nature of the realignment, every value of @ref that involves a hyphen must have siblings with balanced depth on the left and right side of the hyphen (i.e., ref="1 - 2.1" would be invalid).
    
    ## <realign> does not affect subsequent nomenclature of @ref. If in source x a <div> A is realigned with <div> B in source y, then subsequent references to the realigned <div> in source x should still use A as a value of @ref, not B.  
    
    ## The order of <realign>s is immaterial. No <realign> overwrites any other <realign>. If two <realign>s each reanchor A and B in the same source to C in the anchor, then A and B will be realigned in parallel. If one meant to say that A followed by B is to be realigned to C, then a one-to-many anchored realignment should be used.  
    element realign {
        ed-stamp?,
        (inclusion
         | (comment* & (anchor-div-ref-item*, reanchor-div-ref-item+)))
    }
# <claim>
include "incl/TAN-c-core.rnc" {
    textual-objects =
        (source-refs | work-ref),
        ((pointer-to-div-range, seg-ref?) | complex-text-ref+)
}
set-of-claims = claimant, subject?, verb?, claim+
complex-text-ref = claim-div-ref-item | tok-regular
claim-div-ref-item = element div-ref { ed-stamp?, pointer-to-div-range, seg-ref? }
