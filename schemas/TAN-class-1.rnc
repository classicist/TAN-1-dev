default namespace local = "tag:textalign.net,2015:ns"

include "TAN-core.rnc" {
   decl-non-core = decl-class-1 & decl-non-class-1
   ## No class 1 file may use @src, because there is only one source allowed
   source-ref = empty
   ## Any class 1 file that declares a core TAN tokenization pattern, must use one of the following options
   tokenization-ref-text = xsd:string { pattern = "(precise|general(-words-only)?)-\d+" }
}
## Class 1 files must declare a single work, perhaps one version, one or more divisions, one or more
## recommended tokenizations, perhaps one filter, and perhaps one 
decl-class-1 = decl-work & decl-vers? & decl-div+ & decl-tok-rec+ & decl-ref-rec? & decl-filt?
## Reserved for declarations specific to individual types of class 1 files
decl-non-class-1 = empty
decl-work =
## The work that has been transcribed
   element work {
      ed-stamp?,
      (inclusion | (comment* & entity-nondigital-ref))
   }
decl-vers =
## Version of the work has been transcribed (for text-bearing objects that have multiple versions of the work)
   element version {
      ed-stamp?,
      (inclusion | (comment* & entity-nondigital-ref))
   }
decl-div =
## Types of textual divisions into which a transcription has been segmented (e.g., title, paragraph, stanza)
   element div-type {
      ed-stamp?,
      (inclusion
       | (ns-are-numerals?, internal-id, (comment* & entity-nondigital-ref)))
   }
decl-tok-rec =
## Recommended pattern to be used to segment a text into word tokens.
   element recommended-tokenization {
      empty
      | tokenization-ref
      | inclusion
      | (internal-id, ed-stamp?, (comment* & entity-digital-tan-other-ref))
   }
decl-ref-rec =
## Recommendation on whether references to the transcription should make div types explicit or implicit.
   element recommended-div-type-refs {
      ed-stamp?,
      (inclusion
       | xsd:string { pattern = "implicit|explicit" })
   }
## 
decl-filt = 
## Filter declaring alterations that have been made or should be made to the source(s).
element filter { ed-stamp?, (comment* & decl-filter-content) }
decl-filter-content = decl-filt-norm* & decl-filt-repl* & decl-filt-tlit*
decl-filt-norm =
## Normalizations made to a source file. Typically applies to tacit corrections made in the transcription or interpetation of a source (e.g., suppression of discretionary hyphenation). 
   element normalization {
      ed-stamp?,
      (inclusion
       | (comment* & (lang-outside*, entity-nondigital-ref)))
   }
## Replacements that have been made to an XML source file. 
decl-filt-repl = func-replace
decl-filt-tlit =
## Transliteration scheme applied to a source.
   element transliteration {
      ed-stamp?,
      (inclusion
       | (comment* & (lang-outside*, entity-nondigital-ref)))
   }
