default namespace = "tag:textalign.net,2015:ns"

datatypes d = "http://relaxng.org/ns/compatibility/datatypes/1.0"

start =
    
    ## specifies that the TAN file makes assertions subject a conceptual work. Root element.
    element TAN-rdf { TAN-root }
include "TAN-class-3.rnc" {
    
    ## all declarations must have ids
    decl-id-ref-opt = internal-id
    source-list = source-item*
    decl-non-core = TAN-rdf-decl
    item = TAN-rdf-item
    other-body-attributes = claimant, subject
}
TAN-rdf-decl = decl-work* & decl-place* & decl-verb+ & decl-unit* & decl-pers* & decl-mode* & decl-vers*
decl-place =
    
    ## contains an IRI + name pattern identifying a spatial location, usually somewhere on earth
    element place { decl-pattern-default }
decl-verb =
    
    ## contains an IRI + name pattern identifying a property, relationship, action, or something else that is used to say something about something. 
    
    ## The preferred term "verb" is equivalent to RDF "predicate." The latter term is avoided as being misleading -- most who use TAN will understand "predicate," grammatically speaking, to refer to everything in a sentence that is not the subject,
    element verb { object-datatype?, object-lexical-constraint?, decl-pattern-default }
object-datatype =
    
    ## specifies the type of data that the object must take. Use this attribute if and only if the object is not an entity defined by the
    attribute object-datatype {
        xsd:string {
            pattern =
                "string|boolean|decimal|float|double|duration|dateTime|time|date|gYearMonth|gYear|gMonthDay|gDay|gMonth|hexBinary|base64Binary|anyURI|QName|NOTATION|normalizedString|token|language|NMTOKEN|NMTOKENS|Name|NCName|ID|IDREF|IDREFS|ENTITY|ENTITIES|integer|nonPositiveInteger|negativeInteger|long|int|short|byte|nonNegativeInteger|unsignedLong|unsignedInt|unsignedShort|unsignedByte|positiveInteger"
        }
    }
object-lexical-constraint =
    
    ## specifies a regular expression that constrains the value of any <object>
    attribute object-lexical-constraint { text }
decl-unit =
    
    ## contains an IRI + name pattern identifying a unit type (e.g., millimeters, seconds, Euros), to be used in conjunction with <object> to specify the meaning of a value
    element unit { decl-pattern-default }
decl-pers =
    
    ## contains an IRI + name pattern identifying a person. This element is very similar to <agent>, but does not imply that the person had anything to do with the data in the TAN file.
    
    ## Although person implies a single individual, this element may be applied to corporate entities, or natural groups of more than one person.
    element person { decl-pattern-default }
decl-mode =
    
    ## contains an IRI + name pattern identifying a modal that qualifies an assertion.
    element modal { decl-pattern-default }
TAN-rdf-item = claim+
claim =
    element claim {
        inclusion
        | (ed-stamp?,
           claimant?,
           subject?,
           verb,
           object,
           period-filter*,
           place-filter?,
           cert-claim?,
           modal-claim?)
    }
claimant =
    
    ## points to an <agent> or <person> who makes a claim. @claimant within <body> indicates the default persons to be credited or blamed for an assertion.
    
    ## Claimants are not to be confused with the editor of a TAN file. If an editor X writes a TAN-rdf file that says that person Y makes such-and-such a claim, then the implication is that X claims that Y claims that....  
    attribute claimant { d:IDREFS }
subject =
    
    ## points to one or more ID refs of entities defined in <head> that serve as the grammatical subject of a claim. @subject within <body> indicates the default subject(s) for <claim>s. 
    attribute subject { d:IDREFS }

## points to one or more <verb>s that serve to assert something of the @subject.
verb =
    
    ## The preferred term "verb" is equivalent to RDF "predicate." The latter term is avoided as being misleading -- most who use TAN will understand "predicate," grammatically speaking, to refer to everything in a sentence that is not the subject,
    attribute verb { d:IDREFS }
object = simple-object | complex-object
simple-object =
    
    ## points to one or more ID refs of entities defined in <head> that serve as the grammatical object of a claim. For example, if you wish to say that work A is a commentary on work B, then the object would have the ID ref for work B. If you wish to make more complex assertions, use <object>
    attribute object { text }
complex-object = element object { (lang-of-content | units)?, text }
units =
    
    ## points to the ID ref of a <unit>, defining the type of units.
    attribute units { d:IDREF }
place-filter =
    
    ## restricts the <claim> to a specific <place> 
    attribute where { d:IDREFS }
modal-claim =
    
    ## names a <modal> that qualifies the claim.
    attribute adverb { d:IDREF }
